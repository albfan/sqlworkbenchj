<section id="install">
	<title>Installing and starting &wb-productname;</title>

	<para>To run &wb-productname; a <ulink url="http://java.sun.com/j2se/">Java runtime environment</ulink> 
		version 1.4 (or above) is required. You can either use a JRE ("Runtime") or a JDK ("Development Kit") to
		run &wb-productname;. Once you have downloaded the application, unzip the archive into 
		a directory of your choice. Apart from that, no special installation procedure is needed. 
		When upgrading to a newer version of &wb-productname; simply overwrite the old 
		<literal>workbench.jar</literal> file (and of course the HTML manual).
	</para>

	<section id="starting">
		<title>Starting the program</title>

		<para>Workbench.jar is a self executing JAR file. This means, that if
		your JDK is installed properly, a double click (on the Windows&reg; platform)
		on Workbench.jar will execute the application. To run the application
		manually use the command:</para>

		<programlisting>java -jar Workbench.jar</programlisting>

		<para>If you want to create a shortcut on your desktop use the above
		line. On Windows&reg; systems - if you don&apos;t use the <link linkend="launcher-using">native launcher</link>- it
		is recommended to use javaw instead of java, so that the console window
		is not displayed.</para>
		<programlisting>javaw -jar Workbench.jar</programlisting>

		<section id="config-dir" xreflabel="Configuration directory">
			<title>Specifying the location of configuration files</title>

			<para>If no configuration directory has been specified on the commandline,
				&wb-productname; will check the current directory for a workbench.settings
				file. If no file is present in the current directory, &wb-productname; 
				will use the directory where <literal>workbench.jar</literal> is located
				as the configuration directory.
			</para>
			<para>The configuration files are:
				<itemizedlist>
					<listitem>General configuration settings (<filename>workbench.settings</filename>)</listitem>
					<listitem>Connection profiles (<filename>WbProfiles.xml</filename>)</listitem>
					<listitem>JDBC Driver definitions (<filename>WbDrivers.xml</filename>)</listitem>
					<listitem>Customized shortcut definitions (<filename>WbShortcuts.xml</filename>)</listitem>
					<listitem>Macro definitions (<filename>WbMacros.xml</filename>)</listitem>
					<listitem>Log file (<filename>workbench.log</filename>)</listitem>
					<listitem>Workspace files (<filename>*.wksp</filename>)</listitem>
				</itemizedlist>
			</para>

			<para>If you want to use a different file for the connection profile than WbProfiles.xml then you can specify the
				location of the profiles with the <literal>-profilestorage</literal> parameter on the commandline.
				Thus you can create different shortcuts on your desktop pointing to different sets of profiles.
				The different shortcuts can still use the same main configuration file.
			</para>
			<para>If you want to put all configuration files into a directory different
				from the current (or jar file's) directory, start &wb-productname;
				with the parameter -configdir to specify an alternate directory:</para>
			<para>
				<programlisting>java -jar Workbench.jar -configdir=c:\ConfigData</programlisting>
				or if you are using the Windows&reg; launcher:
				<programlisting>JWorkbench -configdir=c:\ConfigData</programlisting>
			</para>

			<para>
				To copy an installation to a different computer, simply copy all the above
				files to the other computer (the log file does not need to be copied).
				When a profile is connected to a workspace, the filename
				of the workspace file is usually stored with a placeholder for the configuration directory
				(%ConfigDir%) so that the profiles don't need to be adjusted.
			</para>
			<para>
				You will need to edit the driver definitions (stored in <filename>WbDrivers.xml</filename>)
				as the full path to the driver's jar file(s) is stored in the file (unless you 
				define the location of the drivers using the <link linkend="settings-libdir">libdir variable</link>.
			</para>
		</section>
	</section>


	<section id="displaying-help">
		<title>Displaying help</title>
		<para>
			You have two options to display help for &wb-productname;. Either the built-in help
			file, which is accessible through <menuchoice><guimenu>Help</guimenu><guimenuitem>Contents</guimenuitem></menuchoice>
			or the PDF manual by selecting <menuchoice><guimenu>Help</guimenu><guimenuitem>Manual</guimenuitem></menuchoice>. 
			In order to be able to display the PDF manual, you need to define the path to the executable for the PDF 
			reader in the <link linkend="options-general">General options</link>
			and the file <literal>SQLWorkbench-Manual.pdf</literal> must be available in the 
			directory where <literal>Workbench.jar</literal> is located.
		</para>
	</section>
	
	<section id="install-increase-memory">
		<title>Increasing the memory available to the application</title>
		<para>
			&wb-productname; is a Java application and thus runs inside a
			so-called virtual machine (JVM). The virtual machine limits the memory
			independently from the installed memory that is available to the operating
			system.
		</para>
		<para>
			&wb-productname; reads the data that is returned by a <literal>SELECT</literal>
			statement into the main memory. When retrieving large result sets, you might
			get an error message, indicating that not enough memory is available. In this
			case you need to increase the memory that the JVM requests from the operating
			system (or change your statement to return fewer rows).
		</para>
		<para>
			When you use the Windows&reg; <link linkend="launcher-using">Launcher</link> to start &wb-productname;
			you need to pass the parameter -J-Xmx512m to the executable:
			<programlisting>JWorkbench.exe -J-Xmx512m</programlisting>This example
			will increase the maximum memory to 512MB. The recommended way
			is to create Windows&reg; shortcut (e.g. on the desktop) and add the above parameter
			to the shortcut definition. The launcher sets the available heap size
			for &wb-productname; to 256MB.
		</para>
		<para>
			If you are running &wb-productname; on a non-Windows&reg; operating system or do not
			want to use the launcher, then you need to pass this parameter directly to the JVM
		</para>
		<para><programlisting>java -Xmx512m -jar Workbench.jar</programlisting></para>
		<para>
			The default heap size for your Java environment depends on your operating
			system and your JDK implementation. Most JDKs use a default of 96MB as the
			default maximum heap size.
		</para>
		<note>
			The -Xmx parameter increases the <emphasis role="bold">maximum</emphasis>
			memory to the given value. This does not mean that the application will use
			that much memory
		</note>
	</section>

	<section id="no-ddraw">
		<title>Display Problems, Crashes, Bluescreens when running under Windows&reg;</title>

		<para>If you experience problems when running &wb-productname; (or
		other Java/Swing based applications) on the Windows&reg; platform, this
		might be due to problems with the graphics driver and/or the
		DirectDraw installation. If upgrading the graphics driver or the
		DirectDraw/DirectX version is not an option (or does not solve the
		problem), try to run SQL Workbench with the direct draw feature
		turned off:</para>


		<programlisting>java -Dsun.java2d.noddraw=true -jar Workbench.jar</programlisting>

		<para>When using the exe launcher, you can use the following
		syntax:</para>

		<programlisting>jworkbench -noddraw</programlisting>

		<para>
			If you run &wb-productname; through a program that enables remote 
			access to a Windows&reg; workstations (PC-Duo, VNC, NetMeeting, etc),
			you may need to disable the use of DirectDraw for Java as well.
		</para>

	</section>

	<section id="hi-cpu-usage">
		<title>High CPU usage when executing statements</title>
		<para>If you experience a high CPU usage when running a SQL statement,
			this might be caused by a combination of the graphics driver, the JDK and
			the Windows&reg; version you are using. This is usually caused by the animated
			icon which indicates a running statement (the yellow smiley). This animation can 
			be turned off in <menuchoice><guimenu>Tools</guimenu><guimenuitem>Options</guimenuitem></menuchoice>
			See <xref linkend="option-animated-icon"/> for details. A different
			icon (not animated) will be used if that option is disabled.
		</para>
	</section>

	<section id="launcher-using">
		<title>Using the Windows launcher</title>

		<para>On the Windows&reg; platform the supplied JWorkbench.exe can be used to
		start the program when using a Sun JDK. The native launcher searches for an installed
		JDK (querying the registry) and then starts the &wb-productname;. The file
		workbench.jar has to be located in the same directory as the
		JWorkbench.exe, otherwise it doesn&#39;t work.</para>
		<note>
			The launcher only works with JDK&apos;s from Sun, as it directly calls the
			JDK dll&apos;s to start the virtual machine. If you are using a different JDK,
			you cannot use the launcher to start &wb-productname; (unless it uses the same
			directory layout and filenames as the Sun JDK).
		</note>

		<para>By default the launcher increases the maximum JVM heap size to 128
		MB (the default for JDK 1.4 is 96MB). If you need more heap memory, you
		need to pass the appropriate JVM parameter to the launcher</para>

		<section id="launcher-jdk-search">
			<title>How the Windows launcher searches for a Sun JDK</title>

			<para>First the launcher checks for a system variable <literal>WORKBENCH_JDK</literal>.
			If that is defined, the JDK specified by that directory is used. If
			<literal>WORKBENCH_JDK</literal> is not found, <literal>JAVA_HOME</literal> is used.
			If <literal>JAVA_HOME</literal> is not defined, then the launcher checks if
			a sub-directory JRE exists in the folder where JWorkbench.exe is located. If
			that sub-directory exists, it is assumed that it contains a valid JRE. If the
			sub-directory does not exist, or if it is not a JRE installation, then the registry key
			<literal>HKLM\Software\JavaSoft\Java Runtime Environment</literal> is queried.
			If that is not defined, <literal>HKLM\Software\JavaSoft\Java Development Kit</literal>
			is queried.</para>

			<para>In the registry key, a subkey for the version 1.4 is retrieved, and
			the directory specified by that key is used as the base JDK
			directory.</para>
			<para>If your JDK/JRE installation cannot be found by the launcher, but you do have
			a JDK available, you can specify the location of the JDK with the -jdk parameter</para>
			<para>The launcher assumes the layout of the Sun jdk in the specified directory. If you
			specify <literal>c:\jdk</literal> as the JDK directory, the launcher looks for the file
			<literal>c:\jdk\bin\client\jvm.dll</literal> (the specified directory would actually be a
			JRE then). If that is not found, it looks for <literal>c:\jdk\jre\bin\client\jvm.dll</literal>
			(that would be a &quot;true&quot; JRE installation). If the <literal>-sever</literal> parameter
			is specified, it will look for a sub-directory <literal>server</literal> instead of
			<literal>client</literal>. If your non-Sun JDK/JRE follows the same directory layout
			and filename conventions, you can use the launcher for that JDK as well.</para>
		</section>

		<section id="launcher-parameters">
			<title>Parameters for the Windows launcher</title>

			<para>To distinguish parameters for the launcher and parameters to the
			JVM, JVM parameter need to be prefixed with -J.
			If you want to pass the parameter <literal>-Xmx256m</literal> to the JVM,
			pass the parameter <literal>-J-Xmx256m</literal> to the launcher.
			To define a system property you need to pass the parameter
			<literal>-J-Dproperty.name=property_value</literal>.</para>

			<para>The following parameters are recognized:</para>

			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1" colwidth="3cm" />
					<colspec colname="c2"  />
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>-jdk</entry>
							<entry>Specify the installation directory of the JDK e.g.: -jdk=c:\jdk1.4.1.
								When this parameter is specified the launcher will not look for a JDK
								installation as described <link linkend="launcher-jdk-search">here</link>
							</entry>
						</row>

						<row>
							<entry>-J</entry>
							<entry>Pass a parameter to the JVM e.g: -J-Xms128m</entry>
						</row>

						<row>
							<entry>-server</entry>
							<entry>Select the server JVM (instead of the default client JVM). 
							This switch only works with the Sun JVM.</entry>
						</row>

						<row>
							<entry>-client</entry>
							<entry>Select the client JVM. This switch only works with the Sun JVM.</entry>
						</row>

						<row>
							<entry>-jvmtype</entry>
							<entry>Select the JVM type to be loaded. For the Sun JVM this 
								may be either <literal>client</literal> or <literal>server</literal> (equivalent
								to the -server or -client switches). If the JDK identified with the
								-jdk switch points to BEA's JRockit&tm; JVM, this should be
								<literal>jrockit</literal> (i.e. -jvmtype=jrockit). Basically the value
								of this switch is used to locate the <literal>jvm.dll</literal>
								in the base directory specified with the -jdk switch.
							</entry>
						</row>
            
						<row>
							<entry>-noddraw</entry>
							<entry>Disable the use of DirectDraw routines for the JVM. Use this
								parameter when you are running &wb-productname; through PC-Duo or a similar
								program, or if you are experiencing crashes when starting &wb-productname;
							</entry>
						</row>

						<row>
							<entry>-debug</entry>
							<entry>Write debug information to the file workbench.dbg to identify problems when using the launcher</entry>
						</row>

						<row>
							<entry>-help</entry>
							<entry>Display a message with the list of parameters</entry>
						</row>

						<!--
						<row id="launcher-nolang">
							<entry>-nolang</entry>
							<entry>As &wb-productname; is (currently) only available in english, the launcher
							sets the system property <literal>user.language</literal> to "<literal>en</literal>"
							to get a consistent language when displaying dialogs from the Java 
							runtime environment. If you don't want the launcher to override the system
							property, add the parameter <literal>-nolang</literal> to the shortcut
							starting the Windows launcher. This property might have an impact on 
							certain JDBC drivers. It seems that the new Oracle 10g Release 2 driver
		          does not work properly without passing this parameter.</entry>
						</row>
						-->
						
					</tbody>
				</tgroup>
			</informaltable>

			<para>All other parameters are passed unchanged to the program.
			See <xref linkend="commandline"/> for details.</para>

			<para>The following call to the launcher:</para>

			<programlisting>jworkbench -configdir=c:\MyConf -J-Dsun.java2d.noddraw=true</programlisting>

			<para>is the same as directly starting Workbench.jar with these
			parameters:</para>

			<programlisting>java -Dsun.java2d.noddraw=true -jar Workbench.jar -configdir=c:\MyConf</programlisting>
		</section>
	</section>

	<section id="commandline" xreflabel="command line parameters">
		<title>Command line parameters</title>

		<para>
			Command line parameters are <emphasis role="bold">not</emphasis> case sensitive.
			The parameters <literal>-PROFILE</literal> or <literal>-profile</literal> are
			identical. The usage of the command line parameters is identical between
			the launcher or starting &wb-productname; using the <literal>java</literal> command itself.
		</para>
		
		<section id="cmdline-parameter-configdir">
			<title>Specify the directory for configuration settings</title>

			<para>
				The parameter <literal>-configdir</literal> specifies the directory where
				&wb-productname; will store all its settings.
				If this parameter is not supplied, the directory where the <literal>Workbench.jar</literal>
				is located is used.
			</para>
			
			<programlisting>java -jar Workbench.jar -configdir=$HOME/wbconfig
jworkbench -configdir='c:\Configurations\JWorkbench'</programlisting>

		</section>

		<section id="cmdline-parameter-libdir">
			<title>Specify a base directory for JDBC driver libraries</title>
			<para>
				The <literal>-libdir</literal> parameter defines the base directory for your JDBC drivers. The value of
				this parameter can be referenced when <link linkend="jdbc-lib-dir">defining a driver library</link> 
				using the placholder <literal>%LibDir%</literal>
				The value for this parameter can also be set in the file <link linkend="settings-libdir"><literal>workbench.settings</literal></link>.
			</para>
		</section>
		
		<section id="cmdline-parameter-profilestorage">
			<title>Specify the file containing connection profiles</title>
			<para>
				&wb-productname; stores the connection profiles in a file called <literal>WbProfiles.xml</literal>.
				If you want to use a different filename, or use different set of profiles for different purposes
				you can define the file where the profiles are stored with the <literal>-profilestorage</literal>
				parameter.
			</para>
			
			<para>
				If the value of the parameter does not contain a path, the file will be expected (and stored) in the
				configuration directory.
			</para>
		</section>
		
		<section id="cmdline-vardef">
			<title>Defining variables</title>

			<para>
				With the <literal>-vardef</literal> parameter a definition file for 
				<link linkend="using-variables">internal variables</link> can be specified. 
				Each variable has to be listed on a single line in the format <literal>variable=value</literal>.
				Lines starting with a <literal>#</literal> character are ignored (comments).
			</para>
			<programlisting>#Define some values
var_id=42
person_name=Dent
another_variable=24</programlisting>

			<para>
				You can also define a list of variables with this parameter. In this case, the first
				character after the = sign, has to be # (hash sign) to flag the value as a variable list:
				<programlisting>java -jar Workbench.jar -vardef=#var_id=42,person_name=Dent</programlisting>
			</para>
			
		</section>

		<section id="nosettings-commandline">
			<title>Prevent updating the .settings file</title>
			<para>
				If the <literal>-nosettings</literal> parameter is specified, &wb-productname; will not write 
				its settings to the file <literal>workbench.settings</literal> when it's beeing closed. Note 
				that in <link linkend="using-scripting">batch mode</link>, this file is never written.
			</para>
			<note>
				Note that if this parameter supplied, the workspace will not be saved automatically as well!
			</note>
		</section>

		<section id="commandline-connect-profile">
			<title>Connect using a pre-defined connection profile</title>
			<para>
				You can specify the name of an already created <link linkend="profiles">connection
				profile</link> on the commandline with the <literal>-profile=&#60;profile name&#62;</literal>
				parameter. The name has to be passed exactly like it appears in the profile dialog
				(case sensitiv!). If the name contains spaces or dashes, it has to be enclosed in
				quotations marks. If you have more than one profile with the same name but in different
				profile groups, you have to specify the desired profile group using the <literal>-profilegroup</literal>
				parameter, otherwise the first profile matching the passed name will be selected.
			</para>
			
			<para>Example (on one line):</para>

			<programlisting>java -jar Workbench.jar 
     -profile='Oracle - Test' 
     -script='test.sql'</programlisting>
			<para>
				In this case the file <literal>WbProfiles.xml</literal> must be in the current
				(working) directory of the application. If this is not the case, please specify the 
				location of the profile using either the <link linkend="cmdline-parameter-profilestorage"><literal>-profilestorage</literal></link> or 
				<link linkend="cmdline-parameter-configdir"><literal>-configdir</literal></link> parameter.
			</para>
			<para>
				If you have two profiles with the names <literal>&quot;Oracle - Test&quot;</literal> you will 
				need to specify the profile group as well (in one line):
			</para>
			<programlisting>java -jar Workbench.jar 
     -profile='Oracle - Test' 
     -profilegroup='Local' 
     -script='test.sql'</programlisting>
		</section>
		
		<section id="commandline-connect-noprofile">
			<title>Connect without a profile</title>
			<para>
				You can also specify the full connection parameters on the commandline, if
				you don&apos;t want to create a profile only for executing a batch file.
				The advantage of this method is, that &wb-productname; does not need the files
				<filename>WbProfiles.xml</filename>, <filename>WbDrivers.xml</filename> to be
				able to connect to the database.
			</para>

			<para>The connection can be specified with the following parameters:</para>

			<informaltable frame="all">
				<tgroup cols="2">
					<colspec colname="c1" colwidth="3.5cm" />
					<colspec colname="c2" />
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>

					<tbody valign="top">
						<row>
							<entry>-url</entry>
							<entry>The JDBC connection URL</entry>
						</row>

						<row>
							<entry>-username</entry>
							<entry>Specify the username for the DBMS</entry>
						</row>

						<row>
							<entry>-password</entry>
							<entry>Specify the password for the user</entry>
						</row>

						<row>
							<entry>-driver</entry>
							<entry>Specify the full class name of the JDBC driver</entry>
						</row>

						<row>
							<entry>-driverjar</entry>
							<entry>Specify the full pathname to the .jar file containing the JDBC driver</entry>
						</row>

						<row>
							<entry>-autocommit</entry>
							<entry>Set the autocommit property for this connection. You can also 
							control the autocommit mode from within your script by using the 
							<link linkend="command-set-autocommit"><literal>SET AUTOCOMMIT</literal></link> command.
							</entry>
						</row>
						
						<row>
							<entry>-rollbackOnDisconnect</entry>
							<entry>If this parameter is set to true, a <literal>ROLLBACK</literal> will 
							be sent to the DBMS before the connection is closed. This setting is 
							also available in the <link linkend="profile-rollback-before-disconnect">connection profile</link>.
							</entry>
						</row>
						
						<row>
							<entry>-workspace</entry>
							<entry>The workspace file to be loaded. If the file specification does not 
							include a directory, the workspace will be loaded from the 
							<link linkend="cmdline-parameter-configdir">configuration directory</link>. If this parameter
							is not specified, the default workspace (<literal>Default.wksp</literal>) will be loaded.
							</entry>
						</row>
						
						<row>
							<entry>-altDelim</entry>
							<entry>
								The <link linkend="">alternate delimiter</link> to be used for this connection. 
								To define a single line delimiter append the characters ;nl to the parameter value:
								e.g. <literal>-altDelimiter=GO;nl</literal> to define a SQL Server like GO as the 
								alternate delimiter. Note that when running in batchmode you can override 
								the delimiter completely by specifying the <literal>-delimiter</literal>
								switch. 
							</entry>
						</row>
						
					</tbody>
				</tgroup>

			</informaltable>

			<para>
				If a value for one of the parameters contains a dash or a space, you will 
				need to quote the parameter value.
			</para>

			<para>
				A disadvantage of this method is, that the password is displayed in plain text
				on the command line. If this is used in a batch file, the password will be stored
				in plain text in the batch file. If you don't want to expose the password,
				you can use a connection profile and <link linkend="options-encrypt-password">enable password encryption</link>
				for connection profiles.
			</para>

		</section>
			
		</section>
    
</section>