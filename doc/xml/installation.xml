<section id="install">
  <title>Installing and starting &wb-productname;</title>

  <section id="install-prereq">
    <title>Pre-requisites</title>

    <para>
      To run &wb-productname; a <ulink url="http://www.java.com/">Java 7 runtime environment</ulink>
      or higher is required. You can either use a JRE ("Runtime") or a JDK ("Development Kit") to run &wb-productname;.
    </para>
    <para>
      A Java 6 runtime will work as well, but because Java 6 is no longer supported it is not recommended to use it.
    </para>

    <para>
      &wb-productname; does not need a "fully installed" runtime environment, you can also copy
      the <literal>jre</literal> directory from an existing Java installation or use the no-installer
      packages from the Oracle homepage
    </para>

    <para>
      The "local" Java installation in the <literal>jre</literal> subdirectory will <emphasis role="bold">not</emphasis>
      be used by the Windows&reg; launcher if a Java runtime has been installed and <emphasis>is registered</emphasis>
      in the system (i.e. the Windows&reg; registry)
    </para>

    <para>
      If you cannot (or do not want to) do a regular installation of a Java 7 runtime, you can download
      a ZIP distribution from <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle's homepage</ulink>
      Under <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html">"JRE Download"</ulink>
      you can download <literal>tar.gz</literal> archives for Windows&reg; and Linux (32bit and 64bit versions are available).
    </para>
    <para>
      The archive just needs to be unpacked. Inside the archive the actual JRE is stored in a directory named e.g.
      <literal>jre1.7.0_xx</literal> where <literal>xx</literal> is the build number of the Java runtime.
      When moving this directory to the installation directory of &wb-productname; you have to rename it to <literal>jre</literal>
      in order for the Windows&reg; launcher or the batch files to recognize it.
    </para>

  </section>

  <section id="first-time-install">
    <title>First time installation</title>

    <para>
      Once you have downloaded the application's distribution package, unzip the archive into a directory
      of your choice. Apart from that, no special installation procedure is needed.
    </para>

    <para>
      You will need to configure the necessary JDBC driver(s) for your database before you
      can connect to a database. Please refer to the chapter <link linkend="jdbc-setup">JDBC Drivers</link>
      for details on how to make the JDBC driver available to &wb-productname;
    </para>

    <para>
      When starting &wb-productname; for the first time, it will create a directory
      called <literal>.sqlworkbench</literal> in the current user's home folder to
      store all its configuration information.
    </para>

    <para>
      The "user's home directory" is <literal>$HOME</literal> on a Linux or Unix based system,
      and <literal>%HOMEPATH%</literal> on a Windows&reg; system. (Technically speaking
      it is using the contents of Java system property <literal>user.home</literal> to
      find the user's home directory)
    </para>

  </section>

  <section id="upgrade-install">
    <title>Upgrade installation</title>
    <para>
      When upgrading to a newer version of &wb-productname; simply overwrite the old
      <literal>sqlworkbench.jar</literal>, the <literal>exe</literal> files and shell scripts that
      start the application. If you are using the bundle that includes the libraries for
      reading and writing OpenOffice and Microsoft Office files, replace all existing <literal>jar</literal> files
      with those from the distribution archive as well.
    </para>
  </section>

  <section id="starting">
    <title>Starting the program from the commandline</title>

    <para>
      sqlworkbench.jar is a self executing JAR file. This means, that if
      your Java runtime is installed and registered with the system, a double click
      on <literal>sqlworkbench.jar</literal> will execute the application. To run the application
      manually use the command:
    </para>

    <programlisting>java -jar sqlworkbench.jar</programlisting>

    <para>
      Native executables for Windows&reg; and Mac OSX are supplied that start &wb-productname; by
      using the default Java runtime installed on your system. Details on using
      the <link linkend="launcher-using">Windows&reg; launcher</link> can be found
      <link linkend="launcher-using">here</link>.
    </para>

  </section>

  <section id="shell-using">
    <title>Starting the program using the shell script</title>
    <para>
      To run &wb-productname; under an Unix-type operating system, the supplied shell script
      <literal>sqlworkbench.sh</literal> can be used. For Linux desktops a sample ".desktop"
      file is available.
    </para>

    <section id="jdk-shell">
      <title>Specifying the Java runtime for the shell script</title>

      <para>
        The shell scripts (and the batch files) first check if a Java runtime is available in the sub-directory <literal>jre</literal>.
        If that is available it will be used.
      </para>
      <para>
        If no "local" Java runtime is found, the environment variable <literal>WORKBENCH_JDK</literal>
        is checked. If that variable is defined and points to a Java runtime installation, the shell script will
        use <literal>$WORKBENCH_JDK/bin/java</literal> to run the application.
      </para>
      <para>
        If <literal>WORKBENCH_JDK</literal> is not defined, the shell script will check
        for the environment variable <literal>JAVA_HOME</literal>. If that is defined, the script
        will use <literal>$JAVA_HOME/bin/java</literal> to run the application.
      </para>
      <para>
        If neither <literal>WORKBENCH_JDK</literal> nor <literal>JAVA_HOME</literal> is defined,
        the shell script will simply use <literal>java</literal> to start the application,
        assuming that a valid Java runtime is available on the path.
      </para>
      <para>
        All parameters that are passed to the shell scripts are passed to the application, not to the
        Java runtime. If you want to change the memory or other system settings for the JVM, you need to
        edit the shell script.
      </para>
    </section>

  </section>

  <section id="launcher-using">
    <title>Starting the program using the Windows&reg; launcher</title>
    <indexterm><primary>Windows</primary><secondary>using the launcher</secondary></indexterm>
    <indexterm><primary>Windows</primary><secondary>Java not found</secondary></indexterm>
    <indexterm><primary>Starting</primary><secondary>Java runtime not found on Windows</secondary></indexterm>
    <indexterm><primary>Java runtime</primary><secondary>Java not found on Windows</secondary></indexterm>

    <para>
      To start &wb-productname; on the Windows&reg; platform, the supplied <literal>SQLWorkbench.exe</literal> (32bit Windows)
      or <literal>SQLWorkbench64.exe</literal> (64bit Windows) can be used to start the program when using an installed
      Oracle Java runtime. The file <literal>sqlworkbench.jar</literal> has to be located in the same directory as the
      exe files, otherwise it does not work.
    </para>

    <para>
      &wb-productname; does not need a "fully installed" runtime environment, you can also copy
      the <literal>jre</literal> directory from an existing Java installation.
      Note that the "local" Java installation in the <literal>jre</literal> subdirectory will not be used by the Windows&reg; launcher
      if a Java runtime has been installed and registered in the system.
    </para>

    <para>
      If you cannot (or don't want to) do a regular installation of a Java 7 runtime, you can download
      a ZIP distribution for Windows&reg; from Oracle's homepage: <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html"/>.
      Under <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/jre7-downloads-1880261.html">"JRE Download"</ulink> there is also
      an option to download a no-installer version. These downloads are offered as <literal>tar.gz</literal> archives and they only need to
      be unpacked with a packer being able to handle the Unix <literal>tar</literal> format (e.g. 7-Zip or TotalCommander).
    </para>

    <para>
      By default memory available to &wb-productname; is determined by the Java runtime.
      If you need more heap memory (e.g. because you have to load large result sets), you need to pass the appropriate JVM parameter to the launcher.
      Please refer to <link linkend="install-increase-memory">Increasing the memory</link> for details
      on how to increase the memory that is available to &wb-productname;
    </para>

    <section id="launcher-parameters">
      <title>Parameters for the Windows&reg; launcher</title>

      <para>
        The launcher executables are based on <ulink url="http://winrun4j.sourceforge.net/">WinRun4J</ulink>, further documentation on
        the format of the configuration file and parameters can also be found there.
      </para>
      <para>
        If the launcher cannot find your installed Java runtime, you can specify the location of the JRE by creating a text file
        named <literal>SQLWorkbench.ini</literal> (or <literal>SQLWorkbench64.ini</literal> when using the 64bit version) with the following content:
      </para>
      <programlisting>vm.location=c:\Program Files\Java\jdk16\jre\bin\client\jvm.dll</programlisting>
      <para>
        Note that you need to specify the full path to the <literal>jvm.dll</literal>, not the directory where the Java runtime is installed.
      </para>
    </section>
  </section>


  <section id="config-dir" xreflabel="Configuration files">
    <title>Configuration directory</title>

    <para>
      The configuration directory is the directory where all config (<literal>workbench.settings</literal>,
      <literal>WbProfiles.xml</literal>, <literal>WbDrivers.xml</literal>) files are stored.
    </para>

    <para>
      If no configuration directory has been specified on the commandline,
      &wb-productname; will identify the configuration directory by looking at the following places
      <orderedlist>
        <listitem><simpara>The current directory</simpara></listitem>
        <listitem><simpara>The directory where <literal>sqlworkbench.jar</literal> is located</simpara></listitem>
        <listitem>
          <simpara>
            In the user's home direcotry
            (e.g. <literal>$HOME/.sqlworkbench</literal> on Unix based systems
            or <literal>%HOMEPATH%\.sqlworkbench</literal> on Windows&reg; systems)
          </simpara></listitem>
      </orderedlist>
      If the file <literal>workbench.settings</literal> is found in one of those directories, that
      directory is considered the configuration directory.
    </para>
    <para>
      If no configuration directory can be identified, it will be created in the user's home directory (as <literal>.sqlworkbench</literal>).
    </para>
    <para>
      The above mentioned search can be overridden by supplying the configuration directory
      <link linkend="cmdline-parameter-configdir">on the commandline</link> when starting the application.
    </para>

    <para>The following files are stored in the configuration directory:
      <itemizedlist>
        <listitem><simpara>General configuration settings (<filename>workbench.settings</filename>)</simpara></listitem>
        <listitem><simpara>Connection profiles (<filename>WbProfiles.xml</filename>)</simpara></listitem>
        <listitem><simpara>JDBC Driver definitions (<filename>WbDrivers.xml</filename>)</simpara></listitem>
        <listitem><simpara>Customized shortcut definitions (<filename>WbShortcuts.xml</filename>).
          If you did not customize any of the shortcuts, this file does not exist</simpara>
        </listitem>
        <listitem><simpara>Macro definitions (<filename>WbMacros.xml</filename>)</simpara></listitem>
        <listitem><simpara><link linkend="dbexp-options-remember-col-order">Saved column orders</link> from the DbExplorer(<filename>WbColumnOrder.xml</filename>)</simpara></listitem>
        <listitem><simpara>Log file (<filename>workbench.log</filename>)</simpara></listitem>
        <listitem><simpara>Workspace files (<filename>*.wksp</filename>)</simpara></listitem>
      </itemizedlist>
    </para>

    <para>
      If you want to use a different file for the connection profile than WbProfiles.xml then you can specify the
      location of the profiles with the <literal>-profilestorage</literal> parameter on the commandline.
      Thus you can create different shortcuts on your desktop pointing to different sets of profiles.
      The different shortcuts can still use the same main configuration file.
    </para>

    <section id="move-installation">
      <title>Copying an installation</title>

      <para>
        To copy an installation to a different computer, simply copy all the above
        files to the other computer (the log file does not need to be copied).
        When a profile is connected to a workspace, the workspace file should be specified
        without a directory name (or using the <literal>%ConfigDir%</literal> placeholder).
        In that case it is always loaded from the configuration directory.
        If the workspace file location is given with an absolute directory, this needs to be adjusted
        after the copying the files.
      </para>

      <para>
        You will need to edit the driver definitions (stored in <filename>WbDrivers.xml</filename>)
        as the full path to the driver's jar file(s) is stored in the file (unless you
        define the location of the drivers using the <link linkend="settings-libdir">libdir variable</link>.
      </para>

    </section>

  </section>

  <section id="install-increase-memory">
    <title>Increasing the memory available to the application</title>
    <para>
      &wb-productname; is a Java application and thus runs inside a virtual machine (JVM).
      The virtual machine limits the memory of the application independently from the installed
      memory that is available to the operating system.
    </para>
    <para>
      &wb-productname; reads the data that is returned by a <literal>SELECT</literal>
      statement into the main memory. When retrieving large result sets, you might
      get an error message, indicating that not enough memory is available. In this
      case you need to increase the memory that the JVM requests from the operating
      system (or change your statement to return fewer rows).
    </para>

    <para>
      To increase the memory that is available to the application, you can pass the parameter <literal>-Xmx</literal>
      to the Windows&reg; launcher, specifying the maximum memory the application should use. To increase the memory
      to 1GB, you can use: <literal>-Xmx1024m</literal>. This can e.g. be added to the shortcut you use to
      start &wb-productname;
    </para>

    <para>
      As an alternative you can create a configuration file named <literal>SQLWorkbench.ini</literal> (or <literal>SQLWorkbench64.ini</literal>
      when using the 64bit launcher) with the following content:
      <programlisting>vm.heapsize.preferred=1024</programlisting>
      This will increase the memory for the application to 512MB. For more options to configure the JVM, please refer to the
      documentation of <ulink url="http://winrun4j.sourceforge.net/">WinRun4J</ulink>.
      The configuration file has to be located in the same directory where the <literal>.exe</literal> is located.
    </para>

    <para>
      If you are running &wb-productname; on a non-Windows&reg; operating system or do not
      want to use the launcher, then you need to pass this parameter directly to the JVM
    </para>
    <para><programlisting>java -Xmx512m -jar sqlworkbench.jar</programlisting></para>

    <para>
      If you are using the supplied shell scripts to start &wb-productname;, you can
      edit the scripts and change the value for the -Xmx parameter in there.
    </para>

  </section>

  <section id="commandline" xreflabel="command line parameters">
    <title>Command line parameters</title>
    <indexterm><primary>Command line</primary><secondary>parameters</secondary></indexterm>

    <para>
      Command line parameters are <emphasis role="bold">not</emphasis> case sensitive.
      The parameters <literal>-PROFILE</literal> or <literal>-profile</literal> are
      identical. The usage of the command line parameters is identical between
      the launcher or starting &wb-productname; using the <literal>java</literal> command itself.
    </para>

    <note>
      <para>
        When quoting parameters on the commandline (especially in a Windows&reg; environment) you have
        to use single quotes, as the double quotes won't be passed to the application.
      </para>
    </note>

    <section id="cmdline-parameter-configdir">
      <title>Specify the directory for configuration settings</title>

      <para>
        The parameter <literal>-configDir</literal> specifies the directory where
        &wb-productname; will store all its settings. If this parameter is not supplied,
        the directory where the <link linkend="config-dir">default location</link> is used.
        The placeholder <literal>${user.home}</literal> will be
        replaced with the current user's home directory (as returned by the Operating System).
        If the specified directory does not exist, it will be created.
      </para>

      <?dbfo-need height="2cm" ?>
      <para>
        If you want to control the location where &wb-productname; stores the configuration
        files, you have to start the application with the parameter -configDir to specify an
        alternate directory:<programlisting>java -jar sqlworkbench.jar -configDir=/export/configs/SQLWorkbench</programlisting>
      </para>

      <?dbfo-need height="2cm" ?>
      <para>
        or if you are using the Windows&reg; launcher:<programlisting>SQLWorkbench -configDir=c:\ConfigData\SQLWorkbench</programlisting>
        The placeholder <literal>${user.home}</literal> will be replaced with the current user's home directory
        (as returned by the Operating System), e.g.:<programlisting>java -jar sqlworkbench.jar -configDir=${user.home}/.sqlworkbench</programlisting>
        If the specified directory does not exist, it will be created.
      </para>

      <para>
        On the Windows&reg; platform you can use a forward slash to separate directory names in the parameter.
      </para>
    </section>

    <section id="cmdline-parameter-libdir">
      <title>Specify a base directory for JDBC driver libraries</title>
      <para>
        The <literal>-libdir</literal> parameter defines the base directory for your JDBC drivers. The value of
        this parameter can be referenced when <link linkend="jdbc-lib-dir">defining a driver library</link>
        using the placholder <literal>%LibDir%</literal>
        The value for this parameter can also be set in the file <link linkend="settings-libdir"><literal>workbench.settings</literal></link>.
      </para>
    </section>

    <section id="cmdline-parameter-profilestorage">
      <title>Specify the file containing connection profiles</title>
      <para>
        &wb-productname; stores the connection profiles in a file called <literal>WbProfiles.xml</literal>.
        If you want to use a different filename, or use different set of profiles for different purposes
        you can define the file where the profiles are stored with the <literal>-profilestorage</literal>
        parameter.
      </para>

      <para>
        If the value of the parameter does not contain a path, the file will be expected (and stored) in the
        configuration directory.
      </para>
    </section>

    <section id="cmdline-vardef">
      <indexterm><primary>Variables</primary><secondary>define on commandline</secondary></indexterm>

      <title>Defining variables</title>

      <para>
        With the <literal>-vardef</literal> parameter a definition file for
        <link linkend="using-variables">internal variables</link> can be specified.
        Each variable has to be listed on a single line in the format <literal>variable=value</literal>.
        Lines starting with a <literal>#</literal> character are ignored (comments).
        the file can contain unicode sequences (e.g. <literal>\u00fc</literal>. Values
        spanning multiple lines are not supported. When reading a file during startup
        the default encoding is used. If you need to read the file in a specific encoding
        please use the <link linkend="command-vardef"><literal>WbVarDef</literal></link>
        command with the <literal>-file</literal> and <literal>-encoding</literal> parameter.
      </para>
      <programlisting>#Define some values
var_id=42
person_name=Dent
another_variable=24</programlisting>

      <para>
        If the above file was saved under the name <literal>vars.txt</literal>, you can use those
        variables by starting &wb-productname; using the following commandline:
      </para>
      <programlisting>java -jar sqlworkbench.jar -vardef=vars.txt</programlisting>

      <para>
        You can also define a list of variables with this parameter. In this case, the first
        character after the = sign, has to be # (hash sign) to flag the value as a variable list:
        <programlisting>java -jar sqlworkbench.jar -vardef=#var_id=42,person_name=Dent</programlisting>
        The <literal>-vardef</literal> parameter can be used multiple times on the commandline.
      </para>

      <para>
        Defining variable values in this way can also be used when running in
        <link linkend="using-scripting">batch mode</link>.
      </para>


    </section>

    <section id="nosettings-commandline">
      <title>Prevent updating the .settings file</title>
      <para>
        If the <literal>-nosettings</literal> parameter is specified, &wb-productname; will not write
        its settings to the file <literal>workbench.settings</literal> when it's beeing closed. Note
        that in <link linkend="using-scripting">batch mode</link>, this file is never written.
      </para>
      <note><para>
        If this parameter is supplied, the workspace will not be saved automatically as well!
      </para></note>
    </section>

    <section id="commandline-connect-profile">
      <title>Connect using a pre-defined connection profile</title>
      <indexterm><primary>Command line</primary><secondary>connection profile</secondary></indexterm>

      <para>
        You can specify the name of an already created <link linkend="profiles">connection
        profile</link> on the commandline with the <literal>-profile=&#60;profile name&#62;</literal>
        parameter. The name has to be passed exactly like it appears in the profile dialog
        (case sensitiv!). If the name contains spaces or dashes, it has to be enclosed in
        quotations marks. If you have more than one profile with the same name but in different
        profile groups, you have to specify the desired profile group using the <literal>-profilegroup</literal>
        parameter, otherwise the first profile matching the passed name will be selected.
      </para>

      <para>Example (on one line):</para>

      <programlisting>java -jar sqlworkbench.jar
     -profile='PostgreSQL - Test'
     -script='test.sql'</programlisting>
      <para>
        In this case the file <literal>WbProfiles.xml</literal> must be in the current
        (working) directory of the application. If this is not the case, please specify the
        location of the profile using either the <link linkend="cmdline-parameter-profilestorage"><literal>-profilestorage</literal></link> or
        <link linkend="cmdline-parameter-configdir"><literal>-configDir</literal></link> parameter.
      </para>
      <para>
        If you have two profiles with the names <literal>&quot;Oracle - Test&quot;</literal> you will
        need to specify the profile group as well (in one line):
      </para>
      <programlisting>java -jar sqlworkbench.jar
     -profile='PostgreSQL - Test'
     -profilegroup='Local'
     -script='test.sql'</programlisting>
    </section>

    <section id="commandline-connect-noprofile">
      <title>Connect without a profile</title>
      <indexterm><primary>Command line</primary><secondary>JDBC connection</secondary></indexterm>

      <para>
        You can also specify the full connection parameters on the commandline, if
        you don&apos;t want to create a profile only for executing a batch file.
        The advantage of this method is, that &wb-productname; does not need the files
        <filename>WbProfiles.xml</filename>, <filename>WbDrivers.xml</filename> to be
        able to connect to the database.
      </para>

      <para>The connection can be specified with the following parameters:</para>

      <informaltable frame="all">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="3.5cm" />
          <colspec colname="c2" />
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody valign="top">

            &common-connect-args;

            <row>
              <entry>-emptyStringIsNull</entry>
              <entry>This parameter corresponds to the
              <link linkend="profile-empty-string-is-null">Empty String is NULL</link>
              setting of the connection profile. This will only be needed when editing a result set in GUI mode.
              </entry>
            </row>

            <row>
              <entry>-connectionProperties</entry>
              <entry>
                <para>
                  This parameter can be used to pass <link linkend="profile-extended-properties">extended connection properties</link> if
                  the driver does not support them e.g. in the JDBC URL. The values are passed as key=value pairs,
                  e.g. <literal>-connectionProperties=someProp=42</literal>
                </para>
                <para>
                  If either a comma or an equal sign occurs in a parameter's value, it must be quoted.
                  This means, when passing multiple properties the whole expression needs to be quoted:
                  <literal>-connectionProperties='someProp=42,otherProp=24'</literal>.
                </para>
                <para>
                  As an alternative, a colon can be used instead of the equals sign,
                  e.g <literal>-connectionProperties=someProp:42,otherProp:24</literal>. In this
                  case no quoting is needed (because no delimiter is part of the parameters value).
                </para>
                <para>
                  If any of the property values contain a comma or an equal sign, then the whole parameter value needs to be quoted again, even
                  when using a colon.
                  <literal>-connectionProperties='someProp:"answer=42",otherProp:"2,4"'</literal> will define the value <literal>answer=42</literal> for the
                  property <literal>someProp</literal> and the value 2,4 for the property <literal>otherProp</literal>.
                 </para>
              </entry>
            </row>

            <row>
              <entry>-altDelim</entry>
              <entry>
                The <link linkend="understand-alternate-delim">alternate delimiter</link> to be used for this connection.
                To define a single line delimiter append the characters :nl to the parameter value:
                e.g. <literal>-altDelimiter=GO:nl</literal> to define a SQL Server like GO as the
                alternate delimiter. Note that when running in batchmode you can also override
                the default delimiter by specifying the
                <link linkend="scripting-delimiter"><literal>-delimiter</literal></link> parameter.
              </entry>
            </row>

            <row>
              <entry>-separateConnection</entry>
              <entry>If this parameter is set to true, and &wb-productname; is run in GUI mode,
              each SQL tab will use it's own connection to the database server. This setting is
              also available in the <link linkend="profile-separate-connection">connection profile</link>.
              The default is <literal>true</literal>.
              </entry>
            </row>

            <row>
              <entry>-connectionName</entry>
              <entry>
                When specifying a connection without a profile (only using <literal>-username</literal>, <literal>-password</literal>
                and so on) then the name of the connection can be defined using this parameter. The connection name
                will be shown in the title of the main window if &wb-productname; is started in GUI mode.
                The parameter does not have any visible effect when running in batch or console mode.
              </entry>
            </row>
            <row>
              <entry>-workspace</entry>
              <entry>The workspace file to be loaded. If the file specification does not
              include a directory, the workspace will be loaded from the
              <link linkend="cmdline-parameter-configdir">configuration directory</link>. If this parameter
              is not specified, the default workspace (<literal>Default.wksp</literal>) will be loaded.
              </entry>
            </row>

            <row>
              <entry>-readOnly</entry>
              <entry>
                Puts the connection into <link linkend="profile-readonly">read-only mode</link>.
              </entry>
            </row>

          </tbody>
        </tgroup>

      </informaltable>

      <para>
        If a value for one of the parameters contains a dash or a space, you will
        need to quote the parameter value.
      </para>

      <para>
        A disadvantage of this method is, that the password is displayed in plain text
        on the command line. If this is used in a batch file, the password will be stored
        in plain text in the batch file. If you don't want to expose the password,
        you can use a connection profile and <link linkend="options-encrypt-password">enable password encryption</link>
        for connection profiles.
      </para>

    </section>

    </section>

</section>