<section id="using-variables" xreflabel="Variable substitution">
    <indexterm><primary>Variables</primary><secondary>definition</secondary></indexterm>
    <title>Variable substitution in SQL statements</title>

    <section id="define-variable">
      <title>Defining variables</title>

      <para>
        You can define variables within &wb-productname; that can be referenced in your
				SQL statements. This is done through the internal command <literal>WbVarDef</literal>.
      </para>
      <para>
				<literal>WbVarDef myvar=42</literal> defines a variable with the name <literal>myvar</literal> and the value
        <literal>42</literal>. If the variable does not exist, it will be created. If it exists
        its value will be overwriliteralen with the new value. To remove a variable simply set its value
        to nothing: <literal>WbVarDef myvar=</literal>. Alternatevily you can use the command
        <literal>WbVarDelete myvar</literal> to remove a variable definition.
      </para>

			<para>
				Variables are case sensitive: <literal>WbVarDef foo=bar</literal> is different to <literal>WbVarDef FOO=bar</literal>.
			</para>

      <para>
        Variable substitution is also done within <link linkend="macros">Macros</link>. If your macro definition
        contains a reference to a &wb-productname; variable, this will be treated the same way as in regular
        statements.
      </para>

      <para>
        The definition of variables can also be read from a properties file. This can be done by specifying
        <literal>-file=filename</literal> for the <literal>WbVarDef</literal> command,
        or by passing the <literal>-vardef</literal> parameter when starting &wb-productname;.
        Please see the description for the <link linkend="cmdline-vardef">command line parameters</link>
        for details.
      </para>

      <programlisting>WbVarDef -file=/temp/myvars.def</programlisting>

      <para>
        This file has to be a standard Java "properties" file. Each variable
        is listed on a single line in the format <literal>variable=value</literal>.
        Lines starting with a <literal>#</literal> character are ignored (comments). Assuming
        the file <literal>myvars.def</literal> had the following content:
			</para>

<programlisting>#Define the ID that we need later
var_id=42
person_name=Dent
another_variable=24</programlisting>

    <para>After executing
      <literal>WbVarDef -file=/temp/myvars.def</literal> there would be
      three variables available in the system:
      <literal>var_id, person_name, another_variable</literal>, that
			could be used e.g. in a SELECT query:
    </para>
    <programlisting>SELECT * FROM person where name='$[person_name]' or id=$[var_id];</programlisting>
    <para>
      &wb-productname; would expand the variables and send the following statement to the server:
    </para>
		<programlisting>SELECT * FROM person where name='Dent' or id=42;</programlisting>

  </section>

  <section id="vardef-select">
    <title>Populate a variable from a SELECT statement</title>
    <para>
      A variable can also be defined as the result of a <literal>SELECT</literal> statement. This indicated
      by using @ as the first character after the equal sign. The <literal>SELECT</literal> needs
      to be enclosed in double quotes, if you are using single quotes e.g. in the where clause:
    </para>
    <programlisting>WbVarDef myvar=@"SELECT id FROM person WHERE name='Dent'"</programlisting>
    <para>
      If the <literal>SELECT</literal> returns more than one column, multiple variables can be defined
      by specifying a comma separated list of variable names. The following statement will define the
      variables <literal>id</literal> and <literal>name</literal> based on the values returned from the <literal>SELECT</literal>
      statement:
    </para>
    <programlisting>WbVarDef id,name=@"SELECT id,firstname FROM person WHERE lastname='Dent'"</programlisting>
    <para>
      When executing the statement, &wb-productname; only retrieves the first row of
      the result set. Subsequent rows are ignored. If the select returns more columns than
      variable names, the additional values are ignored. If more variables are listed
      than columns are present in the result set, the additional variables will be undefined.
    </para>
  </section>

  <section id="vardef-read-content">
    <title>Populate a variable from a file</title>
    <para>
      A variable can also be defined by reading the content of a file (this is different from
      reading the variable definition from a file).
    </para>
    <programlisting>WbVarDef -variable=somevar -contentFile=/temp/mydata.txt</programlisting>
    <para>
      When executing the statement, &wb-productname; will read the content of the file <literal>mydata.txt</literal>
      and use that as the value for the variable <literal>somevar</literal>.
    </para>

    <para>
      If the file contents contains references to variables, these are replaced after the content as been loaded.
      To disable replacement, use the parameter <literal>-replaceVars=false</literal>.
    </para>

    <para>
      Consider the following sequence of statements, where the file <literal>select.txt</literal>
      contains the statement <literal>SELECT * FROM person WHERE id = $[person_id]</literal>
    </para>
    <programlisting>
WbVarDef person_id=42;
WbVarDef -variable=my_select -contentFile=select.txt;
$[my_select];</programlisting>
    <para>
      After running the above script, the variable <literal>my_select</literal>, will have the value of <literal>SELECT * FROM person WHERE id = 42</literal>.
      When "running" <literal>$[my_select]</literal>, the row with id=42 will be retrieved.
    </para>
  </section>

  <section id="edit-variable">
    <title>Editing variables</title>
    <para>
      To view a list of currently defined variables execute the command <literal>WbVarList</literal>.
      This will display a list of currently defined variables and their values. You can edit
      the resulting list similar to editing the result of a <literal>SELECT</literal> statement.
      You can add new variables by adding a row to the result, remove existing variables by deleting
      rows from the result, or edit the value of a variable.
      If you change the name of a variable, this is the same as removing the old, and
      creating a new one.
    </para>
  </section>

  <section id="access-variable">
    <title>Using variables in SQL statements</title>
    <para>
      The defined variables can be used by enclosing them in special characters inside the SQL
      statement. The default is set to $[ and ] thus you  can use a variable this way:
    </para>
    <programlisting>SELECT firstname, lastname FROM person WHERE id=$[id_variable];</programlisting>
    <para>
      If you have a variable with the name <literal>id_variable</literal> defined, the sequence
      <literal>$[id_variable]</literal> will be replaced with the current value of the
      variable.
     </para>
    <para>
      Variables will be replaced <emphasis>after</emphasis> replacing
      macro <link linkend="macro-parameters">parameters</link>.
    </para>
     <para>
      If the SQL statement requires quotes for the SQL literal, you can either put
      the quotes into the value of the variable (e.g. <literal>WbVarDef name="'Arthur'"</literal>)
      or you put the quotes around the variable's placeholder, e.g.: <literal>WHERE name='$[name]';</literal>
    </para>

    <para>As you can see the variable substitution is also done inside quoted literals.</para>

    <para>
      If you are using values in your regualar statements that actually need the prefix (<literal>$[</literal> or
      suffix (<literal>]</literal>) characters, please make sure that you have no variables defined.
      Otherwise you will unpredictable results. If you want to use variables but need to use
      the default prefix for marking variables in your statements, you can configure a different
      prefix and suffix for flagging variables. To change the the prefix e.g. to <literal>%#</literal> and
      the suffix (i.e end of the variable name) to <literal>#</literal>, add the following lines to
      your <literal>workbench.seliteralings</literal> file:
    </para>
    <programlisting>workbench.sql.parameter.prefix=%#
workbench.sql.parameter.suffix=#</programlisting>
    <para>
      You may leave the suffix empty, but the prefix definition may not be empty.
    </para>

  </section>

  <section id="prompt-variable">
    <title>Prompting for values during execution</title>

    <para>
      You can also use variables in a way that &wb-productname; will prompt you
      during execution of a SQL statement that contains a variable.
    </para>

    <para>
      If you want to be prompted for a value, simply reference the value with a quotation mark
      in front of its name:
    </para>

    <programlisting>SELECT id FROM person WHERE name like '$[?search_name]%'</programlisting>

    <para>
      If you execute this statement, &wb-productname; will prompt you for the value
      of the variable <literal>search_name</literal>. If the variable is already defined
      you will see the current value of the variable. If the variable is not yet defined
      it will be implicitely defined with an empty value.
    </para>

    <para>
      If you use a variable more then once in your statement it is sufficient to
      define it once as a prompt variable. Prompting for a variable value is especially
      useful inside a macro definition.
    </para>

    <para>
      You can also define a conditional prompt with using an ampersand instead of
      a quotation mark. In this case you will only be prompted if no value is assigned
      for the variable:
    </para>

    <programlisting>SELECT id FROM person WHERE name like '$[&amp;search_name]%'</programlisting>

    <para>
      The first time you execute this statement (and no value has been assigned to <literal>search_name</literal>
      before using <literal>WBVARDEF</literal> or on the commandline) you will be prompted for a value for
      <literal>search_name</literal>. Any subsequent execution of the statement (or any other
      statement referencing <literal>$[&amp;search_name]</literal>) will re-use the value
      you entered.
    </para>

    <para>
      When defining a variable, you can specify a list of values that should be entered in the dialog.
    </para>
    <programlisting>WbVardef -variable=status -values='active,pending,closed';</programlisting>
  </section>
  <section id="sort-var-prompt">
    <title>Controlling the order of variables during prompting</title>
    <para>
      By default the variables shown in the prompt dialog are sorted alphabetically. This behaviour can be
      changed by setting the configuration property <literal>workbench.sql.parameter.prompt.sort</literal> to true,
      e.g. using <link linkend="command-setconfig">WbSetConfig</link>
      <programlisting>WbSetConfig workbench.sql.parameter.prompt.sort=false</programlisting>
    </para>
    <para>
      If the property is set to <literal>false</literal>, the variables are shown in the order they were
      declared:
      <programlisting>
WbVarDef zzz='';
WbVarDef vvv='';
WbVarDef aaa='';

select *
from foobar
where col1 = $[?aaa]
  and col2 = $[?vvv]
  and col3 > $[?zzz]</programlisting>
  The dialog to enter the variables will show them in the order <literal>zzz</literal>, <literal>vvv</literal>, <literal>aaa</literal>
    </para>
  </section>

</section>