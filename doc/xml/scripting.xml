<section id="using-scripting">
	<title>Using &wb-productname; in batch files</title>
	
	<para>
		&wb-productname; can also be used from batch files to execute SQL scripts.
		This can be used to e.g. automatically extract data from a database or run
		other SQL queries or statements. If the <link linkend="scripting-scriptfile">-script</link> parameter
		is passed on the commandline, &wb-productname; will run in batch mode, otherwise
		in GUI mode.
	</para>
	
	<para>
		When using &wb-productname; from a batch file (or the commandline) it is
		<emphasis role="bold">not</emphasis> recommended to use the <link linkend="launcher-using">launcher</link> 
		as it will immediately return to the commandline while starting the JVM (and thus &wb-productname;) 
		in the background. Please refer to <link linkend="starting">Starting &wb-productname;</link> for details
		on how to start &wb-productname; with the <literal>java</literal> command.
	</para>

	<section id="scripting-connecting">
		<title>Specifying the connection</title>
		
		<para>
			When running &wb-productname; in batch mode, the same 
			<link linkend="commandline-connect-noprofile">connection parameters</link> 
			can be specified that are available in GUI mode.
		</para>
		
	</section>
	
	<section id="scripting-scriptfile">
		<title>Specifying the script file(s)</title>
		
		<para>
			With the parameter <literal>-script=&#60;filename&#62;</literal> the script
			file to be executed can be passed to the application. Multiple scripts can be specified by
			separating them with a comma. The scripts will be executed in the
			order in which they appear in the commandline. Again, if the filenames contain spaces
			or dashes (i.e. <literal>test-1.sql</literal>) the names have to be quoted.
		</para>
		<para>
			You can also execute several scripts by using the <link linkend="command-wbinclude"><literal>WbInclude</literal></link>
			command inside a script.
		</para>
	</section>

	<section id="scripting-delimiter">
		<title>Specifying a delimiter</title>
		<para>
			If your script files use a non-standard delimiter for the statements, you can 
			specify an alternate delimiter through the profile or through the <literal>-altDelimiter</literal>
			parameter. The alternate delimiter should be used if you have several scripts that use
			the regular semicolon and the alternate delimiter. If your scripts exceed a certain size, 
			they won't be processed in memory and detecting the alternate delimiter does not work in that case.
			If this is the case you can use the <literal>-delimitery</literal> switch to change 
			the default delimiter for all scripts. The usage of the alternate delimiter will be
			disabled if this parameter is specified.
		</para>
	</section>
	
	<section id="scripting-encoding">
		<title>Specifying an encoding for the file(s)</title>
		
		<para>
			In case your script files are not using the default encoding, you can specify the 
			encoding of your script files with the <literal>-encoding</literal> parameter. Note that this will set for all 
			script files passed on the commandline. If you need to run several scriptfiles with different encodings, 
			you have to create one "master" file, which calls the individual files using the <link linkend="command-wbinclude">WbInclude</link>
			command together with its <literal>-encoding</literal> parameter.
		</para>
	</section>
	
	<section id="scripting-logfile">
		<title>Specifying a logfile</title>
		
		<para>
			If you don't want to write the messages to the default logfile
			which is defined in <filename>workbench.settings</filename>
			an alternate logfile can be specified with <literal>-logfile=&#60;filename&#62;</literal>
		</para>
	</section>
	
	<section id="scripting-handling-errors">
		<title>Handling errors</title>
		
		<para>
			To control the behavior when errors occur during
			script execution, you can use the parameter <literal>-AbortOnError=[true|false]</literal>.
			If any error occurs, and <literal>AbortOnError</literal> is <literal>true</literal>,
			script processing is completely stopped (i.e. &wb-productname; will be stopped).
			The only script which will be executed after that point is the script specified
			with the parameter <literal>-CleanupError</literal>.
		</para>
		
		<para>
			If <literal>AbortOnError</literal> is false all statements in all
			scripts are executed regardless of any errors. As no error information is
			evaluated the script specified in -CleanupSuccess will be executed at
		the end.</para>
		
		<para>
			If this parameter is not supplied it defaults to true, meaning
		that the script will be aborted when an error occurs.</para>
		
		<para>
			You can also specify whether errors from <literal>DROP</literal> commands
			should be ignored. To enable this, pass the parameter <literal>-ignoredroperrors=true</literal>
			on the commandline. This works when connecting through a profile or through a full
			connection specification. If this parameter is set to <literal>true</literal>
			only a warning will be issued, but any error reported from the DBMS when 
			executing a DROP command will be ignored.
		</para>
	</section>
	
	<section id="script-success">
		<title>Specify a script to be executed on successful completion</title>
		
		<para>
			The script specified with the parameter <literal>-CleanupSuccess=&#60;filename&#62;</literal>
			is executed as the last script if either no error occurred or AbortOnError is set to false.
		</para>
		<para>
			If you update data in the database, this script usually contains a <literal>COMMIT</literal>
			command to make all changes permanent. The abort script usually contains a <literal>ROLLBACK</literal>
			command.
		</para>
	</section>
	
	<section id="script-failure">
		<title>Specify a script to be executed after an error</title>
		
		<para>
			The script specified with the parameter <literal>-CleanupErorr=&#60;filename&#62;</literal>
			is executed as the last script if <literal>AbortOnError</literal> is set to true and an error occurred
			during script execution.
		</para>
		
		<para>
			The failure script usually contains a <literal>ROLLBACK</literal> command
			to undo any changes to the database in case an error occured.
		</para>
	</section>

	<section id="script-ignoredrop">
		<title>Ignoring errors from DROP statements</title>
		
		<para>
			When connecting <link linkend="commandline-connect-noprofile">without a profile</link>, 
			you can use the switch <literal>-ignoredroperrors=[true|false]</literal> to ignore errors that are reported from <literal>DROP</literal>
			statements. This has the same effect as connecting with a profile where the 
			<link linkend="profile-ignore-drop-error">Ignore DROP errors</link> property is enabled.
		</para>
	</section>
	
	<section id="script-display">
		<title>Controlling console output during batch execution</title>
		
		<para>
			<!--
			When running &wb-productname; in batch mode, it is recommended that
			the <link linkend="options-log-console">logging to the console</link> is disabled.
			-->
			If you are running <literal>SELECT</literal> statements in your script without "using" 
			the data through an <link linkend="command-export"><literal>WbExport</literal></link>,
			you can optionally display the results to the console using the parameter 
			<literal>-displayresult=true</literal>. If this parameter is not passed or set
			to false, results sets will not be visible (for a <literal>SELECT</literal> statement
			you will simply see the message '<literal>SELECT executed successfully</literal>'.
		</para>
		<para>
			Usually each statement reports its success or failure individually. You can control
			this logging by using the <link linkend="command-wbfeedback">WbFeedback</link> command.
			As displaying the statement's result can be quite some overhead especially when executing
			thousands of statements in a script file, it is recommended to turn off the result logging
			using <literal>WbFeedback off</literal>.
		</para>
		
		<para>
			Any output generated by &wb-productname; during batch execution is sent to the standard
			output (stdout, System.out) and can be redirected if desired.
		</para>
		
	</section>

	<section id="cmdline-parameter-progress">
		<title>Show status information on console</title>
		<para>
			Several commands (like <literal>WbExport</literal>) show progress information in the statusbar. 
			When running in batch mode, this information is usually not shown. When you specifiy <literal>-showprogress=true</literal>
			these messages will also be displayed on the console.
		</para>
	</section>
	
	<section id="script-properties">
		<title>Setting configuration properties</title>
		<para>
			When running &wb-productname; in batch mode, with no <literal>workbench.settings</literal>
			file, you can set any property by passing the property as a system property
			when starting the JVM. To change the loglevel to <literal>DEBUG</literal> you need
			to pass <literal>-Dworkbench.log.level=DEBUG</literal> when starting the application:
		</para>
		<programlisting>java -Dworkbench.log.level=DEBUG -jar Workbench.jar </programlisting>
	</section>
	
	<section id="scripting-examples">
		<title>Examples</title>

		<para>The examples in this section are displayed on several lines. If
		you enter them manually on the commandline you will need to put everything
		in one line, or use the escape character for your operating system to
		extend a single command over more then one input line.
		</para>

		<para><emphasis role="bold">Connect to the database without specifying a connection profile:</emphasis></para>
		<programlisting>java -jar Workbench.jar -url=jdbc:postgresql:/dbserver/mydb
     -driver=org.postgresql.Driver
     -username=zaphod
     -password=vogsphere
     -driverjar=C:/Programme/pgsql/pg73jdbc3.jar 
     -script='test-script.sql'</programlisting>

		<para>
			This will start &wb-productname;, connect to the database server
			as specified in the connection parameters and execute the script
			<filename>test-script.sql</filename>. As the script&apos;s filename contains
			a dash, it has to be quoted. This is also necessary when the filename contains spaces.
			You should use single quotes (<literal>&apos;test-script.sql&apos;</literal>) to quote
			these values because most command line shells (including Windows&reg;) do not pass
			double quotes to the application.
		</para>

		<para><emphasis role="bold">Executing several scripts with a cleanup and failure script:</emphasis></para>
		<programlisting>java -jar Workbench.jar
     -script='c:/scripts/script1.sql','c:/scripts/script2.sql'
     -profile=Firebird
     -AbortOnError=false
     -CleanupSuccess=commit.sql
     -CleanupErorr=rollback.sql</programlisting>
		<para>
			Note that you need to quote each file individually and not the value for the
			<literal>-script</literal> parameter
		</para>

	</section>

</section>
