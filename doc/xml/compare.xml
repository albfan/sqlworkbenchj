<?xml version="1.0" encoding="ISO-8859-1"?>
<section id="compare-commands">
  <title>Comparing databases</title>

  <para>
    There are two &wb-productname; specific commands that can compare either the structure of two databases or
    the data contained in them.
  </para>


  <section id="command-schema-diff">
    <title>Compare two database schemas - WbSchemaDiff</title>

    <para>
      <literal>WbSchemaDiff</literal> analyzes two schemas (or a list of tables)
      and outputs the differences between those schemas as an XML file. The XML file
      describes the changes that need to be applied to the target schema to have
      the same structure as the reference schema, e.g. modify column definitions,
      remove or add tables, remove or add indexes.
    </para>

    <para>
			The output is intended to be transformed using XSLT (e.g. with the
      <link linkend="command-xslt">WbXSLT Command</link>).

      Sample XSLT transformations can be found on the
			<ulink url="http://www.sql-workbench.net/xslt.html">&wb-productname; homepage</ulink>
    </para>

    <para>The command supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
			<colspec colname="c1" colwidth="4cm" />
			<colspec colname="c2" />
			<thead>
				<row>
					<entry>Parameter</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody valign="top">
				<row>
					<entry>-referenceProfile</entry>
					<entry>The name of the connection profile for the reference
						connection. If this is not specified, then the current connection is
					used.</entry>
				</row>
				<row>
					<entry>-referenceGroup</entry>
					<entry>If the name of your reference profile is not unique across
						all profiles, you will need to specify the group in which the profile
						is located with this parameter.
					</entry>
				</row>
				<row>
					<entry>-targetProfile</entry>
					<entry>
						<para>
							The name of the connection profile for the target
							connection (the one that needs to be migrated). If this is not
							specified, then the current connection is used.
						</para>
						<para>
							If you use the current connection for reference and target,
							then you should prefix the table names with schema/user or
							use the <literal>-referenceschema</literal> and
							<literal>-targetschema</literal> parameters.
						</para>
					</entry>
				</row>

				<row>
					<entry>-targetGroup</entry>
					<entry>
						If the name of your target profile is not unique across
						all profiles, you will need to specify the group in which the profile
						is located with this parameter.
					</entry>
				</row>

				<row>
					<entry>-file</entry>
					<entry>The filename of the output file. If this
					is not supplied the output will be written to the message area</entry>
				</row>

				<row>
					<entry>-referenceTables</entry>
					<entry>A (comma separated) list of tables that are the reference
						tables, to be checked.
					</entry>
				</row>

				<row>
					<entry>-targetTables</entry>
					<entry>
						<para>
							A (comma separated) list of tables in the target
							connection to be compared to the source tables. The tables
							are "matched" by their position in the list. The first table in the
							<literal>-referenceTables</literal> parameter is compared to the
							first table in the <literal>-targetTables</literal> parameter, and so
							on. Using this parameter you can compare tables that do not have the
							same name.
						</para>
						<para>
							If you omit this parameter, then all tables from the
							target connection with the same names as those listed in
							<literal>-referenceTables</literal> are compared.
						</para>
						<para>
							If you omit both parameters, then all tables that the
							user can access are retrieved from the source connection
							and compared to the tables with the same name in the target
							connection.
						</para>
					</entry>
				</row>

				<row>
					<entry>-referenceSchema</entry>
					<entry>
						Compare all tables from the specified schema (user)
					</entry>
				</row>

				<row>
					<entry>-targetSchema</entry>
					<entry>
						A schema in the target connection to be compared to the tables from the reference schema.
					</entry>
				</row>

				<row>
					<entry>-encoding</entry>
					<entry>The encoding to be used for the XML file. The default is UTF-8</entry>
				</row>

				<row>
					<entry>-includePrimaryKeys</entry>
					<entry>Select whether primary key constraint definitions should be compared as well.
						The default is <literal>true</literal>.
						Valid values are <literal>true</literal> or <literal>false</literal>.
					</entry>
				</row>

				<row>
					<entry>-includeForeignKeys</entry>
					<entry>Select whether foreign key constraint definitions should be compared as well.
						The default is <literal>true</literal>.
						Valid values are <literal>true</literal> or <literal>false</literal>.
					</entry>
				</row>

				<row>
					<entry>-includeTableGrants</entry>
					<entry>
            Select whether table grants should be compared as well.
						The default is <literal>false</literal>.
					</entry>
				</row>

				<row>
					<entry>-includeTriggers</entry>
					<entry>
            Select whether table triggers are compared as well.
						The default value is <literal>true</literal>.
					</entry>
				</row>

				<row>
					<entry>-includeConstraints</entry>
					<entry>
						<para>
							Select whether table and column (check) constraints
							should be compared as well. &wb-productname; compares the constraint
							definition (SQL) as stored in the database.
						</para>
						<para>
							The default is to compare table constraints (<literal>true</literal>)
							Valid values are <literal>true</literal> or <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-useConstraintNames</entry>
					<entry>
						<para>
							When including check constraints this parameter controls whether constraints
							should be matched by name, or only by their expression. If comparing by names
							is enabled, the diff output will contain elements for constraint modification
							otherwise only drop and add entries will be available.
						</para>
						<para>
							The default is to compare by names(<literal>true</literal>)
							Valid values are <literal>true</literal> or <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-includeViews</entry>
					<entry>
						<para>
							Select whether views should also be compared. When comparing
							views, the source as it is stored in the DBMS is compared. This comparison
							is case-sensitiv, which means <literal>SELECT * FROM foo;</literal> will be
							reported as a difference to <literal>select * from foo;</literal> even
							if they are logically the same. A comparison across different DBMS will also not
							work properly!
						</para>
						<para>
							The default is <literal>true</literal>
							Valid values are <literal>true</literal> or <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-includeProcedures</entry>
					<entry>
						<para>
							Select whether stored procedures should also be compared. When comparing
							procedures the source as it is stored in the DBMS is compared. This comparison
							is case-sensitiv. A comparison across different DBMS will also not work!
						</para>
						<para>
							The default is <literal>false</literal>
							Valid values are <literal>true</literal> or <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-includeIndex</entry>
					<entry>
						Select whether indexes should be compared as well.  The default
						is to not compare index definitions.
						Valid values are <literal>true</literal> or <literal>false</literal>.
					</entry>
				</row>

				<row>
					<entry>-includeSequences</entry>
					<entry>
						Select whether sequences should be compared as well. The default is
						to not compare sequences. Valid values are <literal>true</literal>, <literal>false</literal>.
					</entry>
				</row>

				<row>
					<entry>-useJdbcTypes</entry>
					<entry>
						<para>
							Define whether to compare the DBMS specific data types, or
							the JDBC data type returned by the driver. When comparing
							tables from two different DBMS it is recommended to use
							<literal>-useJdbcType=true</literal> as this will make the
							comparison a bit more DBMS-independent. When comparing e.g.
							Oracle vs. PostgreSQL a column defined as
							<literal>VARCHAR2(100)</literal> in Oracle would be reported as beeing different
							to a <literal>VARCHAR(100)</literal> column in PostgreSQL which is not really true
							As both drivers ropert the column as java.sql.Types.VARCHAR,
							they would be considered as identical when using <literal>-useJdbcType=true</literal>.
						</para>
						<para>
							Valid values are <literal>true</literal> or <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-stylesheet</entry>
					<entry>Apply a XSLT transformation to the generated XML file.</entry>
				</row>
				<row>
					<entry>-xsltOutput</entry>
					<entry>The name of the generated output file when applying the XSLT transformation.</entry>
				</row>

			</tbody>
      </tgroup>
    </informaltable>
  </section>

	<section id="command-data-diff">

		<title>Compare data across databases - WbDataDiff</title>

		<para>
			The <literal>WbDataDiff</literal> command can be used to generate SQL scripts
			that update a target database such that the data is identical to a reference
			database. This is similar to the <literal>WbSchemaDiff</literal> but compares
			the actual data in the tables rather than the table structure.
		</para>
		<para>
			For each table the command will create up to three script files, depending on
			the needed statements to migrate the data. One file for <literal>UPDATE</literal> statements,
			one file for <literal>INSERT</literal> statements and one file for <literal>DELETE</literal>
			statements (if <literal>-includeDelete=true</literal> is specified)
		</para>

		<note><para>
			As this command needs to read every row from the reference and the target
			table, processing large tables can take quite some time, especially if <literal>DELETE</literal>
			statements should also be generated.
		</para></note>

		<para>
			<literal>WbDataDiff</literal> requires that all involved tables have a primary key
			defined. If a table does not have a primary key, <literal>WbDataDiff</literal> will
			stop the processing.
		</para>

		<para>
			To improve performance (a bit), the rows are retrieved in chunks from the
			target table by dynamically constructing a WHERE clause for the rows
			that were retrieved from the reference table. The chunk size
			can be controlled using the property <literal>workbench.sql.sync.chunksize</literal>
			The chunk size defaults to 25. This is a conservative setting to avoid
			problems with long SQL statements when processing tables that have
			a PK with multiple columns.	If you know that your primary keys
			consist only of a single column and the values won't be too long, you
			can increase the chunk size, possibly increasing the performace when
			generating the SQL statements. As most DBMS have a limit on the length
			of a single SQL statement, be careful when setting the chunksize too high.
			The same chunk size is applied when generating <literal>DELETE</literal>
			statements by the <link linkend="command-copy"><literal>WbCopy</literal></link> command,
			when <link linkend="copy-sync-delete">syncDelete</link>	mode is enabled.
		</para>

		<para>
			The command supports the following parameters:
		</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
			<colspec colname="c1" colwidth="4cm" />
			<colspec colname="c2" />
			<thead>
				<row>
					<entry>Parameter</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody valign="top">
				<row>
					<entry>-referenceProfile</entry>
					<entry>
						The name of the connection profile for the reference connection.
						If this is not specified, then the current connection is used.
					</entry>
				</row>
				<row>
					<entry>-referenceGroup</entry>
					<entry>
						If the name of your reference profile is not unique across
						all profiles, you will need to specify the group in which the profile
						is located with this parameter. If the profile's name is unique
						you can omit this parameter
					</entry>
				</row>
				<row>
					<entry>-targetProfile</entry>
					<entry>
						<para>
							The name of the connection profile for the target
							connection (the one that needs to be migrated). If this is not
							specified, then the current connection is used.
						</para>
						<para>
							If you use the current connection for reference and target,
							then you should prefix the table names with schema/user or
							use the <literal>-referenceschema</literal> and
							<literal>-targetschema</literal> parameters.
						</para>
					</entry>
				</row>

				<row>
					<entry>-targetGroup</entry>
					<entry>
						If the name of your target profile is not unique across
						all profiles, you will need to specify the group in which the profile
						is located with this parameter.
					</entry>
				</row>

				<row>
					<entry>-file</entry>
					<entry>
						The filename of the main script file. The command creates two
						scripts per table. One script named <literal>update_&lt;tablename&gt;.sql</literal>
						that contains all needed <literal>UPDATE</literal> or <literal>INSERT</literal>
						statements. The second script is named <literal>delete_&lt;tablename&gt;.sql</literal>
						and will contain all <literal>DELETE</literal> statements for the target table.
						The main script merely calls (using <link linkend="command-wbinclude">WbInclude</link>)
						the generated scripts for each table.
					</entry>
				</row>

				<row>
					<entry>-referenceTables</entry>
					<entry>
						A (comma separated) list of tables that are the reference
						tables, to be checked. You can specify the table with wildcards,
						e.g. <literal>-referenceTables=P%</literal> to compare all tables
						that start with the letter <literal>P</literal>.
					</entry>
				</row>

				<row>
					<entry>-targetTables</entry>
					<entry>
						<para>
							A (comma separated) list of tables in the target
							connection to be compared to the source tables. The tables
							are "matched" by their position in the list. The first table in the
							<literal>-referenceTables</literal> parameter is compared to the
							first table in the <literal>-targetTables</literal> parameter, and so
							on. Using this parameter you can compare tables that do not have the
							same name.
						</para>
						<para>
							If you omit this parameter, then all tables from the
							target connection with the same names as those listed in
							<literal>-referenceTables</literal> are compared.
						</para>
						<para>
							If you omit both parameters, then all tables that the
							user can access are retrieved from the source connection
							and compared to the tables with the same name in the target
							connection.
						</para>
					</entry>
				</row>

				<row>
					<entry>-referenceSchema</entry>
					<entry>
						Compare all tables from the specified schema (user)
					</entry>
				</row>

				<row>
					<entry>-targetSchema</entry>
					<entry>
						A schema in the target connection to be compared to the tables from the reference schema.
					</entry>
				</row>

				<row>
					<entry>-checkDependencies</entry>

					<entry>
						<para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
						<para>
							Sorts the generated scripts in order to respect foreign key dependencies
							for deleting and inserting rows.
						</para>
						<para>
							The default is <literal>true</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-includeDelete</entry>
					<entry>
						<para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
						<para>
							Generates <literal>DELETE</literal> statements for rows that are present
							in the target table, but not in the reference table. The default is <literal>false</literal>.
						</para>
						<para>
							The default is <literal>false</literal>.
						</para>
					</entry>
				</row>

				<row>
					<entry>-type</entry>
					<entry>
						<para>Valid values are <literal>sql</literal>, <literal>xml</literal></para>
            <para>Defines the type of the generated files.</para>
          </entry>
        </row>
				<row>
					<entry>-encoding</entry>
					<entry>
            <para>
						The encoding to be used for the SQL scripts. The default depends
						on your operating system. It will be displayed when you run
						<literal>WbDataDiff</literal> without any parameters. You can overwrite
						the platform default with the property <literal>workbench.encoding</literal>
						in the file <literal>workbench.settings</literal>
            </para>
            <para>
              XML files are always stored in UTF-8
            </para>
					</entry>
				</row>

				<row>
					<entry>-sqlDateLiterals</entry>
					<entry>
						<para>Valid values: <literal>jdbc</literal>, <literal>ansi</literal>, <literal>dbms</literal>, <literal>default</literal></para>
						<para>
							Controls the format in which the values of DATE, TIME and TIMESTAMP columns
							are written into the generated SQL statements.
							For a detailed description of the possible values, please refer to the
							<link linkend="export-sql-literal-formats">WbExport</link>
							command.
						</para>
					</entry>
				</row>

				<row>
					<entry>-ignoreColumns</entry>
					<entry>
						<para>
							With this parameter you can define a list of column names that should not be considered when comparing
              data. You can e.g. exclude columns that store the last access time of a row, or the last update time if
              that should not be taken into account when checking for changes.
            </para>
            <para>
              They will however be part of generated <literal>INSERT</literal> statements.
						</para>
					</entry>
				</row>

				<row>
					<entry>-alternateKey</entry>
					<entry>
						<para>
							With this parameter alternate keys can be defined for the tables that are compared. The parameter
              can be repeated multiple times to set the keys for multiple tables in the following format:
              <literal>-alternateKey='table_1=column_1,column_2'</literal>
            </para>
            <para>
              Note that each value has to be enclosed in either single or double quotes to mask the equals sign
              embedded in the parameter value.
            </para>
            <para>
              Once an alternate (primary) key has been defined, the primary key columns defined on the tables
              are ignored. By default the real PK columns will however be included in <literal>INSERT</literal> statement that are generated.
              To avoid this, set the parameter <literal>-excludeRealPK</literal> to true.
            </para>
					</entry>
				</row>

				<row>
					<entry>-excludeRealPK</entry>
					<entry>
						<para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
						<para>
              This parameter controls the usage of the real PK columns in case alternate PK columns are defined.
              If set to <literal>true</literal> the real PK columns are excluded from generated <literal>INSERT</literal>
              statements (assuming that a new PK value will be generated during inserting the rows).
            </para>
            <para>
              Note that this parameter will enable/disable the use of the real PK columns for <emphasis role="bold">all</emphasis>
              tables for which alternate key columns were defined.
            </para>
            <para>
              This parameter has no effect if no alternate keys were specified using the <literal>-alternateKey</literal> option.
            </para>
					</entry>
				</row>

				&progress-parameter;

			</tbody>
      </tgroup>
    </informaltable>

		<simplesect id="data-diff-examples">
			<title>WbDataDiff Examples</title>
			<para>
				Compare all tables between two connections, and write the output to the
				file <literal>migrate_staging.sql</literal>, but do not generate
				<literal>DELETE</literal> statements.
			</para>
<programlisting>WbDataDiff -referenceProfile="Production"
           -targetProfile="Staging"
           -file=migrate_staging.sql
           -includeDelete=false</programlisting>

			<para>
				Compare a list of matching tables between two databases and write the output to the
				file <literal>migrate_staging.sql</literal> including <literal>DELETE</literal> statements.
			</para>

<programlisting>WbDataDiff -referenceProfile="Production"
           -targetProfile="Staging"
           -referenceTables=person,address,person_address
           -file=migrate_staging.sql
           -includeDelete=true</programlisting>

		<para>
			Compare three tables that are differently named in the target database and
			ignore all columns (regardless in which table they appear) that are named
			<literal>LAST_ACCESS</literal> or <literal>LAST_UPDATE</literal>
		</para>
<programlisting>WbDataDiff -referenceProfile="Production"
           -targetProfile="Staging"
           -referenceTables=person,address,person_address
           -targetTables=t_person,t_address,t_person_address
           -ignoreColumns=last_access,last_update
           -file=migrate_staging.sql
           -includeDelete=true</programlisting>
		</simplesect>

	</section>

</section>