<section id="settings">
  <title>Properties in the .settings file</title>
		 
  <para>This section describes the additional options for &wb-productname; which
      are not (yet) available in the options dialog.</para>

  <para>The name of the setting refers to the entry in the file <literal>workbench.settings</literal>
      which is located in the <link linkend="config-dir">configuration directory</link>. Not all
      listed properties will be present in <literal>workbench.settings</literal>. If a property
      does not yet exist in the file, simply add it to the file. The position does not matter,
      as the file will be sorted the next time it is written back.
  </para>
        
  <section id="dbms-identifier">
    <title>Database Identifier</title>
    <para>Some parameters define a list of "Database Identifiers".
				The identifier that needs to be put there can be obtained by hovering the mouse over the connection
				URL information in the main window, or from the log file.
				After a successful connect to a database, there will be an entry in the log file similar to this:
    </para>
    <programlisting>INFO  15.08.2004 10:24:42 Connected to: [HSQL Database Engine]</programlisting>
    <para>The text between (but not including) the square brackets, is the ID that needs to
      	be used for the various <literal>workbench.db.</literal> parameters.
    </para>
  </section>
        
  <section id="dbid">
    <title>DBID</title>
    <para>For some settings, where the ID is part of the property's key, a "clean" version of
      	the Database Identifer, called the DBID is used. This DBID is also reported in the log
      	file:</para>
    <programlisting>INFO  15.08.2004 10:24:42 DbMetadata - Using DBID=hsql_database_engine</programlisting>
  </section>

  <section id="gui-settings">
    <title>GUI related settings</title>

    <section>
      <title>workbench.editor.rightclickmovescursor</title>
      <para>Normally a right click in the SQL editor does not
                  change the location of the cursor (caret). If this parameter is set to
                  true, then a right click will also change the caret's location.
      </para>
      <para>Default: <literal>false</literal></para>
    </section>

    <section>
      <title>workbench.gui.showmnemonics</title>
      <para>
	              Usually the mnemonic (aka. Accelerator) for a menu item is not shown under
	              Windows 2000 or later. It will only be shown, when you press the
	              ALT key. With this settings, this JDK behaviour can be controlled.
      </para>
      <para>Default: <literal>true</literal></para>
    </section>
				
    <section>
      <title>workbench.workspace.autosave</title>
      <para>If this is enabled, the current workspace will
          be saved automatically, when a SQL statement is executed. This
          setting was introduced with Build 61.</para>
      <para>Default: <literal>false</literal></para>
    </section>
        
    <section>
      <title>workbench.workspace.createbackup</title>
      <para>If this is enabled, a backup file will be created
          before saving the workspace. This is done by renaming the current
          file (overwriting any existing backup) and then saving the workspace.</para>
      <para>Default: <literal>false</literal></para>
    </section>

    <section id="selectable-objects-setting">
      <title>workbench.db.objecttype.selectable.[dbid]=value1,value2,...</title>
      <para>
            The DbExplorer makes the "data" tab available based on the type of the object
            in the object list. The default list consists of the
      </para>
      <para>Default values:
        <simplelist columns="1">
          <member><literal>.default=view,table,system view,system table</literal></member>
          <member><literal>.postgres=view,table,system view,system table,sequence</literal></member>
          <member><literal>.rdb=view,table,system,system view</literal></member>
        </simplelist>
      </para>
    </section>

  </section>

  <section id="db-setting">
    <title>Database related settings</title>
    <section id="verify-url">
      <title>workbench.db.verifydriverurl</title>
      <para>
              Usually before connecting to the DBMS, &wb-productname; will
              call the acceptsUrl() method of the JDBC driver, to verify
              if the entered URL is correct and will be accepted by the
              driver. Some drivers have been reported to indicate an error
              in the URL even if they could connect successfully.</para>
      <para>If you are seeing an error indicating that the URL is not
              accepted by the driver, but you are sure that the driver accepts
              the URL, then set this property to <literal>false</literal>
      </para>
      <para>Default: <literal>true</literal></para>
    </section>

    <section id="manual-setting-datapumper-autoconnect">
      <title>workbench.datapumper.autoconnect</title>
      <para>When opening the <link linkend="data-pumper">DataPumper</link> it will
            connect to the current profile as the source connection. If you do not want the DataPumper to
            connect automatically set this property to <literal>false</literal>
      </para>
      <para>Default: <literal>true</literal></para>
    </section>

    <section>
      <title>workbench.db.ddlneedscommit</title>
      <para>A list of <link linkend="dbms-identifier">DBMS Identifiers</link> that require a COMMIT after issuing DDL statements (such
            as <literal>CREATE TABLE</literal></para>
      <para>Default: <literal>PostgreSQL,Firebird</literal></para>
    </section>
          
    <section>
      <title>workbench.db.usejdbccommit</title>
      <para>Some DBMS return an error when <literal>COMMIT</literal> or <literal>ROLLBACK</literal> is send as
            a regular command through the JDBC interface. If the DBMS is listed here,
            the JDBC functions <literal>commit()</literal> or <literal>rollback()</literal> will
            be used instead.
						This is a comma separated list of <link linkend="dbms-identifier">Database Identifiers</link>
      </para>
      <para>Default: <literal>Firebird,Cloudscape</literal></para>
    </section>

    <section>
      <title>workbench.db.inlineconstraints</title>
      <para>This setting controls the generation of the <literal>CREATE TABLE</literal>
            source in the <link linkend="dbexplorer">DbExplorer</link>. This is a comma separated
            list of <link linkend="dbms-identifier">Database Identifiers</link> that only support defining
						primary and foreign keys inside the <literal>CREATE TABLE</literal> statement.</para>
      <para>Default: <literal>FirstSQL/J</literal></para>
    </section>

    <section>
      <title>workbench.db.casesensitive</title>
      <para>This is (currently) only used in the table search panel of the DbExplorer.
            The highlighting of matching values considers this setting.
						This is a comma separated list of <link linkend="dbms-identifier">Database Identifiers</link>
      </para>
      <para>Default: <literal>Oracle</literal></para>
    </section>

    <section>
      <title>workbench.db.keywordlist.[dbid]=</title>
      <para>For a <link linkend="dbid">DBID</link> you can define a list of additional
            SQL keywords. This can be used if the JDBC driver does not implement getSQLKeywords() correctly.
      </para>
      <para>No default</para>
    </section>

    <section>
      <title>workbench.db.cancelneedsreconnect</title>
      <para>A list of JDBC driver classes, that require a reconnect after cancelling
            a statement. </para>
      <para>Default: <literal>com.microsoft.jdbc.sqlserver.SQLServerDriver</literal></para>
    </section>
          
  </section>
			
			
  <section id="sql-execution-settings">
    <title>SQL Execution related settings</title>
    <section>
      <title>workbench.sql.script.inmemory.maxsize</title>
      <para>Control the size up to which files that are executed in batch
            mode or via the <link linkend="command-wbinclude">WBINCLUDE</link> command
            are read into memory. Files exceeding this size are not read into memory
            but processed statement by statement. When a file is not read into memory
            the automatic detection of the <link linkend="options-alternate-delimiter">alternate delimiter</link>
						does not work any longer. The size is given in bytes.</para>
      <para>Default: <literal>1048576</literal></para>
    </section>

    <section>
      <title>workbench.db.ignore.[dbid]=</title>
      <para>For a DBMS identifier you can define a list of commands
            that are simply ignored by &wb-productname;. This is useful e.g. for Oracle,
            when you want to run scripts that are intended for SQL*Plus. If those scripts
            contain special SQL*Plus commands (that are not understood by the Oracle server
            as SQL*Plus executes these commands directly) they would fail in &wb-productname;.
            If those commands are simply ignored and not send to the server, the scripts
            can run without modification.</para>
      <para>The <link linkend="dbid">DBID</link> is the lower case DBMS identifier (see above) with all
            special characters like <literal>\/,.$[]()</literal> and spaces removed.
            The actual ID that is used to retrieve this list is reported as an
            informational message in the log file (<literal>Using DBID=</literal>)</para>
      <para>Default: <literal>workbench.db.ignore.oracle=prompt,exit,whenever</literal></para>
    </section>
  </section>
			
  <section id="log-setting">
    <title>Controlling the log file</title>
    <section>
      <title>workbench.log.level</title>
      <para>Set the log level for the log file. Valid values are
        <itemizedlist spacing="compact">
          <listitem><para>DEBUG</para></listitem>
          <listitem><para>INFO</para></listitem>
          <listitem><para>WARN</para></listitem>
          <listitem><para>ERROR</para></listitem>
        </itemizedlist>
      </para>
      <para>Default: <literal>INFO</literal></para>
    </section>

    <section>
      <title>workbench.log.format</title>
      <para>Define the format of the log messages. The following placeholders
                are supported:
        <itemizedlist spacing="compact">
          <listitem><para>{type}</para></listitem>
          <listitem><para>{timestamp}</para></listitem>
          <listitem><para>{message}</para></listitem>
          <listitem><para>{error}</para></listitem>
          <listitem><para>{source}</para></listitem>
          <listitem><para>{stacktrace}</para></listitem>
        </itemizedlist>
               The order of the placeholders defines the order in the log file, except
               for the stacktrace which will always be printed after the message.
               If the log level is set to debug, the stacktrace will always be displayed
               even if it is not included in the format string.
      </para>
      <para>Default: <literal>{type} {timestamp} {message} {error}</literal></para>
    </section>

    <section id="options-log-console">
      <title>workbench.log.console</title>
      <para>Defines whether &wb-productname; logs messages additionally to the standard
                error output
      </para>
      <para>Default: <literal>false</literal></para>
    </section>
					
    <section>
      <title>workbench.dbmetadata.logsql</title>
      <para>If this is set to <literal>true</literal>the SQL queries used to
                retrieve DBMS specific meta data (such as view/procedure/trigger source,
                defined triggers/views) will be logged with level INFO.
                This can be used to debug customized SQL statements
                for DBMS's which are not (yet) preconfigured.</para>
      <para>Default: <literal>false</literal></para>
    </section>

  </section>
			
  <section id="setting-sql-generation">
    <title>Settings related to SQL statement generation</title>
		      
    <section id="formatter-subselect-threshold">
      <title>workbench.sql.formatter.subselect.maxlength</title>
      <para>When the SQL formatter hits a sub-SELECT while
          parsing it will not reformat any statement which is shorter
          then the length specified through this property. I.e. any sub SELECT
          shorter then this value will be formatted as one single String without
          line breaks or indention. See <xref linkend="editor-reformat-sql"/> for
          details on how the SQL formatting works.</para>
      <para>Default: <literal>60</literal></para>
    </section>
  			
    <section id="manual-setting-snippet-no-newline">
      <title>workbench.javacode.includenewline</title>
      <para>When creating a <link linkend="editor-copy-java-code-snippet">Java code snippet</link>,
          the newlines inside the editor are preserved by putting a <literal>\n</literal>
          character into the String declaration. Setting this property to false, will
          tell &wb-productname; not put any <literal>\n</literal> characters into the Java string.</para>
      <para>Default: <literal>true</literal></para>
    </section>

    <section>
      <title>workbench.sql.ignoreschema.[dbid1]=schema1,...</title>
      <para>
					Define a list of schemas that should be ignored for the <link linkend="dbid">DB ID</link>
					When &wb-productname; creates DML statements and the current table is reported
					to be belong to any of the schemas listed in this property, the schema will not
					be used to qualify the table. To ignore all schemas use a *, e.g.
        <literal>workbench.sql.ignoreschema.rdb=*</literal>. In this case, table names
					will never be prefixed with the schema name reported by the JDBC driver.
					The entries in there are case sensitiv.
      </para>
      <para>Default values:
        <simplelist columns="1">
          <member><literal>.oracle=PUBLIC</literal></member>
          <member><literal>.postgres=public</literal></member>
          <member><literal>.rdb=*</literal></member>
        </simplelist>
      </para>
    </section>

    <section>
      <title>workbench.sql.generate.update.doformat</title>
      <entry><para>Controls the formatting of generated UPDATE statements.
					If this is set to <literal>false</literal> then UPDATE statements,
					that are generated are not formatted at all (the complete statement
					will be put into a single line)</para>
      </entry>
      <para>Default: <literal>true</literal></para>
    </section>
        
    <section>
      <title>workbench.sql.generate.insert.doformat</title>
      <para>Controls the formatting of generated INSERT statements.</para>
      <para>Default: <literal>true</literal></para>
    </section>

  </section>
			
</section>
