<section id="settings">
  <title>Properties in the .settings file</title>
		 
  <para>
		This section describes the additional options for &wb-productname; which
    are not (yet) available in the options dialog.
	</para>

	<para>
		The name of the setting refers to the entry in the file <literal>workbench.settings</literal>
		which is located in the <link linkend="config-dir">configuration directory</link>. Not all
		listed properties will be present in <literal>workbench.settings</literal>. In this case, 
		simply create a new line with the property name and the value as described here. 
		The position where you add this entry does not matter.
	</para>
	
  <section id="dbms-identifier">
    <title>Database Identifier</title>
		
		<para>
			Some parameters are used such that a list of "Database Identifiers" is expected. 
			The identifier that needs to be put there can be obtained by hovering the mouse over the connection
			URL information in the main window, or from the log file.
			After a successful connect to a database, there will be an entry in the log file similar to this:
		</para>
		
    <programlisting>INFO  15.08.2004 10:24:42 Connected to: [HSQL Database Engine]</programlisting>
		
    <para>
			If the description for a property in this chapter refers to 
			a "Database Identifier", the text between (but not including) the square brackets has to be used.
    </para>
		
  </section>
        
  <section id="dbid">
    <title>DBID</title>
		
		<para>
			For some settings, where the ID is part of the property's key, a "clean" version of
			the Database Identifer, called the DBID, is used. This DBID is displayed in the connection 
			info dialog (right click on the connection URL in the main window, then choose "Connection Info").
		</para>
		
		<para>
			The DBID is also reported in the log file:
		</para>
		
		<programlisting>INFO  15.08.2004 10:24:42 Using DBID=hsql_database_engine</programlisting>
		
		<para> 
			If the description for a property in this chapter refers to the "DBID", then this value has to be used.
		</para>
		<para>
			If the DBID is part of a property key this will be referred to as <literal>[dbid]</literal> in this chapter.
		</para>
		
	</section>

  <section id="gui-settings">
    <title>GUI related settings</title>

<!--
		<simplesect id="settings-varchar-multiline-threshold">
			<title>Controlling display of multiline values</title>
      <para>Property: <literal>workbench.gui.display.multilinethreshold</literal></para>
			<para>
				&wb-productname; uses a special renderer for the contents 
				of <literal>CLOB</literal> columns that is capable of displaying 
				multiple lines. This multi-line renderer is usually not applied for
				<literal>VARCHAR</literal> columns. If your database stores text 
				in VARCHAR columns that contains line breaks, you can define a threshold
				for the length of the column. Any column that is defined with a higher value
				will be displayed with a multiline renderer. 
			</para>
			<para>
				The default value of 250 means that a <literal>VARCHAR(250)</literal> column
				will be displayed with the multiline renderer. A <literal>VARCHAR(210)</literal>
				will be displayed in a single line. 
			</para>
			<para>
				Using the multiline renderer has some minor drawbacks when editing the data,
				and is be a bit slower when displaying large result sets.
			</para>
      <para>Default: <literal>250</literal></para>
		</simplesect>
-->
    <simplesect id="settings-show-acc-menu">
      <title>Showing accelerator in menu</title>
      <para>Property: <literal>workbench.gui.showmnemonics</literal></para>
      <para>Possible values: <literal>true</literal>, <literal>false</literal></para>
      <para>
        Usually the mnemonic (aka. Accelerator) for a menu item is not shown under
        Windows 2000 or later. It will only be shown, when you press the
        ALT key. With this settings, this JDK behaviour can be controlled.
      </para>
      <para>Default: <literal>true</literal></para>
    </simplesect>

		<simplesect id="setting-native-print-dialog">
			<title>Controlling the type of print dialog</title>
			<para>Property: <literal>workbench.print.nativepagedialog</literal></para>
      <para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				When printing the contents of a table, this settings controls the type
				of print dialog to be used. The default setting will open the 
				native print dialog of the operating system. If you experience problems
				when trying to print, set this property to false. &wb-productname; will
				then open a cross-platform print dialog.
			</para>
			<para>Default value: <literal>true</literal></para>
		</simplesect>
  </section>

	<section id="editor-settings">
		<title>Editor related settings</title>

		<simplesect id="auto-completion-public-syn">
			<title>Include Oracle public synonyms in auto-completion of tables</title>
			<para>Property: <literal>workbench.editor.autocompletion.oracle.public_synonyms</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				When using auto completion for table columns and table names, Oracle's public synonyms
				are not included by default. This has two reasons: first, the author believes that public
				synonyms shouldn't be used (it's just as bad as global variables in programming) and
				second, Oracle defines a huge number of public synonyms that would make the
				popup with all available tables very long and hard to use. Setting this property
				to <literal>true</literal>, will include public synonyms in the popup. Please
				refer to <link linkend="db-oracle-filter-syns">filtering synonyms</link> for
				details on how to filter out unwanted synonyms from this list.
			</para>
			<para>Default value: <literal>false</literal></para>
		</simplesect>
		
		<simplesect id="auto-completion-empty-line">
			<title>Empty line to terminate SQL statements</title>
			<para>Property: <literal>workbench.editor.autocompletion.sql.emptylineseparator</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				When analysing statements in the editor, it is assumed that individual statements
				separated with a semicolon. When using auto completion, &wb-productname; can be configured
				to accept an empty line as the separator between two statements. 
			</para>
			<note><para>
				This does not influence the behaviour when running scripts or for the "execute current"
				command.
			</para></note>
			<para>Default value: <literal>false</literal></para>
		</simplesect>

		<!--
    <simplesect id="editor-color-setting">
      <title>Customizing the colors used for syntax highlighting</title>
      <para>Property: <literal>workbench.editor.color.[type]</literal></para>
      <para>
				These properties control the various colors used for syntax highlighting in the editor. 
				Each entry defines a color with the three RGB values that make up the color.
      </para>
			
      <para>Available values for <literal>[type]</literal> and their defaults:
        <simplelist columns="1">
          <member><literal>comment1</literal> - The color used for multi-line comments (128,128,128)</member>
          <member><literal>comment2</literal> - The color used for single-line comments (128,128,128)</member>
          <member><literal>keyword1</literal> - The color standard SQL keywords (0,0,255)</member>
          <member><literal>keyword2</literal> - The color used for WB specific commands (255,0,255)</member>
          <member><literal>keyword3</literal> - The color used for SQL functions (0,150,0)</member>
          <member><literal>literal1</literal> - The color used for literals (101,0,153)</member>
          <member><literal>operator</literal> - The color used for operators (0,0,0)</member>
        </simplelist>
      </para>
    </simplesect>
		-->
		
   <simplesect id="editor-rect-selection">
      <title>Set the modifier key for rectangular selections in the edior</title>
      <para>Property: <literal>workbench.editor.rectselection.modifier</literal></para>
      <para>
				These properties control the modifier key that needs to be pressed to enable
				rectangular selections in the editor. Possible values are <literal>alt</literal> for 
				setting the <keycap>Alt</keycap> key as the modifier, or <literal>ctrl</literal>
				for setting the <keycap>Ctrl</keycap> key as the modifier.
      </para> 
			<para>Default value: <literal>alt</literal></para>
    </simplesect>
	
		<simplesect id="default-file-encoding">
			<title>Default file encoding</title>
			<para>Property: <literal>workbench.file.encoding</literal></para>
			<para>
				Several internal commands use an encoding when writing external text files
				(e.g. <link linkend="command-export">WbExport</link>). If no encoding is 
				specified for those commands, the default platform encoding as reported 
				by the Java runtime system is used. You can overwrite the default encoding
				that Java assumes by setting this property.
			</para>
			<para>Default value: empty, the Java runtime default is used</para>
		</simplesect>
		
		<simplesect id="editor-history-text-size">
			<title>Limitting size of the text put into the history</title>
			<para>Property: <literal>workbench.sql.history.maxtextlength</literal></para>
			<para>
				When you execute a SQL statement in the editor, the current content of the
				editor is put into the history buffer. If you are editing large scripts, this 
				can lead to memory problems. This property controls the max. size of the 
				editor text that is put into the history. 
			</para>
			<para>
				If the current editor text is bigger than the size defined in this property
				the text is not put into the history. 
			</para>
			<para>Default value: 10485760 (10MB)</para>
		</simplesect>
		
    <simplesect id="manual-setting-snippet-no-newline">
			<title>Controlling newlines in code snippets</title>
			<para>Property: <literal>workbench.clipcreate.includenewline</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				When creating a <link linkend="editor-copy-java-code-snippet">Java code snippet</link>,
				the newlines inside the editor are preserved by putting a <literal>\n</literal>
				character into the String declaration. Setting this property to false, will
				tell &wb-productname; not put any <literal>\n</literal> characters into the Java string.
			</para>
			<para>Default: <literal>true</literal></para>
    </simplesect>

    <simplesect id="manual-setting-snippet-concat">
			<title>Controlling the concatenation character for code snippets</title>
			<para>Property: <literal>workbench.clipcreate.concat</literal></para>
			<para>
				When creating a <link linkend="editor-copy-java-code-snippet">Java code snippet</link>,
				each line is concatenated using the standard + operator. If your programming language
				uses a different concatenation character (e.g. &amp;), this can be changed with this
				property.
			</para>
			<para>Default: <literal>+</literal></para>
    </simplesect>

    <simplesect id="manual-setting-snippet-prefix">
			<title>Controlling the prefix for code snippets</title>
			<para>Property: <literal>workbench.clipcreate.codeprefix</literal></para>
			<para>
				When creating a <link linkend="editor-copy-java-code-snippet">Java code snippet</link>,
				this is prefixed with <literal>String sql = </literal>. With this property you can 
				adjust this prefix.
			</para>
			<para>Default: <literal>String sql =</literal></para>
    </simplesect>
		
		
	</section>

	<section id="db-explorer-settings">
		<title>DbExplorer Settings</title>

    <simplesect id="selectable-objects-setting">
      <title>Controlling data display in the DbExplorer</title>
      <para>Property: <literal>workbench.db.objecttype.selectable.<link linkend="dbid">[dbid]</link>=value1,value2,...</literal></para>
      <para>
				The DbExplorer makes the "data" tab available based on the type of the selected object
				in the object list (second column). If the type returned by the JDBC driver
				is one of the types listed in this property, &wb-productname; assumes that
				it can issue a <literal>SELECT * FROM</literal> to retrieve data from that object.
      </para>
      <para>Default values:
        <simplelist columns="1">
          <member><literal>.defaultt=view,table,system view,system table</literal></member>
          <member><literal>.postgres=view,table,system view,system table,sequence</literal></member>
          <member><literal>.rdb=view,table,system,system view</literal></member>
        </simplelist>
				The values in this property are not case-sensitiv (TABLE is the same as table)
      </para>
    </simplesect>

		<simplesect id="dbexplorer-focus">
			<title>Customizing the SELECT to be used for the data tab</title>
			<para>
				You can customize the generated SELECT that is used to display the table
				data depending on the column type. Please refer to the 
				<link linkend="customize-dbexplorer-retrieval">DbExplorer chapter</link> for details.
			</para>
		</simplesect>

		<simplesect id="dbexplorer-searchable-types">
			<title>Customizing columns that can be searched</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.datatypes.searchable</literal></para>
			<para>
        <link linkend="search-table-data">DbExplorer's "Search table data"</link> feature only includes
        columns with the datatypes <literal>CHAR</literal> and <literal>VARCHAR</literal>
        into the WHERE clause for searching.
			</para>
      <para>
        Some database systems allow CLOB columns to be searched using a <literal>LIKE</literal> expression
        as well. This property can be used to list all datatypes that can be used in a <literal>LIKE</literal>
        condition.
      </para>
      <para>Default values:
        <simplelist columns="1">
          <member>For postgres: <literal>text</literal></member>
          <member>For MySQL: <literal>longtext,tinytext,mediumtext</literal></member>
        </simplelist>
      </para>
    </simplesect>


	</section>

	<!--
  <section id="settings-sorting">

    <title>Controlling sorting of data</title>
		<para>
			When you sort data in the result set (by clicking on the column header) this 
			is performed using Java built-in comparisons. For performance reasons the sorting
			of character values (Strings) is done based on the ASCII value of the characters which
			results in a case-sensitive sorting. Another disadvantage of this method is, that 
			non-ascii characters might not be sorted correctly either. 
		</para>  
		<para>
			The sorting of character values can be influenced with three different settings
			in <literal>workbench.settings</literal> that control the collation to be used.
			The first property enables the usage of a country and language aware collation 
			sequence, the other two properties control the language and the country to 
			be used for the collator. 
		</para>  
	
		<simplesect id="sorting-use-collator">
      <title>Using language aware collations for sorting</title>
      <para>Property: <literal>workbench.sort.usecollator</literal></para>
      <para>
      	When you sort the result set, characters values will be sorted case-sensitiv by default.
      	This is caused by the <literal>compareTo()</literal> method available in the Java
      	environment which puts lower case characters in front of upper case characters when sorting.
				When setting <literal>workbench.sort.usecollator</literal> to <literal>true</literal> a 
				language sensitive comparison is used to sort character values, that will treat lowercase
				and uppercase letters the same during sorting. As the policy on how special characters 
				are sorted is different for each language, you can also define the language and country
				that should be used when initializing these sorting rules. 
      </para>
      <para>Default value: false</para>
    </simplesect>

		<simplesect id="sorting-sort-language">
      <title>Sort language</title>
      <para>Property: <literal>workbench.sort.language</literal></para>
      <para>
        If you want to use a language/country specific collation sequence, 
        this property defines the sort language to be used.
      </para>
      <para>Default value: en</para>
    </simplesect>

		<simplesect id="sorting-sort-country">
      <title>Sort country</title>
      <para>Property: <literal>workbench.sort.country</literal></para>
      <para>
        If you want to use a language/country specific collation sequence, 
        this property defines the sort country to be used when setting up 
        the collation sequence.
      </para>
      <para>Default value: The country defined by your operating system</para>
    </simplesect>
    
  </section>
	-->
  
  <section id="settings-db">
    <title>Database related settings</title>
		
    <simplesect id="manual-setting-datapumper-autoconnect">
      <title>Automatically connect the DataPumper</title>
      <para>Property: <literal>workbench.datapumper.autoconnect</literal></para>
      <para>
				When opening the <link linkend="data-pumper">DataPumper</link> it will
				connect to the current profile as the source connection. If you do not want the DataPumper to
				connect automatically set this property to <literal>false</literal>
      </para>
      <para>Default: <literal>true</literal></para>
    </simplesect>

    <simplesect id="db-settings-ddl-commit">
      <title>Controlling COMMIT for DDL statements</title>
      <para>Property <literal>workbench.db.<link linkend="dbid">[dbid]</link>.ddlneedscommit</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
      <para>
				Defines if the DBMS supports transactional DDL (CREATE TABLE, DROP TABLE, ...)
      </para>
      <para>Default: <literal>false</literal></para>
    </simplesect>
          
    <simplesect id="db-settings-commit">
      <title>COMMIT/ROLLBACK behaviour</title>
      <para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.usejdbccommit</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
      <para>
				Some DBMS return an error when <literal>COMMIT</literal> or <literal>ROLLBACK</literal> is sent as
				a regular command through the JDBC interface. If the DBMS is listed here,
				the JDBC functions <literal>commit()</literal> or <literal>rollback()</literal> will
				be used instead.
      </para>
      <para>Default: <literal>false</literal></para>
    </simplesect>

    <simplesect id="db-settings-constraint-gen">
      <title>Generating constraints for SQL source</title>
      <para>Property: <literal>workbench.db.inlineconstraints</literal></para>
      <para>
				This setting controls the generation of the <literal>CREATE TABLE</literal>
				source in the <link linkend="dbexplorer">DbExplorer</link>. This is a comma separated
				list of <link linkend="dbms-identifier">Database Identifiers</link> that only support defining
				primary and foreign keys inside the <literal>CREATE TABLE</literal> statement.
      </para>
			<para>
				If a DBMS is not listed here, the table constraints will be re-created using
				 <literal>ALTER TABLE</literal>.
			</para>
      <para>Default: <literal>FirstSQL/J</literal></para>
    </simplesect>

    <simplesect id="db-settings-case-sensitiv">
      <title>Case sensitivity when comparing values</title>
      <para>Property <literal>workbench.db.<link linkend="dbid">[dbid]</link>.casesensitive</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
      <para>
				The search panel of the DbExplorer highlights matching values in the result
				tables. The highlighter needs to know whether string comparisons in the database
				are case sensitive in order to highlight the correct values.
      </para>
      <para>Default: <literal>false</literal></para>
    </simplesect>
		
    <simplesect id="db-settings-updatingcommands">
      <title>Definining SQL commands that may change the database</title>
      <para>Property: <literal>workbench.db.updatingcommands</literal> for general SQL statements</para>
      <para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.updatingcommands</literal> for DBMS specific update statements</para>
      <para>
				When enabling the <link linkend="profile-readonly">read only</link> or <link linkend="profile-confirm-updates">confirm update</link>
				option in a connection profile, &wb-productname; assumes a default set of SQL commands that 
				will change the database. With this property you can add additional keywords that 
				should be considered as "updating commands". This is a comma separated list of keywords. 
				The keywords may not contain whitespace.
      </para>
      <para>No default</para>
    </simplesect>

		<simplesect id="db-settings-switch-catalog">
      <title>Database switch in DbExplorer</title>
      <para>Property: <literal>workbench.dbexplorer.switchcatalog</literal></para>
      <para>
				When connected to a DBMS that supports multiple databases (catalogs) for the 
				same connection, the DbExplorer displays a dropdown list with the available 
				databases. Switching the selected catalog in the dropdown will trigger a switch 
				of the current catalog/database if the DbExplorer uses 
				its <link linkend="profile-separate-connection">own connection</link>.
				If you do not want to switch the database, but merely apply the new
				selection as a filter (which is always done, if the DbExplorer shares the connection
				with the other SQL panels) set this property to <literal>false</literal>.
      </para>
      <para>Default: <literal>true</literal></para>
    </simplesect>

		<simplesect id="db-settings-filter-tables">
			<title>Filtering tables</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.exclude.tables</literal></para>
			<para>
				Whenever &wb-productname; retrieves a list of tables (e.g. the DbExplorer, 
				auto completion, <link linkend="command-schema-report">WbSchemaReport</link>)
				certain tables can be filtered out by supplying a regular expression in 
				this property. The default setting will filter Oracle tables that reside
				in the "Recycle bin". This setting can be applied on a per DBMS basis
			</para>
			<para>
				Default value: <literal>workbench.db.oracle.exclude.tables=^BIN\\$.*</literal>
			</para>
			<para>Note that you need to use two backslashes in the RegeEx.</para>
		</simplesect>
		
		<simplesect id="db-oracle-filter-syns">
			<title>Filtering synonyms</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.exclude.synonyms</literal></para>
			<para>
				The <link linkend="dbexplorer">database explorer</link> and the 
				<link linkend="command-completion">auto completion</link> can display (Oracle public) synonyms. 
				Some of these are usually not of interest to the end user. Therefor the
				list of displayed synonyms can be controlled. This property defines
				a regular expression. Each synonym that matches this regular expression, 
				will be excluded from the list presented in the GUI.
			</para>
			<para>Default value (for Oracle): <literal>^AQ\\$.*|^MGMT\\$.*|^GV\\$.*|^EXF\\$.*|^KU\\$_.*|^WM\\$.*|^MRV_.*|^CWM_.*|^CWM2_.*|^WK\\$_.*|^CTX_.*</literal></para>
			<para>Note that you need to use two backslashes in the RegeEx.</para>
		</simplesect>

		<simplesect id="db-oracle-detect-snapshots">
			<title>Support for Oracle materialized views (snapshots)</title>
			<para>Property: <literal>workbench.db.oracle.detectsnapshots</literal></para>
			<para>
				When displaying the list of tables in the <link linkend="dbexplorer">database explorer</link> 
				Oracle materialized views (snapshots) are identified as tables by the Oracle JDBC driver.
				To identify a specific "table" as a materialized view, a second request to the database
				is necessary (accessing the system view <literal>ALL_MVIEWS</literal>). As this 
				request can slow down the retrieval performance, this feature can be turned off. If for
				any reason the <literal>ALL_MVIEWS</literal> view cannot be accessed, this feature
				will be turned off until you re-connect to the database.
			</para>
			<para>Default value: <literal>true</literal></para>
		</simplesect>

		<simplesect id="db-oracle-char-semantics-fix">
		  <title>Fix type display for VARCHAR columns in Oracle</title>
		  <para>Property: <literal>workbench.db.oracle.fixcharsemantics</literal></para>
		  <para>
			  The Oracle driver does not report the size of VARCHAR2 columns correctly
			  if the character semantic has been set to "char". The JDBC driver always returns
			  the length in bytes.
			  When this property is set to true, the length for those columns will 
			  be displayed correctly in the DbExplorer. As this means &wb-productname;
			  is using it's own query to retrieve the table definition, this might not 
			  always yield the same results as the original statement from the Oracle driver.
			  If your table definitions are not displayed correcly, set this value
			  to <literal>false</literal> so that the original driver methods are used.
			  The statement used by &wb-productname; is a bit faster then then original
			  Oracle statement, as it does not use a <literal>LIKE</literal> predicate
			  (which is required to comply with the JDBC specs).
		  </para>
		  <para>Default value: <literal>true</literal></para>
		</simplesect>

		<simplesect id="db-oracle-nvarchar-fix">
		  <title>Fix type display for NVARCHAR2 columns in Oracle</title>
		  <para>Property: <literal>workbench.db.oracle.fixnvarchartype</literal></para>
		  <para>
			  The Oracle driver does not report the type of NVARCHAR2 columns correctly. They
				are returned as Types.OTHER. If this property is enabled, than &wb-productname; 
				is also using it's own SELECT statement to retrieve the table definition.
		  </para>
		  <para>Default value: <literal>true</literal></para>
		</simplesect>
		
		<simplesect id="settings-libdir">
		  <title>Defining a base directory for JDBC libraries</title>
		  <para>Property: <literal>workbench.libdir</literal></para>
		  <para>
				A directory that contains the .jar files for the <link linkend="jdbc-lib-dir">JDBC drivers</link>. 
				The value of this property can be referenced using <literal>%LibDir%</literal> 
				in the driver's definition. The value for this can also be specified
				<link linkend="cmdline-parameter-libdir">on the commandline</link>.
		  </para>
		  <para>No default</para>
		</simplesect>
		
		<simplesect id="settings-date-keywords">
			<title>Defining keywords for date or timestamp input</title>
			<para>Property: <literal>workbench.db.keyword.current_date</literal></para>
			<para>
				The "literals" that are accepted for DATE columns to identify 
				the current date. Default values are <literal>current_date, today</literal>
			</para>

			<para>Property: <literal>workbench.db.keyword.current_timestamp</literal></para>
			<para>
				The "literals" that are accepted for TIMESTAMP columns to identify 
				the current date/time. Default values are <literal>current_timestamp,sysdate,systimestamp</literal>
			</para>
			
			<para>Property: <literal>workbench.db.keyword.current_time</literal></para>
			<para>
				The "literals" that are accepted for TIME columns to identify 
				the current time. Default values are <literal>current_time, now</literal>
			</para>
		</simplesect>

		<simplesect id="db-dml-savepoint">
			<title>Use Savepoints to guard DML statement execution</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.sql.usesavepoint</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				Some DBMS (such as PostgreSQL) cannot continue inside a transaction
				when an error occurs. A script with multiple DML statements can therefor
				not run completely if one statement fails, even if you choose to ignore
				the error.
				If this property is set to true, &wb-productname; will set a savepoint
				before executing a DML statement (<literal>SELECT, INSERT</literal>.
				In case of an error the savepoint will be rolled back and the transaction can continue.
			</para>
			<para>Default value: <literal>false</literal></para>
		</simplesect>

		<simplesect id="db-ddl-savepoint">
			<title>Use Savepoints to guard DDL statement execution</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.ddl.usesavepoint</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				Some DBMS (such as PostgreSQL) cannot continue inside a transaction
				when an error occurs. A script with multiple DDL statements can therefor
				not run completely if one statement fails, even if you choose to ignore
				the error.
				If this property is set to true, &wb-productname; will set a savepoint 
				before executing a DDL statement. In case of an error the savepoint
				will be rolled back and the transaction can continue.
			</para>
			<para>Default value: <literal>false</literal></para>
		</simplesect>

		<simplesect id="db-import-savepoint">
			<title>Use Savepoints for <literal>update/insert</literal> mode for WbImport</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.import.usesavepoint</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				Some DBMS (such as PostgreSQL) cannot continue inside a transaction
				when an error occurs. When running WbImport in <literal>update,insert</literal>
				or <literal>insert,update</literal> mode, the first of the two statements
				needs to be rolled back in order to be able to continue the import. 
				If this property is set to true, &wb-productname; will set a savepoint 
				before executing the first (insert or update) statement. In case of an error the savepoint
				will be rolledback and WbImport will try to execute the second statement.
			</para>
			<para>Default value: <literal>false</literal></para>
		</simplesect>

		<simplesect id="db-ignore-read-errors">
			<title>Ignore errors during data retrieval</title>
			<para>Property: <literal>workbench.db.ignore.readerror</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				When retrieving data (e.g. using a <literal>SELECT</literal> statement) 
				errors that are reported by the driver will be displayed to the user. 
				The retrieval will be terminated. If you want to ignore errors and replace
				the data that could not be retrieved with a <literal>NULL</literal> value,
				set this property to <literal>true</literal>.
			</para>
			<para>
				Using this parameter is not recommended as it might produce results
				that do not reflect the data as it is stored in the database.
			</para>
			<para>Default value: <literal>false</literal></para>
		</simplesect>

		<simplesect id="db-custom-type-map">
			<title>Customizing data type mapping</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.typemap</literal></para>
			<para>
				When using the <literal>-createTarget</literal> parameter for
				<link linkend="command-copy">WbCopy</link>, the type mapping from the JDBC driver might
				not be sufficient or correct. With this setting you can define your own type mapping
				for a specific dbms. The entry is a list of mappings that map the numeric value
				of a JDBC datatype (as defined in <ulink url="http://java.sun.com/j2se/1.5.0/docs/api/java/sql/Types.html">java.sql.Types</ulink>)
				to a real data type name for the DBMS. The numeric JDBC datatype value and the
				DBMS specific datatype name are separated with a colon. Each pair is separated
				by a semicolon.
			</para>

			<para>
				The following entry maps the JDBC datatype with the value 3 (NUMERIC) to the target
				datatype <literal>double</literal> and the value 2 (BIGINT) to the target
				type NUMBER. The NUMBER datatypes needs uses two parameter placeholders
				<literal>$size</literal> and <literal>$digits</literal>. The last mapping
				maps the JDBC value -1 (LONGVARCHAR) to the DBMS type <literal>VARCHAR</literal>
				using only the <literal>$size</literal> parameter
			</para>
			<programlisting>workbench.db.[some_db].typemap=3:DOUBLE;2:NUMBER($size,$digits);-1:VARCHAR($size)</programlisting>
			<para>
				JDBC 3.0 defines the following constants:
				<itemizedlist spacing="compact">
					<listitem>BIGINT = -5</listitem>
					<listitem>BINARY = -2</listitem>
					<listitem>BIT = -7</listitem>
					<listitem>BLOB = 2004</listitem>
					<listitem>BOOLEAN = 16</listitem>
					<listitem>CHAR = 1</listitem>
					<listitem>CLOB = 2005</listitem>
					<listitem>DATE = 91</listitem>
					<listitem>DECIMAL = 3</listitem>
					<listitem>DOUBLE = 8</listitem>
					<listitem>FLOAT = 6</listitem>
					<listitem>INTEGER = 4</listitem>
					<listitem>LONGVARBINARY = -4</listitem>
					<listitem>LONGVARCHAR = -1</listitem>
					<listitem>NUMERIC = 2</listitem>
					<listitem>REAL = 7</listitem>
					<listitem>SMALLINT = 5</listitem>
					<listitem>TIME = 92</listitem>
					<listitem>TIMESTAMP = 93</listitem>
					<listitem>TINYINT = -6</listitem>
					<listitem>VARBINARY = -3</listitem>
					<listitem>VARCHAR = 12</listitem>
				</itemizedlist>
			</para>
		</simplesect>
		
  </section>
			
  <section id="sql-execution-settings">
    <title>SQL Execution related settings</title>
    <simplesect id="options-max-script-size">
      <title>Maximum script size for in-memory script execution</title>
      <para>Property: <literal>workbench.sql.script.inmemory.maxsize</literal></para>
      <para>
				This setting controls the size up to which files that are executed in batch
				mode or via the <link linkend="command-wbinclude">WbInclude</link> command
				are read into memory. Files exceeding this size are not read into memory
				but processed statement by statement. When a file is not read into memory
				the automatic detection of the <link linkend="options-alternate-delimiter">alternate delimiter</link>
				does not work any longer. The size is given in bytes.
      </para>
      <para>Default: <literal>1048576</literal></para>
    </simplesect>

    <simplesect id="settings-ignore-commands">
      <title>Ignoring certain SQL commands</title>
      <para>Property: <literal>workbench.db.ignore.<link linkend="dbid">[dbid]</link></literal></para>
      <para>
				For a DBMS identifier you can define a list of commands
				that are simply ignored by &wb-productname;. This is useful e.g. for Oracle,
				when you want to run scripts that are intended for SQL*Plus. If those scripts
				contain special SQL*Plus commands (that are not understood by the Oracle server
				as SQL*Plus executes these commands directly) they would fail in &wb-productname;.
				If those commands are simply ignored and not send to the server, the scripts
				can run without modification.
      </para>
      <para>Default: <literal>workbench.db.ignore.oracle=prompt,exit,whenever</literal></para>
    </simplesect>
	
		<simplesect id="options-enable-shortinclude">
			<title>Enabling short WbInclude</title>
			<para>Property: <literal>workbench.db.supportshortinclude</literal></para>
			<para>
				By default the <link linkend="command-wbinclude">WbInclude</link> command
				can be shortened using the @ sign. This behaviour is disabled for MS SQL to 
				avoid conflicts with parameter definitions in stored procedures. This property
				contains a list of <link linkend="dbid"><literal>DBID</literal>s</link> for which
				this should be enabled. To enable this for all DBMS, simply use * as the value for
				this property.
			</para>
			<para>Default: <literal>oracle, rdb, hsqldb, postgresql, mysql, adaptive_server_anywhere, cloudscape, apache_derby</literal></para>
		</simplesect>

		<simplesect id="options-check-single-line-commands">
			<title>Check for single line commands without delimiter</title>
			<para>Property: <literal>workbench.db.checksinglelinecmd</literal></para>
			<para>
				When parsing a SQL script, &wb-productname; supports statements that 
				are put into a single line without a delimiter. This is primarily intended
				for compatibility with Oracle's SQL*Plus and is not enabled for other
				database systems.
			</para>
			<para>Default: <literal>oracle</literal></para>
		</simplesect>

  </section>
	
	<section id="import-export-default">
		<title>Default settings for Export/Import</title>

		<para>
			For some switches of the WbExport and WbImport command, you can override
			the default values used by &wb-productname; in case you do not provide  the parameter.
			The default values mentioned in this chapter apply, if no property is defined
			in the <literal>workbench.settings</literal> file. The current default for
			these properties is displayed in the help message when you run the 
			corresponding command without any parameters.
		</para>
		
		<simplesect id="export-text-header-default">
			<title>Controlling header lines in text exports</title>
			<para>Property: <literal>workbench.export.text.default.header</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls whether default value for the <literal>-header</literal>
				parameter of the <link linkend="command-export">WbExport</link> command. 
			</para>
			<para>Default: <literal>false</literal></para>
		</simplesect>

		<simplesect id="export-xml-verbose">
			<title>Controlling XML export format</title>
			<para>Property: <literal>workbench.export.xml.default.verbose</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls whether XML exports are done using verbose XML or 
				short tags and only basic formatting. This property sets the default 
				value of the <literal>-verbosexml</literal> parameter for the <link linkend="command-export">WbExport</link> command. 
			</para>
			<para>Default: <literal>true</literal></para>
		</simplesect>
		
		<simplesect id="import-continue-default">
			<title>Setting default for WbImport's -continueOnError parameter</title>
			<para>Property: <literal>workbench.import.default.continue</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls the default value for the parameter <literal>-continueOnError</literal>
				of the <link linkend="command-import">WbImport</link> command. 
			</para>
			<para>Default: <literal>false</literal></para>
		</simplesect>

		<simplesect id="import-header-default">
			<title>Setting a default for WbImport's -header parameter</title>
			<para>Property: <literal>workbench.import.default.header</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls the default value for the parameter <literal>-header</literal>
				of the <link linkend="command-import">WbImport</link> command. 
			</para>
			<para>Default: <literal>true</literal></para>
		</simplesect>
		
		<simplesect id="import-text-multiline">
			<title>Setting a default for WbImport's -multiLine parameter</title>
			<para>Property: <literal>workbench.import.default.multilinerecord</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls the default value for the parameter <literal>-multiLine</literal>
				of the <link linkend="command-import">WbImport</link> command. 
			</para>
			<para>Default: <literal>false</literal></para>
		</simplesect>

		<simplesect id="import-text-trimvalues">
			<title>Setting a default for WbImport's -trimValues parameter</title>
			<para>Property: <literal>workbench.import.default.trimvalues</literal></para>
			<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
			<para>
				This property controls the default value for the parameter <literal>-trimValues</literal>
				of the <link linkend="command-import">WbImport</link> command. 
			</para>
			<para>Default: <literal>false</literal></para>
		</simplesect>
		
	</section>
	
  <section id="log-setting">
    <title>Controlling the log file</title>
    <simplesect id="settings-log-level">
      <title>Log level</title>
      <para>Property: <literal>workbench.log.level</literal></para>
      <para>Set the log level for the log file. Valid values are
        <itemizedlist spacing="compact">
          <listitem><para>DEBUG</para></listitem>
          <listitem><para>INFO</para></listitem>
          <listitem><para>WARN</para></listitem>
          <listitem><para>ERROR</para></listitem>
        </itemizedlist>
      </para>
      <para>Default: <literal>INFO</literal></para>
    </simplesect>

    <simplesect id="settings-log-format">
      <title>Log format</title>
      <para>Property: <literal>workbench.log.format</literal></para>
      <para>Define the format of the log messages. The following placeholders are supported:
        <itemizedlist spacing="compact">
          <listitem><para>{type}</para></listitem>
          <listitem><para>{timestamp}</para></listitem>
          <listitem><para>{message}</para></listitem>
          <listitem><para>{error}</para></listitem>
          <listitem><para>{source}</para></listitem>
          <listitem><para>{stacktrace}</para></listitem>
        </itemizedlist>
				The order of the placeholders defines the order in the log file, except
				for the stacktrace which will always be printed after the message.
				If the log level is set to debug, the stacktrace will always be displayed
				even if it is not included in the format string.
      </para>
      <para>Default: <literal>{type} {timestamp} {message} {error}</literal></para>
    </simplesect>

    <simplesect id="options-log-console">
      <title>Logging to the console</title>
      <para>Property: <literal>workbench.log.console</literal></para>
      <para>Defines whether &wb-productname; logs messages additionally to the standard error output
      </para>
      <para>Default: <literal>false</literal></para>
    </simplesect>
					
    <simplesect id="settings-log-metadata">
			<title>Logging SQL used for retrieving metadata</title>
			<para>Property: <literal>workbench.dbmetadata.logsql</literal></para>
			<para>
				If this is set to <literal>true</literal> the SQL queries used to
				retrieve DBMS specific meta data (such as view/procedure/trigger source,
				defined triggers/views) will be logged with level INFO.
			</para>
			<para>
				This can be used to debug customized SQL statements
				for DBMS's which are not (yet) preconfigured.
			</para>
			<para>Default: <literal>false</literal></para>
    </simplesect>

  </section>

  <section id="setting-sql-generation">
    <title>Settings related to SQL statement generation</title>
		      
    <simplesect id="settings-db-ignoreschema">
			<title>Controlling schema usage in generated SQL statements</title>
			<para>Property: <literal>workbench.sql.ignoreschema.<link linkend="dbid">[dbid]</link>=schema1,...</literal></para>
			<para>
				Define a list of schemas that should be ignored for the <link linkend="dbid">DB ID</link>
				When &wb-productname; creates DML statements and the current table is reported
				to belong to any of the schemas listed in this property, the schema will not
				be used to qualify the table. To ignore all schemas use a *, e.g.
				<literal>workbench.sql.ignoreschema.rdb=*</literal>. In this case, table names
				will never be prefixed with the schema name reported by the JDBC driver.
				The values specified in this property are case sensitiv.
			</para>
			<para>
				Note that for Oracle, tables that are owned by the current user will never 
				be prefixed with the owner.
			</para>
			<para>
				Default values:
				<simplelist columns="1">
					<member><literal>.oracle=PUBLIC</literal></member>
					<member><literal>.postgres=public</literal></member>
					<member><literal>.rdb=*</literal></member>
				</simplelist>
			</para>
    </simplesect>

    <simplesect id="manual-setting-system-names">
			<title>System generated names for contraints</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.constraints.systemname</literal></para>
			<para>
				Defines a regular expression to identify system generated constraint names.
				If a constraint name is identified as beeing system generated, it is treated
				as if no name was defined, when e.g. creating the SQL for a table. 
				Whether or not &wb-productname; then generates a name for the constraint can 
				be controlled in the options for the <link linkend="dbexp-options-gen-pk">DbExplorer</link>.
			</para>
      <para>Default values:
        <simplelist columns="1">
          <member>oracle: <literal>^SYS_.*</literal></member>
          <member>mysql: <literal>PRIMARY</literal></member>
        </simplelist>
      </para>
    </simplesect>

    <simplesect id="settings-sync-chunk-size">
			<title>Controlling the chunk size for WbDataDiff</title>
			<para>Property: <literal>workbench.sql.sync.chunksize</literal></para>
			<para>
				Controls the number of rows that are retrieved from the target table
				when running <link linkend="command-data-diff"><literal>WbDataDiff</literal></link> 
				or <link linkend="copy-sync-delete"><literal>WbCopy</literal></link> with the 
				<literal>-syncDelete=true</literal> parameter.
			</para>
			<para>Default value: <literal>25</literal></para>
    </simplesect>
		
  </section>

  <section id="settings-table-source-retrieval">
    <title>Customize table source retrieval</title>
    <para>
      &wb-productname; re-generates the source of a table based on the information
      about the table's metadata returned by the driver. In some cases the driver might
      not return the correct information, or not all the information that is necessary
      to build the correct syntax for the DBMS. In those cases, a SQL query can be configured
      that can use the built-in functionality of the DBMS to return a table's definition.
    </para>
    <para>
      This DBMS specific retrieval of the table source is defined by two properties in
      <literal>workbench.settings</literal>.
    </para>

    <simplesect id="settings-table-source-query">
			<title>Defining the SQL statement</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.retrieve.create.table.query</literal></para>
			<para>
        This property defines the SQL query that should be executed. It must be a statement that
        returns a result set. The statement may contain three placeholders: <literal>%catalog%</literal>,
        <literal>%schema%</literal> and <literal>%tablename%</literal> that are replaced with the values of
        the actual table before running the statement.
			</para>
    </simplesect>

    <simplesect id="settings-table-source-colindex">
			<title>Defining the result column</title>
			<para>Property: <literal>workbench.db.<link linkend="dbid">[dbid]</link>.retrieve.create.table.sourcecol</literal></para>
			<para>
        The source of the table might not be returned in the first column of the result set. If this
        is the case this property can be used to define the column index in which the table's source
        is available. The first column has the index 1.
			</para>
    </simplesect>

    <para>
      The following example configures a SQL statement to retrieve the table's source using MySQL's
      "SHOW CREATE TABLE":
    </para>
    <programlisting>workbench.db.mysql.retrieve.create.table.query=show create table %catalog%.%tablename%
workbench.db.mysql.retrieve.create.table.sourcecol=2</programlisting>

    <para>
      If an error occurs during retrieval, &wb-productname; will revert to the built-in table
      source generation.
    </para>
  </section>
	
	<section id="filter-settings">
		<title>Filter settings</title>
		
		<simplesect id="filter-picklist-size">
			<title>Controlling the number of items in the pick list</title>
			<para>Property: <literal>workbench.gui.filter.mru.maxsize</literal></para>
			<para>
				When saving a filter to an external file, the pick list next to the filter
				icon will offer a drop down that contains the most recently used filter definitions.
				This setting will control the maximum size of that dropdown.
			</para>
			<para>Default value: <literal>15</literal></para>
		</simplesect>
		
	</section>
			
</section>
