<section id="understand-alternate-delim">
  <title>Creating stored procedures and triggers</title>
  <indexterm><primary>DDL</primary><secondary>Execute DDL statements</secondary></indexterm>
  <indexterm><primary>Stored procedures</primary><secondary>create stored procedure</secondary></indexterm>
  <indexterm><primary>Triggers</primary><secondary>create trigger</secondary></indexterm>
  <indexterm><primary>SQL</primary><secondary>change the statement delimiter</secondary></indexterm>
  <indexterm><primary>Statement delimiter</primary><secondary>change the statement delimiter</secondary></indexterm>

  <para>
    &wb-productname; will send the contents of the editor unaltered to the DBMS, so
    executing DDL statements (<literal>CREATE TABLE</literal>, ...) is possible.
  </para>

  <para>
    However when executing statements such as <literal>CREATE PROCEDURE</literal> which
    in turn contain valid SQL statement, delimited with a ; the &wb-productname;
    will send everything up to the first semicolon to the
    backend. In case of a <literal>CREATE PROCEDURE</literal> statement this will obviously
    result in an error as the statement is not complete.
  </para>

  <para>
    This is an example of a <literal>CREATE PROCEDURE</literal> which will
    <emphasis role="bold">not</emphasis> work due to the embedded semicolon in
    the procedure source itself.
  </para>
  <programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
result INTEGER;
BEGIN
  SELECT max(col1) INTO result FROM sometable;
  RETURN result;
END;</programlisting>

  <para>
    When executing this script, Oracle would return an error because &wb-productname; will
    send everything up to the keyword <literal>INTEGER</literal> to the database. Obviously that
    fragment would not be correct.
  </para>

  <para>
    The solution is to terminate the script with a character sequence that is called the "<link linkend="profile-alternate-delimiter">alternate delimiter</link>"
    which can be defined in the connection profile.
  </para>

  <para>
    If a SQL statement is terminated with the alternate delimiter on a single line,
    that delimiter is used instead of a semicolon. This way the semicolons embedded in
    <literal>CREATE PROCEDURE</literal> statements will be sent correctly to the backend
    DBMS.
  </para>

  <para>The script needs to be written like this:</para>
  <programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
result INTEGER;
BEGIN
  SELECT max(col1) INTO result FROM sometable;
  RETURN result;
END;
/</programlisting>

  <para>
    Note the trailing forward slash (<literal>/</literal>) at the end in order to "turn on" the
    use of the alternate delimiter. If you run scripts with embedded semicolons and you get
    an error, please verify the setting for your alternate delimiter.
  </para>

  <note>
  <para>
    The alternate delimiter is not needed when using PostgreSQL because the function's body is
    effectively a string literal and delimiters inside string literals are not relevant for splitting
    a script into several statements.
  </para>
  </note>

  <para id="alternate-delimiter-usage"><emphasis role="bold">When is the alternate delimiter used?</emphasis></para>

	<para>
		When using Oracle, the standard delimiter (the semicolon) and the alternate delimiter
		can be mixed in a single script. Whenever a PL/SQL block (either a stored procedure or
		an anonymous block) is encountered, &wb-productname; expects the alternated delimiter to
		terminate that block. This follows essentially the
		same rules <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_four.htm#i1039663">as used in SQL*Plus</ulink>.
	</para>
  <para>
		For all other DBMS, the use of the alternate delimiter is defined by the
		last delimiter used in the script. As soon as the statement (or script) that you
		execute ends with the alternate delimiter, the alternate delimiter
		is used to separate all SQL statements. When you execute selected
		text from the editor, be sure to select the alternate delimiter as well, otherwise it will not be
    recognized (if the alternate delimiter is not selected, the statement to be executed
    does not end with the alternate delimiter).
  </para>

  <para>
    Currently there is no possibility to change the alternate delimiter dynamically inside a SQL script through a SQL command.
  </para>
</section>
