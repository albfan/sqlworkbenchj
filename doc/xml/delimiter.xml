<section id="understand-alternate-delim">
  <title>Creating stored procedures and triggers</title>
  <indexterm><primary>DDL</primary><secondary>Execute DDL statements</secondary></indexterm>
  <indexterm><primary>Stored procedures</primary><secondary>create stored procedure</secondary></indexterm>
  <indexterm><primary>Triggers</primary><secondary>create trigger</secondary></indexterm>
  <indexterm><primary>SQL</primary><secondary>change the statement delimiter</secondary></indexterm>
  <indexterm><primary>Statement delimiter</primary><secondary>change the statement delimiter</secondary></indexterm>

  <para>
    &wb-productname; will send the contents of the editor unaltered to the DBMS, so
    executing DDL statements (<literal>CREATE TABLE</literal>, ...) is possible.
  </para>

  <para>
    However when executing statements such as <literal>CREATE PROCEDURE</literal> which
    in turn contain valid SQL statement, delimited with a ; the &wb-productname;
    will send everything up to the first semicolon to the  backend. In case of a <literal>CREATE PROCEDURE</literal> statement this will obviously
    result in an error as the statement is not complete.
  </para>

  <section id="delimiter-postgres">
    <title>PostgreSQL</title>
    <para>
      The body of a function in Postgres is a character literal. Because a delimiter inside
      a character literal does not delimit the statement, no special treatment is needed for Postgres.
    </para>
  </section>

  <section id="delimiter-oracle">
    <title>Oracle PL/SQL</title>
    <para>
      This is an example of a <literal>CREATE PROCEDURE</literal> which will
      <emphasis role="bold">not</emphasis> work due to the embedded semicolon in
      the procedure source itself.
    </para>
    <programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
  l_result INTEGER;
BEGIN
  SELECT max(col1) INTO l_result FROM sometable;
  RETURN l_result;
END;</programlisting>

    <para>
      When executing this script, Oracle would return an error because &wb-productname; will
      send everything up to the keyword <literal>INTEGER</literal> to the database. Obviously that
      fragment would not be correct.
    </para>

    <para>
      The solution is to terminate the script with a character sequence that is called the "<link linkend="profile-alternate-delimiter">alternate delimiter</link>"
      which can be defined in the connection profile. To be compatible with SQL Developer and SQL*Plus it is recommended to set the
      alternate delimiter to a forward slash (<literal>/</literal>).
    </para>

    <para>The script needs to be written like this:</para>
    <programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
  l_result INTEGER;
BEGIN
  SELECT max(col1) INTO l_result FROM sometable;
  RETURN l_result;
END;
/</programlisting>

    <para>
      Note the trailing forward slash (<literal>/</literal>) at the end in order to "turn on" the
      use of the alternate delimiter. If you run scripts with embedded semicolons and you get
      an error, please verify the setting for your alternate delimiter.
    </para>

    <para>
      The standard delimiter (the semicolon) and the alternate delimiter
      can be mixed in a single script. Whenever a PL/SQL block (either a stored procedure or
      an anonymous block) is encountered, &wb-productname; expects the alternated delimiter to
      terminate that block. This follows essentially the same
      rules <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_four.htm#i1039663">as used in SQL*Plus</ulink>.
    </para>

    <para>
      The following script will therefore work when connected to an Oracle database:
    </para>

    <programlisting>drop table sometable cascade constraints;
create table sometable
(
  col1 integer not null
);

create or replace function proc_sample return integer
is
  l_result integer;
begin
  select max(col1) into l_result from sometable;
  return l_result;
end;
/</programlisting>

  </section>

  <section id="delimiter-other">
    <title id="alternate-delimiter-usage">Other DBMS</title>
    <para><emphasis role="bold">When is the alternate delimiter used?</emphasis></para>

    <para>
      For all other DBMS, the use of the alternate delimiter is defined by the last delimiter used in the script.
      As soon as the statement (or script) that you execute ends with the alternate delimiter, the alternate delimiter
      is used to separate all SQL statements. When you execute selected text from the editor, be sure to select the
      alternate delimiter as well, otherwise it will not be recognized (if the alternate delimiter is not selected,
      the statement to be executed does not end with the alternate delimiter).
    </para>

    <para>
      This means a script must use the alternate delimiter for <emphasis role="bold">all</emphasis> statements in the
      script. The following script will not work, because the last statement is terminated with the alternate
      delimiter and thus &wb-productname; assumes <emphasis>all</emphasis> statements are delimited with that.
      As the <literal>CREATE TABLES</literal> statements are delimited with the standard delimiter, they are
      not recognized as a separate statement and thus the script is sent as a single statement to the server.
    </para>
<programlisting>create table orders
(
  order_id    integer not null primary key,
  customer_id integer not null,
  product_id  integer not null,
  pieces      integer not null,
  order_date  date    not null
);

create table orders_audit_log
(
  order_id    integer not null,
  delete_date timestamp not null
);

create trigger orders_audit_log
  for orders
  before delete
as
begin
  insert into audit_log (id, delete_date) values (old.order_id, current_timestamp);
end;
/
</programlisting>

  <para>
    The solution is to terminate <emphasis role="bold">every</emphasis> statement with the alternate delimiter:
  </para>

<programlisting>create table orders
(
  order_id    integer not null primary key,
  customer_id integer not null,
  product_id  integer not null,
  pieces      integer not null,
  order_date  date    not null
)
/

create table orders_audit_log
(
  order_id    integer not null,
  delete_date timestamp not null
)
/

create trigger orders_audit_log
  for orders
  before delete
as
begin
  insert into audit_log (id, delete_date) values (old.order_id, current_timestamp);
end;
/
</programlisting>

  </section>

</section>
