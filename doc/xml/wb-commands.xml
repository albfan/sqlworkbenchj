
<section id="wb-commands">
  <title>Other &wb-productname; specific commands</title>

	<para>
		In addtion to the <link linkend="command-export">WbExport</link>,
		<link linkend="command-import">WbImport</link> and <link linkend="command-copy">WbCopy</link>
		commands, &wb-productname; implements a set of additional SQL commands that are not part
		of the SQL standard. These commands can be used like any other SQL command
		(such as <literal>UPDATE</literal> inside &wb-productname;, i.e. inside the editor
		or as part of a SQL script that is run through &wb-productname; in <link linkend="using-scripting">batch mode</link>.
	</para>

	<para>
		As those commands are implemented by &wb-productname; you will not be able to
		use them when running your SQL scripts using a different client program
		(e.g. <literal>psql</literal>, SQL*Plus or <literal>phpmyadmin</literal>.
	</para>

  <section id="command-schema-report">
    <title>Create a report of the database objects - WbSchemaReport</title>

    <para>
      Creates an XML report of selected tables. This report could be used
      to generate an HTML documentation of the database (e.g. using the <link linkend="command-xslt">XSLT</link>
      command). This report can also be generated from within the <link linkend="dbexplorer">Database Object Explorer</link>
    </para>

    <para>
      The resulting XML file can  be transformed into a HTML documentation of your database schema.
      Sample stylesheets can be downloaded from   <ulink url="http://www.sql-workbench.net/xstl.html"/>.
      If you have XSLT stylsheets that you would like to share, please send them to
      <email>support@sql-workbench.net</email>.
    </para>

    <note><para>
      To see table and column comments with an Oracle database, you need to
      <link linkend="oracle-enable-remarks">enable remarks reporting</link> for the JDBC
      driver, otherwise the driver will not return comments.
    </para></note>

    <para>The command supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
			<colspec colname="c1" colwidth="4cm" />
			<colspec colname="c2" />
			<thead>
				<row>
					<entry>Parameter</entry>
					<entry>Description</entry>
				</row>
			</thead>

			<tbody valign="top">
				<row>
					<entry>-file</entry>
					<entry>The filename of the output file.</entry>
				</row>
				<row>
					<entry>-tables</entry>
					<entry>A (comma separated) list of tables to report. Default is
						all tables. If this parameter is specified <literal>-schemas</literal> is ignored.
						If you want to generate the report on tables from different users/schemas you have
						to use fully qualified names in the list (e.g. <literal>-tables=MY_USER.TABLE1,OTHER_USER.TABLE2</literal>)
						You can also specify wildcards in the table name: <literal>-table=CONTRACT_%</literal> will create
						an XML report for all tables that start with <literal>CONTRACT_</literal>.
					</entry>
				</row>

				<row>
					<entry>-excludeTableNames</entry>
					<entry>
            A (comma separated) list of tables to exclude from reporting. This is only used if
            -tables is also specified. To create a report on all tables, but exclude those that start
            with 'DEV', use <literal>-tables=* -excludeTableNames=DEV*</literal>
					</entry>
				</row>

				<row>
					<entry>-schemas</entry>
					<entry>A (comma separated) list of schemas to generate the report from.
						For each user/schema all tables are included in the report. e.g.
						<literal>-schemas=MY_USER,OTHER_USER</literal> would generate a report
						for all tables in the schemas <literal>MY_USER</literal> and <literal>OTHER_USER</literal>.
					</entry>
				</row>

				<row>
					<entry>-types</entry>
					<entry>A (comma separated) list of object types to include. By default <literal>TABLE</literal>s and
          <literal>VIEW</literal>s are included. To include e.g. <literal>SYSTEM VIEW</literal>s and
          <literal>TEMPORARY TABLE</literal>s, use the following option:
          <literal>-types='TABLE,VIEW,SYSTEM VIEW,TEMPORARY TABLE'</literal>. If you include type names that contain
          a space (or e.g. a dash) you have to quote the whole list, not just the single value.
					</entry>
				</row>

				<row>
					<entry>-includeTables</entry>
					<entry>Control the output of table information for the report. The default is
						<literal>true</literal>. Valid values are <literal>true</literal>, <literal>false</literal>.
					</entry>
				</row>
				<row>
					<entry>-includeTableGrants</entry>
					<entry>If tables are included in the output, the grants for each table can also be included with
						this parameter. The default value is <literal>false</literal>.
					</entry>
				</row>
				<row>
					<entry>-includeProcedures</entry>
					<entry>Control the output of stored procedure information for the report. The default is
						<literal>false</literal>. Valid values are <literal>true</literal>, <literal>false</literal>.
					</entry>
				</row>
				<row>
					<entry>-includeTriggers</entry>
					<entry>
            This parameter controls if table triggers are added to the output.
						The default value is <literal>true</literal>.
					</entry>
				</row>
				<row>
					<entry>-includeSequences</entry>
					<entry>Control the output of sequence information for the report. The default is
						<literal>false</literal>. Valid values are <literal>true</literal>, <literal>false</literal>.
					</entry>
				</row>
				<row>
					<entry>-reportTitle</entry>
					<entry>
						Defines the title for the generated XML file. The specified title is written
						into the tag <literal>&lt;report-title&gt;</literal> and can be used when
						transforming the XML e.g. into a HTML file.
					</entry>
				</row>
				<row>
					<entry>-stylesheet</entry>
					<entry>Apply a XSLT transformation to the generated XML file.</entry>
				</row>
				<row>
					<entry>-xsltOutput</entry>
					<entry>The name of the generated output file when applying the XSLT transformation.</entry>
				</row>
			</tbody>
      </tgroup>
    </informaltable>
  </section>

  <section id="command-search-source">
    <title>Search source of database objects - WbGrepSource</title>
    <para>
      The command <literal>WbGrepSource</literal> can be used to search
      in the source code of the specified database objects.
    </para>
    <para>
      The command basically retrieves the source code for all selected
      objects and does a simple search on that source code.
      The source code that is searched is identical to the source code
      that is displayed in the "Source" tab in the various DbExplorer
      panels.
    </para>
    <para>
      The search values can be regular expressions. When searching the source
      code the specified expression must be found somewhere in the source.
      The regex is <emphasis>not</emphasis> used to match the <emphasis>entire</emphasis>  source.
    </para>

		<para>
			The command supports the following parameters:
		</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-searchValues</entry>
            <entry>
              <para>
                A comma separated list of values to be searched for.
              </para>
            </entry>
          </row>
          <row>
            <entry>-useRegex</entry>
            <entry>
						  <para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
              <para>
                If this parameter is set to true, the values specified with <literal>-searchValues</literal> are
                treated as regular expression
              </para>
              <para>
                The default for this parameter is <literal>false</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-matchAll</entry>
            <entry>
						  <para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
              <para>
                This specifies if all values specified with <literal>-searchValues</literal>
                have to match or only one.
              </para>
              <para>
                The default for this parameter is <literal>false</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-ignoreCase</entry>
            <entry>
						  <para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
              <para>
                When set to true, the comparison is be done case-insesitive ("ARTHUR" will
                match "Arthur" or "arthur").
              </para>
              <para>
                The default for this parameter is <literal>true</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-types</entry>
            <entry>
              <para>
                Specifies if the object types to be searched. The values for this
                parameter are the same as in the "Type" drop down of DbExplorer's
                table list. Additionally the types <literal>function</literal>,
                <literal>procedure</literal> and <literal>trigger</literal> are
                supported.
              </para>
              <para>
                When specifying a type that contains a space, the type name neeeds to be
                enclosed in quotes, e.g. -types="materialized view"
              </para>
              <para>
                The default for this parameter is <literal>view, procedure, function, trigger, materialized view</literal>.
              </para>
              <para>
                To search in all available object types, use <literal>-types=*</literal>
              </para>
            </entry>
          </row>

          <row>
            <entry>-objects</entry>
            <entry>
              <para>
                A list of object names to be searched. These names may contain
                SQL wildcards, e.g. <literal>-objects=PER%,NO%</literal>
              </para>
            </entry>
          </row>

          <row>
            <entry>-schemas</entry>
            <entry>
              <para>
                Specifies a list of schemas to be searched (for DBMS that
                support schemas). If this parameter is not specified the
                current schema is searched.
              </para>
            </entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
    <para>
      The functionality of the <literal>WbGrepSource</literal> command is also
      available through a GUI at
      <menuchoice><guimenu>Tools</guimenu><guimenuitem>Search in object source</guimenuitem></menuchoice>
    </para>
  </section>

  <section id="command-search-data">
    <title>Search data in multiple tables - WbGrepData</title>
    <para>
      The command <literal>WbGrepData</literal> can be used to search
      for occurances of a certain value in all columns of multiple tables.
      It is the commandline version of the (client side) <link linkend="table-search-client">Search Table Data</link> tab
      in the DbExplorer. A more detailed description on how the searching is performed is available that chapter.
    </para>

    <para>
      <important>
        To search the data of a table a <literal>SELECT * FROM the_table</literal> is executed and
        processed on a row by row basis. Although &wb-productname; only keeps one row at a time in memory
        it is possible that the JDBC drivers caches the full result set in memory. Please see the chapter
        <link linkend="troubleshooting">Common problems</link> for your DBMS to check if the JDBC driver you are using
        caches result sets.
      </important>
    </para>
		<para>
			The command supports the following parameters:
		</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-search</entry>
            <entry>
              <para>
                The value to be searched for
              </para>
            </entry>
          </row>
          <row>
            <entry>-ignoreCase</entry>
            <entry>
						  <para>Valid values are <literal>true</literal>, <literal>false</literal>.</para>
              <para>
                When set to true, the comparison is be done case-insesitive ("ARTHUR" will
                match "Arthur" or "arthur").
              </para>
              <para>
                The default for this parameter is <literal>true</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-compareType</entry>
            <entry>
						  <para>
                Valid values are <literal>contains</literal>, <literal>equals</literal>,
                <literal>matches</literal>, <literal>startsWith</literal>
              </para>
              <para>
                When specifying <literal>matches</literal>, the search value
                is used as a regular expression. A column is included in the
                search result if the regular expression is contained in the
                column value (not when the column value matches the regular
                expression entirely!).
              </para>
              <para>
                The default for this parameter is <literal>contains</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-tables</entry>
            <entry>
              <para>
                A list of table names to be searched. These names may contain
                SQL wildcards, e.g. <literal>-tables=PER%,NO%</literal>.
                If you want to search in different schemas, you need to prefix the
                table names, e.g. <literal>-tables=schema1.p%,schema2.n%</literal>.
              </para>
            </entry>
          </row>
          <row>
            <entry>-types</entry>
            <entry>
              <para>
                By default <literal>WbGrepData</literal> will search all
                tables and views (including materialized views). If you want
                to search only one of those types, this can be specified with
                the <literal>-types</literal> parameter. Using <literal>-types=table</literal>
                will only search table data and skip views in the database.
              </para>
            </entry>
          </row>
          <row>
            <entry>-excludeTables</entry>
            <entry>
              <para>
                A list of table names to be excluded from the search. If e.g.
                the wildcard for -tables would select too many tables, you can
                exclude individual tables with this parameter. The parameter values
                may include SQL wildcards.
              </para>
              <para>
                <literal>-tables=p% -excludeTables=product_details,product_images</literal>
                would process all tables starting with P but not the <literal>product_detail</literal>
                and the <literal>product_images</literal> tables.
              </para>
            </entry>
          </row>
          <row>
            <entry>-excludeLobs</entry>
            <entry>
              <para>
                If this parameter is set to true, CLOB and BLOB columns will
                not be retrieved at all, which is useful if you retrieve a lot
                of rows from tables with columns of those type to reduce the memory
                that is needed.
              </para>
              <para>
                If this switch is set to <literal>true</literal> the content of CLOB columns will not be searched.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section id="command-vardef">
    <title>Define a script variable - WbVarDef</title>

    <para>
      This defines an internal variable which is used for variable substitution during
      SQL execution. Details can be found in the chapter <xref linkend="using-variables"/>.
    </para>
    <para>The syntax for defining a variable is: <literal>WbVarDef variable=value</literal></para>
    <para>The variable definition can also be read from a file. The file should list
      each variable definition on one line (this is the format of a normal Java properties
      file). Lines beginning with a <literal>#</literal> sign are ignored.
      The syntax is <literal>WBVARDEF -file=&lt;filename&gt;</literal>
    </para>
    <para>You can also specify a file when starting &wb-productname; with the
      parameter <literal>-vardef=filename.ext</literal>. When specifying a filename
      you can also define an encoding for the file using the <literal>-encoding</literal>
      switch. The specified file has to be a regular Java properties file.
      For details see see <link linkend="cmdline-vardef">Reading variables from a file</link>.
    </para>

  </section>

  <section id="command-vardelete">
    <title>Delete a script variable - WbVarDelete</title>

    <para>This removes an internal variable from the variable list.
      Details can be found in the chapter <xref linkend="using-variables"/>.
    </para>
  </section>

  <section id="command-varlist">
    <title>Show defined script variables - WbVarList</title>

    <para>This list all defined variables from the variable list.
      Details can be found in the chapter <xref linkend="using-variables"/>.
    </para>
  </section>

  <section id="command-wbconfirm">
    <title>Confirm script execution - WbConfirm</title>
    <para>
      The <literal>WbConfirm</literal> command pauses the execution of the
      current script and displays a message. You can then choose to stop
      the script or continue. The message can be supplied as a parameter of
      the command. If no message is supplied, a default message is
      displayed.
    </para>
    <para>
      This command can be used to prevent accidental execution of a script
      even if <link linkend="profile-confirm-updates">confirm updates</link> is not enabled.
    </para>
    <para>
      This command has no effect in batch mode.
    </para>
  </section>

  <section id="command-wbcall">
    <title>Run a stored procedure with OUT parameters - WbCall</title>
      <para>
        If you want to run a stored procedure that has <literal>OUT</literal> parameters, you have to use the <literal>WbCall</literal>
        command to correctly see the returned value of the parameters.
      </para>

      <para>
        Consider the following (Oracle) procedure:
      </para>
      <programlisting>CREATE OR REPLACE procedure return_answer(answer OUT integer)
IS
BEGIN
  answer := 42;
END;
/</programlisting>
      <para>
        To call this procedure you need to supply a placeholder indicating that
        a parameter is needed.
      </para>
      <screen>SQL> WbCall return_answer(?);
PARAMETER | VALUE
----------+------
ANSWER    | 42

(1 Row)
Converted procedure call to JDBC syntax: {call return_answer(?)}
Execution time: 0.453s
SQL></screen>

    <simplesect>
      <title>Stored procedures with REF CURSORS</title>
      <para>
        If the stored procedure has a REF CURSOR (as an output parameter), <literal>WbCall</literal>
        will detect this, and retrieve the result of the ref cursors.
      </para>
      <para>
        Consider the following (Oracle) stored procedure:
      </para>
<programlisting>CREATE PROCEDURE ref_cursor_example(pid number, person_result out sys_refcursor, addr_result out sys_refcursor) is
BEGIN
    OPEN person_result FOR
      SELECT *
      FROM person
      WHERE person_id = pid;

    OPEN addr_result FOR
      SELECT a.*
      FROM address a JOIN person p ON a.address_id = p.address_id
      WHERE p.person_id = pid;
END;
/</programlisting>
      <para>
        To call this procedure you use the same syntax as with a regular OUT parameter:
       </para>
       <programlisting>WbCall ref_cursor_example(42, ?, ?);</programlisting>
       <para>
        &wb-productname; will display two result tabs, one for each cursor returned by the procedure. If you use
        <literal>WbCall ref_cursor_example(?, ?, ?)</literal> you will be prompted to enter a
        value for the first parameter (because that is an IN parameter).
      </para>

    </simplesect>
    <simplesect>
      <title>PostgreSQL functions that return a refcursor</title>

      <para>
        When using ref cursors in PostgreSQL, normally such a function can simply be used inside a SELECT
        statement, e.g. <literal>SELECT * FROM refcursorfunc();</literal>. Unfortunately the PostgreSQL JDBC driver
        does not handle this correctly and you will not see the result set returned by the function.
      </para>

      <para>
        To display the result set returned by such a function, you have to use <literal>WbCall</literal> as well
      </para>
      <programlisting>CREATE OR REPLACE FUNCTION refcursorfunc()
  RETURNS refcursor
AS
$$
DECLARE
    mycurs refcursor;
 BEGIN
    OPEN mycurs FOR SELECT * FROM PERSON;
    RETURN mycurs;
 END;
$$ LANGUAGE plpgsql;
/</programlisting>
      <para>
        You can call this function using
      </para>
      <programlisting>WbCall refcursorfunc();</programlisting>
     <para>
       This will then display the result from the SELECT inside the function.
      </para>

    </simplesect>

  </section>

  <section id="command-wbinclude">
    <title>Execute a SQL script - WbInclude (@)</title>
    <para>
      With the <literal>WbInclude</literal> command you run SQL scripts without
      actually loading them into the editor, or call other scripts from within
      a script. The format of the command is <literal>WbInclude -file=filename;</literal>.
      For DBMS other then MS SQL, the command can be abbreviated using the @ sign: <literal>@filename;</literal>
      is equivalent to <literal>WbInclude -file=filename;</literal>.
      The called script way may also include other scripts. Relative filenames (e.g. as parameters
      for &wb-productname; commands) in the script are always resolved to the directory
      where the script is located, not the current directory of the application.
    </para>
    <para>
      The reason for excluding MS SQL is, that when creating stored procedures in MS SQL, the procedure
      parameters are identified using the @ sign, thus &wb-productname; would interpret the lines
      with the variable definition as the WbInclude command. If you want to use the @ command
      with MS SQL, you can <link linkend="options-enable-shortinclude">configure</link> this in your
      <literal>workbench.settings</literal> configuration file.
    </para>
    <note><para>
	If the included SQL script contains <literal>SELECT</literal> queries, the result
	of those queries will <emphasis role="bold">not</emphasis> be displayed in the GUI
    </para></note>
    <para>The long version of the command accepts additional parameters.
      When using the long version, the filename needs to be passed as a parameter as well.
    </para>
    <para>
      Only files up to a <link linkend="options-max-script-size">certain size</link> will be read into memory. Files exceeding
      this size will be processes statement by statement. In this case the automatic
      detection of the <link linkend="alternate-delimiter-usage">alternate delimiter</link> will
      not work. If your scripts exceed the maximum size and do use the alternate delimiter
      you will have to use the "long" version so that you can specify the actual
      delimiter used in your script.
    </para>
    <para>The command supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-file</entry>
            <entry>The filename of the file to be included.</entry>
          </row>

          <row>
            <entry>-continueOnError</entry>
            <entry>
              Defines the behaviour if an error occurs in one of the statements.
              If this is set to <literal>true</literal> then script execution will continue
              even if one statement fails. If set to <literal>false</literal> script execution
      	      will be halted on the first error. The default value is <literal>false</literal>
            </entry>
          </row>

          <row>
            <entry>-delimiter</entry>
            <entry>
              Specify the delimiter that is used in the script. This defaults
              to <literal>;</literal>. If you want to define a delimiter that
              will only be recognized when it's the only text in a line, append
              <literal>:nl</literal> to the value, e.g.: <literal>-delimiter=/:nl</literal>
            </entry>
          </row>

          <row>
            <entry>-encoding</entry>
            <entry>
              Specify the encoding of the input file. If no encoding is specified,
              the default encoding for the current platform (operating system) is used.
            </entry>
          </row>

          <row>
            <entry>-verbose</entry>
            <entry>
              Controls the logging level of the executed commands.
              <literal>-verbose=true</literal> has the same effect as adding a
              <literal>WbFeedback on</literal> inside the called script.
              <literal>-verbose=false</literal> has the same effect as adding
              the statement <literal>WbFeedback off</literal> to the called script.
            </entry>
          </row>

          <row>
            <entry>-useSavepoint</entry>
            <entry>
              Control if each statement from the file should be guarded with a savepoint
              when executing the script. Setting this to <literal>true</literal> will make
              execution of the script more robust, but also slows down the processing
              of the SQL statements.
            </entry>
          </row>

          <row>
            <entry>-ignoreDropErrors</entry>
            <entry>
							Controls if errors resulting from DROP statements should be treated as an error or as a warning.
            </entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>

    <para>Execute <literal>my_script.sql</literal></para>
    <programlisting>@my_script.sql;</programlisting>
    <para>Execute <literal>my_script.sql</literal> but abort on the first error</para>
    <programlisting>wbinclude -file="my_script.sql" -continueOnError=false;</programlisting>
  </section>

  <section id="command-wbrunlb">
     <title>Extract and run SQL from a Liquibase ChangeLog - WbRunLB</title>
    <indexterm><primary>Liquibase</primary><secondary>Run SQL from Liquibase file</secondary></indexterm>

     <para>
       If you manage your stored procedures in Liquibase ChangeLogs, you can use this command to run the
       necessary SQL directly from the XML file, without the need to copy and paste it into &wb-productname;.
       This is useful when testing and developing stored procedures that are managed by a Liquibase changeLog.
     </para>

     <important>
       <para>
         This is NOT a replacement for Liquibase.
       </para>
       <para>
         <literal>WbRunLB</literal> will only extract SQL statements stored in <literal>&lt;sql&gt;</literal> or
         <literal>&lt;createProcedure&gt;</literal> tags.
       </para>
       <para>
         It will not convert any of the Liquibase tags to "real" SQL.
       </para>

       <para>
         <literal>WbRunLB</literal> will <emphasis role="bold">NOT</emphasis> update
         the Liquibase log table (<literal>DATABASECHANGELOG</literal>) nor will it check if the specified changeSet(s) have
         already been applied to the database.
       </para>
       <para>
         It is merely a convenient way to extract and run SQL statements stored in a Liquibase XML file!
       </para>
     </important>
     <para>
        The attribute <literal>splitStatements</literal> for the <literal>sql</literal>
        tag is evaluated. The delimiter used to split the statements follows the usual &wb-productname; rules (including the use
        of the <link linkend="understand-alternate-delim">alternate delimiter</link>).
     </para>

    <para><literal>WbRunLB</literal> supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-file</entry>
            <entry>
              The filename of the Liquibase changeLog (XML) file. The <literal>&lt;include&gt;</literal> tag is NOT supported! SQL statements stored in files
              that are referenced using Liquibase's <literal>include</literal> tag will not be processed.
            </entry>
          </row>

          <row>
            <entry>-changeSet</entry>
            <entry>
              A list of changeSet ids to be run. If this is omitted, then the SQL from all changesets (containing ) are executed. The value
              specified can include the value for the author attribute as well, <literal>-changeSet="Arthur;42"</literal> selects the changeSet
              where <literal>author="Arthur"</literal> and <literal>id="42"</literal>. This parameter can be repeated in order to select
              multiple changesets: <literal>-changeSet="Arthur;42" -changeSet="Arthur;43"</literal>.
            </entry>
          </row>

          <row>
            <entry>-author</entry>
            <entry>
              Select all changeSets with a given author, e.g. <literal>-author=Arthur</literal>. If this parameter is specified, <literal>-changeSet</literal>
              is ignored. This parameter can be repeated in order to select changesets from multiple authors: <literal>-author=Arthur -author=Zaphod</literal>.
            </entry>
          </row>

          <row>
            <entry>-continueOnError</entry>
            <entry>
              Defines the behaviour if an error occurs in one of the statements.
              If this is set to <literal>true</literal> then script execution will continue
              even if one statement fails. If set to <literal>false</literal> script execution
      	      will be halted on the first error. The default value is <literal>false</literal>
            </entry>
          </row>

          <row>
            <entry>-encoding</entry>
            <entry>
              Specify the encoding of the input file. If no encoding is specified, UTF-8 is used.
            </entry>
          </row>

        </tbody>
      </tgroup>
     </informaltable>

   </section>

	<section id="pk-handling">
		<title>Handling tables or updateable views without primary keys</title>

		<section id="command-define-pk">
			<title>Define primary key columns - WbDefinePK</title>
			<para>
				To be able to directly edit data in the result set (grid) &wb-productname; needs
				a primary key on the underlying table. In some cases these primary keys are not present or
				cannot be retrieved from the database (e.g. when using updateable views).
				To still be able to automatically update a result based on those tables (without always
				manually defining the primary key) you can manually define a primary
				key using the <literal>WbDefinePk</literal> command.
			</para>
			<para>
				Assuming you have an updateable view called <literal>v_person</literal> where
				the primary key is the column <literal>person_id</literal>. When you simply do a
				<literal>SELECT * FROM v_person</literal>, &wb-productname; will prompt you for the
				primary key when you try to save changes to the data. If you run
			</para>

			<programlisting>WbDefinePk v_person=person_id</programlisting>
			<para>
				before retrieving the result, &wb-productname; will automatically
				use the <literal>person_id</literal> as the primary key (just as if this
				information had been retrieved from the database).
			</para>
			<para>To delete a definition simply call the command with an empty column list:</para>
			<programlisting>WbDefinePk v_person=</programlisting>
			<para>
				If you want to define certain mappings permanently, this can be done using
				a mapping file that is specified in the <link linkend="options-pkmapping">configuration file</link>.
				The file specified has to be a text file with each line containing one
				primary key definition in the same format as passed to this command. The global mapping will
				automatically be saved when you exit the application if a filename has been defined.
				If no file is defined, then all PK mappings that you define are lost when
				exiting the application (unless you explicitely save them using
				<link linkend="command-save-pkmap">WbSavePkMap</link>
			</para>

			<programlisting>v_person=person_id
v_data=id1,id2</programlisting>

			<para>
				will define a primary key for the view <literal>v_person</literal> and one for
				the view <literal>v_data</literal>. The definitions stored in that file can
				be overwritten using the <literal>WbDefinePk</literal> command, but those changes
				won't be saved to the file. This file will be read for all database connections and
				is not profile specific. If you have conflicting primary key definitions for
				different databases, you'll need to execute the <literal>WbDefinePk</literal> command
				each time, rather then specifying the keys in the mapping file.
			</para>

			<para>
				When you define the key columns for a table through the GUI, you have the option
				to remember the defined mapping. If this option is checked, then that mapping
				will be added to the global map (just as if you had executed <literal>WbDefinePk</literal>
				manually.
			</para>
			<note><para>
		The mappings will be stored with lowercase table names internally, regardless how you specify them.
			</para></note>

		</section>

		<section id="command-list-pk">
			<title>List defined primary key columns - WbListPKDef</title>
			<para>To view the currently defined primary keys, execute the command
			<literal>WbListPkDef</literal>.</para>
		</section>

		<section id="command-load-pkmap">
			<title>Load primary key mappings - WbLoadPKMap</title>
			<para>
				To load the additional primary key definitions from a file, you can
				use the the <literal>WbLoadPKMap</literal> command. If a filename is defined
				in the <link linkend="options-pkmapping">configuration file</link> then that
				file is loaded. Alternatively if no file is configured, or if you want to
				load a different file, you can specify the filename using the <literal>-file</literal>
				parameter.
			</para>
		</section>

		<section id="command-save-pkmap">
			<title>Save primary key mappings - WbSavePKMap</title>
			<para>
				To save the current primary key definitions to a file, you can
				use the the <literal>WbSavePKMap</literal> command. If a filename is defined
				in the <link linkend="options-pkmapping">configuration file</link> then the
				definition is stored in that file. Alternatively if no file is configured, or if you want to
				store the current mapping into a different file, you can specify the filename
				using the <literal>-file</literal> parameter.
			</para>
		</section>

	</section>

  <section id="command-fetchsize">
     <title>Change the default fetch size - WbFetchSize</title>
     <para>
       The default fetch size for a connection can be defined in the <link linkend="profile-fetch-size">connection profile</link>. Using the
       command <literal>WbFetchSize</literal> you can change the fetch size without changing the connection profile.
     </para>
     <para>
       The following script changes the default fetch size to 2500 rows and then runs a <literal>WbExport</literal> command.
     </para>
     <programlisting>WbFetchSize 2500;
WbExport -sourceTable=person -type=text -file=/temp/person.txt;
</programlisting>

     <para>
       <literal>WbFetchSize</literal> will not change the current connection profile.
     </para>
   </section>


  <section id="command-run-batch">
     <title>Run statements as a single batch - WbStartBatch, WbEndBatch</title>
     <para>
       To send several SQL Statements as a single "batch" to the database server, the two commands WbStartBatch and WbEndBatch can be used.
       All statements between these two will be sent as a single statement (using <literal>executeBatch()</literal>) to the server.
     </para>
     <para>
       Note that not all JDBC drivers support batched statements, and the flexibility what kind of statements can be batched varies between the
       drivers as well. Most drivers will not accept different types of statements e.g. mixing DELETE and INSERT in the same batch.
     </para>
     <para>
       To send a group of statements as a single batch, simply use the command <literal>WbStartBatch</literal> to mark the beginning and
       <literal>WbEndBatch</literal> to mark the end. You have to run all statements together either by using "Execute all" or by selecting all
       statements (including WbStartBatch and WbEndBatch) and then using "Execute selected". The following example sends all INSERT statements
       as a single batch to the database server:
     </para>
     <programlisting>WbStartBatch;
INSERT INTO person (id, firstname, lastname) VALUES (1, 'Arthur', 'Dent');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Ford', 'Prefect');
INSERT INTO person (id, firstname, lastname) VALUES (3, 'Zaphod', 'Beeblebrox');
INSERT INTO person (id, firstname, lastname) VALUES (4, 'Tricia', 'McMillian');
WbEndBatch;
COMMIT;
</programlisting>


  </section>
  <section id="command-selectblob">
    <title>Extracting BLOB content - WbSelectBlob</title>
    <para>
			To save the contents of a <literal>BLOB</literal> or <literal>CLOB</literal> column
      into an external file the <literal>WbSelectBlob</literal> command can be used. Most DBMS
      support reading of <literal>CLOB</literal> (character data) columns directly, so depending
      on your DBMS (and JDBC driver) this command might only be needed for binary data.
    </para>
    <para>
			The syntax is very similar to the regular <literal>SELECT</literal> statement, an additional
      <literal>INTO</literal> keyword specifies the name of the external file into which the
      data should be written:
    </para>
    <programlisting>WbSelectBlob blob_column
INTO c:/temp/image.bmp
FROM theTable
WHERE id=42;</programlisting>
    <para>
      Even if you specify more then one column in the column list, &wb-productname; will only
      use the first column. If the SELECT returns more then one row, then one
      outputfile will be created for each row. Additional files will be created with
      a counter indicating the row number from the result. In the above
      example, image.bmp, image_1.bmp, image_3.bmp and so on, would be created.
    </para>
		<para>
			<literal>WbSelectBlob</literal> is intended for an ad-hoc retrieval of a single LOB column.
			If you need to extract the contents of several LOB rows and columns it is recommended to
			use the <link linkend="command-export">WbExport</link> command.
		</para>
    <para>
			You can also manipulate (save, view, upload) the contents of BLOB columns in a result set.
			Please refer to <xref linkend="blob-support"/> for details.
    </para>

  </section>

  <section id="command-wbfeedback">
    <title>Control feedback messages - WbFeedback</title>
    <para>
      Normally &wb-productname; prints the results for each statement
      into the message panel. As this feedback can slow down the execution
      of large scripts, you can disable the feedback using the <literal>WbFeedback</literal>
      command. When <literal>WbFeedback OFF</literal> is executed, only a summary of the
      number of executed statements will be displayed, once the script execution has
      finished. This is the same behaviour as selecting "Consolidate script log" in the
      options window. The only difference is, that the setting through <literal>WbFeedback</literal>
      is temporary and does not affect the global setting.
    </para>
  </section>

  <section id="command-set">
    <title>Setting connection properties - SET</title>
    <para>
      The <literal>SET</literal> command is passed on directly to the driver,
      except for the parameters described in this chapter as they
      have an equivalent JDBC call which will be executed instead.
    </para>
    <para>
      Oracle does not have a SQL set command. The SET command that is available
      in SQL*Plus is a specific SQL*Plus command and will not work with other client software.
      Most of the SQL*Plus SET commands only make sense with SQL*Plus (e.g. formatting of the results).
      To be able to run SQL scripts that are intended for Oracle SQL*PLus, any error reported
      from the SET command when running against an Oracle database will silently be ignored and
      only logged as a warning.
    </para>

    <section id="command-set-feedback">
      <title>FEEEDBACK</title>
      <para>
				<literal>SET feedback ON/OFF</literal> is equivalent to the <link linkend="command-wbfeedback">WbFeedback</link>
				command, but mimics the syntax of Oracle's SQL*Plus utility.
      </para>
    </section>

    <section id="command-set-autocommit">
      <title>AUTOCOMMIT</title>
      <para>
				With the command <literal>SET autocommit ON/OFF</literal> autocommit can be turned on or
				off for the current connection. This is equivalent to setting the autocommit property
				in the <link linkend="profile-jdbc-properties">connection profile</link> or toggling
				the state of the
				<menuchoice><guimenu>SQL</guimenu><guimenuitem>Autocommit</guimenuitem></menuchoice>
				menu item.
      </para>
    </section>

    <section id="command-set-maxrows">
      <title>MAXROWS</title>
      <para>
        Limits the number of rows returned by the next statement. The behaviour of this command
        is a bit different between the console mode and the GUI mode. In console mode, the maxrows
        stay in effect until you explicitely change it back using <literal>SET maxrows</literal> again.
      </para>
      <para>
        In GUI mode, the maxrows setting is only in effect for the script currently being executed and
        will only temporarily overwrite any value entered in the "Max. Rows" field.
      </para>
    </section>
  </section>

  <section id="set-oracle">
    <title>Changing Oracle session behaviour - SET</title>
    <para>
      The following options for the SET command are only available when being connected to an Oracle database.
    </para>
    <section id="command-set-serveroutput">
      <title>SERVEROUTPUT</title>
      <para>
        <literal>SET serveroutput on</literal> is equivalent to the <link linkend="command-dbms-output">ENABLEOUT</link>
        command and <literal>SET serveroutput off</literal> is equivalent to <link linkend="command-dbms-output">DISABLEOUT</link> command.
      </para>
    </section>

    <section id="command-set-autotrace">
      <title>AUTOTRACE</title>
      <para>
        This enables or disables the <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_twelve040.htm#i2698680">"autotrace"</ulink> feature similar to the one in SQL*Plus.
        The syntax is equivalent to the SQL*Plus command and supports the following options:
        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <colspec colname="c1"  colwidth="2.5cm" />
            <colspec colname="c2"/>
            <thead>
              <row>
                <entry>Option</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry>ON</entry>
                <entry>
                  <para>
                    Turns on autotrace mode. After running a statement, the statement result (if it
                    is a query), the statistics and the execution plan for that statement are displayed as separate result tabs.
                  </para>
                </entry>
              </row>
              <row>
                <entry>OFF</entry>
                <entry>
                  <para>
                    Turns off the autotrace mode.
                  </para>
                </entry>
              </row>
              <row>
                <entry>TRACEONLY</entry>
                <entry>
                  <para>
                    Like <literal>ON</literal>, but does not display the result of a  query.
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        </para>
      <para>
        The information shown in autotrace mode can be controlled with two options after the <literal>ON</literal> or <literal>TRACEONLY</literal>
        parameter. <literal>STATISTICS</literal> will fetch the statistics about the execution and <literal>EXPLAIN</literal>
        which will display the execution plan for the statement. If not additional parameter is specified, <literal>EXPLAIN STATISTICS</literal> is used.
      </para>
      <para>
        If statistics are requested, any query result will be fetched from the database server but it will not be displayed.
      </para>
      <para>
        Unlike SQL*Plus, the keywords (<literal>AUTOTRACE, STATISTICS, EXPLAIN</literal>) cannot be abbreviated!
      </para>
      <para>
        For more information about the prerequisites for the autotrace mode, see the description of
        <link linkend="oracle-autotrace">DBMS specific features</link>.
      </para>
    </section>
  </section>

  <section id="command-wbmode">
    <title>Changing read only mode - WbMode</title>
    <para>
      In the <link linkend="profile-confirm-updates">connection profile</link> two options can be specified
      to define the behaviour when running commands that might change the update: a "read only" mode
      that ignores such commands and a "confirm all" mode, where you need to confirm any statement
      that might change the database.
    </para>
    <para>
      These states can temporarily be changed without actually changing the profile
      using the <literal>WbMode</literal> command.
    </para>
    <note>
      <para>This changes the mode for all editor tabs, not only for the
      one where you run the command.</para>
    </note>

    <para>
      Parameters for the <literal>WbMode</literal> command are:
			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1"  colwidth="2.5cm" />
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>reset</entry>
							<entry>
								<para>
									Resets the flags to the profile's definition
								</para>
							</entry>
						</row>
						<row>
							<entry>normal</entry>
							<entry>
								<para>
									Makes all changes possible (turns off read only and confirmations)
								</para>
							</entry>
						</row>
						<row>
							<entry>confirm</entry>
							<entry>
								<para>
									Enables confirmation for all updating commands
								</para>
							</entry>
						</row>
						<row>
							<entry>readonly</entry>
							<entry>
								<para>
									Turns on the read only mode
								</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
    </para>

    <para>
      The following example will turn on read only mode for the current connection, so that any
      subsequent statement that updates the database will be ignored
    </para>
    <programlisting>WbMode readonly;</programlisting>

    <para>
      To change the current connection back to the settings from the profile use:
    </para>
    <programlisting>WbMode reset;</programlisting>

  </section>

  <section id="command-gendrop">
    <title>Generate DROP statement with dependencies- WbGenerateDrop</title>
    <para>
      The command <literal>WbGenerateDrop</literal> can be used to generate a SQL script for a table that
      will drop all foreign keys referencing that table, then a <literal>DROP</literal> statement for that table
      and the statements to re-created the foreign keys referencing that table.
    </para>
    <para>
      This is useful if you need to re-create a table but don't want to manually delete all referencing
      foreign keys, especially if the DBMS does not support a cascading DROP.
    </para>
    <para>
      This is also available in the DbExplorer's context menu as "Generate DROP script".
    </para>
    <para>
      The command supports the following parameters.

			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1"  colwidth="2.5cm" />
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>-tables</entry>
							<entry>
								<para>
									A comma separated list of tables, e.g. <literal>-tables=customer,invoice</literal>. The parameter
                  supports specifying tables using wildcards <literal>-tables=cust%,inv%</literal>.
								</para>
							</entry>
						</row>
						<row>
							<entry>-outputFile</entry>
							<entry>
								<para>
                  Defines the file into which all statements are written. If multiple tables are selected
                  using the <literal>-tables</literal> parameter, all statements will be written into this
                  file.
								</para>
							</entry>
						</row>
						<row>
							<entry>-outputDir</entry>
							<entry>
								<para>
                  Specifies an output directory into which one script per selected table will be written.
                  The script files are named <literal>drop_XXX.sql</literal>, where XXX is the name of
                  the respective table. If this parameter is used, <literal>-outputFile</literal> is ignored.
								</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
    </para>
    <para>
      If neither <literal>-outputFile</literal> nor <literal>-outputDir</literal> is specified, the output
      is written to the message panel.
    </para>
  </section>
  <section id="command-desc">
    <title>Show table structure - DESCRIBE</title>

    <para>
			Describe shows the definition of the given table. It can be
			abbreviated with DESC. The command expects the table name as a parameter.
			The output of the command will be several result tabs to show the table
			structure, indexes and triggers (if present).
			If the "described" object is a view, the message tab will additionally contain
			the view source (if available).
		</para>
		<programlisting>DESC person;</programlisting>

		<para>
			If you want to show the structure of a table from a different user, you need
			to prefix the table name with the desired user <literal>DESCRIBE otheruser.person;</literal>
		</para>

  </section>

  <section id="command-list">
    <title>List tables - WbList</title>

    <para>
			This command lists all available tables (including views and
      synonyms). This output is equivalent to the left part of the Database
      Object Explorer&#39;s Table tab.
    </para>

    <para>
			You can limit the displayed objects by either specifying a wildcard for the
			names to be retrieved: <literal>WbList P%</literal> will list all tables or
			views starting with the letter "P"
    </para>

    <para>
			The command supports two parameters to specify the tables and objects to be listed. If you want to
      limit the result by specifying a wildcard for the name <emphasis role="bold">and</emphasis> the object type,
			you have to use the parameter switches:
			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1"  colwidth="2.5cm" />
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>-objects</entry>
							<entry>
								<para>
									Select the objects to be returned using a wildcard name, e.g. <literal>-objects=P%</literal>
								</para>
							</entry>
						</row>
						<row>
							<entry>-types</entry>
							<entry>
								<para>
									Limit the result to specific object types, e.g. <literal>WbList -objects=V% -types=VIEW</literal>
									will return all views starting with the letter "V".
								</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</para>

  </section>

  <section id="command-listprocs">
    <title>List stored procedures - WbListProcs</title>

    <para>
			This command will list all stored procedures available to the
      current user. The output of this command is equivalent to the Database
			Explorer&apos;s Procedure tab.
		</para>
		<para>
			You can limit the list by supplying a wildcard search for the name, e.g.:
			<programlisting>WbListProcs public.p%</programlisting>
		</para>
  </section>

  <section id="command-listtriggers">
    <title>List triggers - WbListTriggers</title>

    <para>
			This command will list all stored triggers available to the
      current user. The output of this command is equivalent to the Database
			Explorer&apos;s Triggers tab (if enabled)
		</para>
  </section>

  <section id="command-procsource">
    <title>Show the source of a stored procedures - WbProcSource</title>

    <para>
			This command will show the source for a single stored procedure (if the
			current DBMS is supported by &wb-productname;). The name of the procedure
			is given as an argument to the command:
			<programlisting>WbProcSource theAnswer</programlisting>
		</para>
  </section>

  <section id="command-listcat">
    <title>List catalogs - WbListCat</title>

    <para>
      Lists the available catalogs (or databases). It is the same information
      that is shown in the DbExplorer's "Database" dropdown.
    </para>
    <para>
      The output of this command depends on the underlying JDBC driver and DBMS.
      For MS SQL Server this lists the available databases (which then could be changed
      with the command <literal>USE &#60;dbname&#62;</literal>)
    </para>

    <para>
			For Oracle this command returns nothing as Oracle does not
			implement the concept of catalogs.
		</para>

    <para>
			This command calls the JDBC driver&apos;s <literal>getCatalogs()</literal> method and will
      return its result. If on your database system this command does not display
      a list, it is most likely that your DBMS does not support catalogs (e.g. Oracle)
      or the driver does not implement this feature.
    </para>

    <para>
      This command ignores the filter defined for catalogs in the <link linkend="">connection profile</link>
      and always returns all databases.
    </para>

  </section>


  <section id="command-listschema">
    <title>List schemas - WbListSchemas</title>

    <para>
      Lists the available schemas from the current connection. The output of this
      command depends on the underlying JDBC driver and DBMS. It is the same information
      that is shown in the DbExplorer's "Schema" dropdown.
    </para>

    <para>
      This command ignores the filter defined for schemas in the <link linkend="">connection profile</link>
      and always returns all schemas.
    </para>

  </section>


  <section id="command-connect">
    <title>Change the connection for a script - WbConnect</title>

    <para>
			With the <literal>WbConnect</literal> command, the connection for the script that is
			currently be exected can be changed.
		</para>

		<para>
			When this command is run in GUI mode, the connection is <emphasis role="bold">only</emphasis>
			changed for the remainder of the script execution. Therefor at least one other statement should be
			executed together with the <literal>WbConnect</literal> command. Either by running
			the complete script of the editor or selecting the <literal>WbConnect</literal> command
			together with other statements. Once the script has finished, the connection is closed
			and the "global" connection (selected in the connect dialog) is active again. This also applies
			to scripts that are run in <link linkend="using-scripting">batch mode</link> or
			scripts that are started from within the console using
			<literal><link linkend="command-wbinclude">WbInclude</link></literal>.
		</para>

		<para>
			When this command is entered directly in the commandline of the
			<link linkend="console-mode">console mode</link>, the current connection is closed and the
			new connection is kept open until the application ends, or a new connection is established
			using <literal>WbConnect</literal> on the commandline again.
		</para>

	  <para>
			The command supports the following parameters:
		</para>

		<informaltable frame="all">
			<tgroup cols="2">
				<colspec colname="c1" colwidth="3.6cm" />
				<colspec colname="c2" />
				<thead>
					<row>
						<entry>Parameter</entry>
						<entry>Description</entry>
					</row>
				</thead>

				<tbody valign="top">

				<row>
					<entry>-profile</entry>
					<entry>
						Defines the profile to connect to. If this parameter is specified
						all other parameters are ignored.
					</entry>
				</row>

				<!-- Create an empty line to distinguish between the -profile
				     parameter and the others -->
				<row>
					<entry rowsep="0" colsep="0"></entry>
					<entry rowsep="0" colsep="0"></entry>
				</row>

				<row>
					<entry rowsep="0" colsep="0">or</entry>
					<entry rowsep="0" colsep="0"></entry>
				</row>

				<row>
					<entry colsep="0"></entry>
					<entry colsep="0"></entry>
				</row>

					&common-connect-args;
				</tbody>
			</tgroup>
		</informaltable>

		<para>
			If none of the parameters is supplied when running the command, it is assumed that any value
			after <literal>WbConnect</literal> is the name of a connection profile, e.g.:
		</para>
		<programlisting>WbConnect production</programlisting>
		<para>
			will connect using the profile name <literal>production</literal>, and is equivalent to
		</para>
		<programlisting>WbConnect -profile=production</programlisting>

  </section>

  <section id="command-xslt">
    <title>Run an XSLT transformation - WbXslt</title>

    <para>
      Transforms an XML file via a XSLT stylesheet. This can be used to format
      XML input files into the correct format for &wb-productname; or to transform
      the output files that are generated by the various &wb-productname; commands.
    </para>
    <para>Parameters for the XSLT command:</para>

    <informaltable frame="all">
      <tgroup cols="2"  align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">

          <row>
            <entry>-inputfile</entry>
            <entry>The name of the XML source file.</entry>
          </row>

          <row>
            <entry>-xsltoutput</entry>
            <entry>The name of the generated output file.</entry>
          </row>

          <row>
            <entry>-stylesheet</entry>
            <entry>The name of the XSLT stylesheet to be used.</entry>
          </row>

          <row>
            <entry>-xsltParameters</entry>
            <entry>
              A list of parameters (key/value pairs) that should be passed to the XSLT processor. When using e.g. the <literal>wbreport2liquibase.xslt</literal>
              stylesheet, the value of the <literal>author</literal> attribute can be set using <literal>-xsltParameters="authorName=42"</literal>.
            </entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section id="command-wbexec">
    <title>Running operating system commands - WbSysExec</title>
    <para>
      To run an operating system command use <literal>WbSysExec</literal> followed by a valid command for your operating system.
    </para>
    <para>
      To run the program <literal>ls</literal> the following call can be used: <programlisting>WbSysExec ls</programlisting>
    </para>
    <para>
      To run Windows commands that are internal to <literal>cmd.exe</literal> such as <literal>DIR</literal>, you
      must call <literal>cmd.exe</literal> with the <literal>/c</literal> switch to make sure cmd.exe is terminated:
      <programlisting>WbSysExec cmd /c dir /n</programlisting>
    </para>
    <para>
      If you need to specify a working directory for the program, or want to specify the commandline arguments
      individually, a second format is available using the standard &wb-productname; parameter handling:
    </para>

    <informaltable frame="all">
      <tgroup cols="2"  align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-program</entry>
            <entry>The name of the executable program</entry>
          </row>
          <row>
            <entry>-argument</entry>
            <entry>One commandline argument for the program. This parameter can be repeated multiple times.</entry>
          </row>
          <row>
            <entry>-dir</entry>
            <entry>The working directory to be used when calling the external program</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
      To run an internal Windows command using the second format, use the following syntax:
    </para>
    <programlisting>WbSysExec -program='cmd.exe' -argument='/c' -argument='dir /n' -dir='c:\temp\'</programlisting>
  </section>

  <section id="command-dbms-output" xreflabel="ENABLEOUT">
    <title>Using Oracle's DBMS_OUTPUT package</title>
    <indexterm><primary>Oracle</primary><secondary>dbms_output</secondary></indexterm>

    <para>
      To turn on support for Oracle's <literal>DBMS_OUTPUT</literal> package you have to use the
			(&wb-productname; specific) command <literal>ENABLEOUT</literal>. As an alternative you can
      also use the SQL*Plus command <literal>set serveroutput on</literal>. In contrast to
      SQL*PLus <literal>set serveroutput on</literal> must be terminated with a semicolon (or the alternate
      delimiter).
		</para>
		<para>
			After running <literal>ENABLEOUT</literal> the <literal>DBMS_OUTPUT</literal> package is enabled,
			and any message written with <literal>dbms_output.put_line()</literal> is displayed in the message
			pane after executing a SQL statement. It is equivalent to calling the dbms_output.enable() procedure.
    </para>

    <para>
      You can control the buffer size of the <literal>DBMS_OUTPUT</literal> package by passing the
      desired buffer size as a parameter to the <literal>ENABLEOUT</literal> command:
			<literal>ENABLEOUT 32000;</literal>
    </para>

    <note><para>
	Due to a bug in Oracle's JDBC driver, you cannot retrieve columns with
	the <literal>LONG</literal> or <literal>LONG RAW</literal> data type if the <literal>DBMS_OUTPUT</literal>
	package is enabled.
	In order to be able to display these columns support for <literal>DBMS_OUTPUT</literal> has
	to be switched off.
    </para></note>

		<para>
			To disable the <literal>DBMS_OUTPUT</literal> package again, use the (&wb-productname; specific)
			command <literal>DISABLEOUT</literal>. This is equivalent to calling
			<literal>dbms_output.disable()</literal> procedure.
		</para>
  </section>

</section>