<section id="wb-commands">
  <title>Other &wb-productname; specific commands</title>

	<important><para>
    All &wb-productname; specific command can <emphasis role="bold">only</emphasis> be used from within &wb-productname;
  </para></important>

  <section id="command-wbconfirm">
    <title>Confirm script execution - WbConfirm</title>
    <para>
      The <literal>WbConfirm</literal> command pauses the execution of the
      current script and displays a message. You can then choose to stop
      the script or continue.
    </para>
    <para>
      <literal>WbConfirm</literal> can be called in three different ways:
			<itemizedlist>
        <listitem>
          <para>Without any parameter, then a default message will be displayed</para>
        </listitem>

        <listitem>
          <para>With just a message text, e.g. <literal>WbConfirm Do you really want to drop everything?</literal></para>
        </listitem>

        <listitem>
          <para>
            Supplying parameters for the message, the text for the "Yes" choice and the text for the "No" choice using standard &wb-productname; parameters:
            <simpara>
              <literal>WbConfirm -message="Do you really want to drop everything?" -yesText="OK, go ahead" -noText="No, please stop"</literal>
            </simpara>
          </para>
        </listitem>

      </itemizedlist>
    </para>
    <para>
      When using <literal>WbConfirm</literal> in console (or interactive batch) mode, the check if the "Yes" choice was
      typed by the user is done by testing if the "Yes" value starts with the text the user enters (ignoring upper/lowercase
      differences). So if the "Yes text" is set to <literal>"Continue"</literal>, the user can enter <literal>c</literal>,
      <literal>co</literal>, <literal>cont</literal> and so on. Because of that, the "No" text should not start with
      the same letters as the "Yes" text. When using <literal>-yesText=Continue and -noText=Cancel</literal> and the user
      enters <literal>C</literal>, this would be regarded as a "Yes".
    </para>
    <para>
      This command can be used to prevent accidental execution of a script
      even if <link linkend="profile-confirm-updates">confirm updates</link> is not enabled.
    </para>
    <para>
      This command has no effect in batch mode unless the <link linkend="script-interactive"><literal>-interactive</literal></link> parameter was specified.
    </para>
  </section>

  <section id="command-wbmessage">
    <title>Display a message box - WbMessage</title>
    <para>
      The <literal>WbMessages</literal> command pauses the execution of the
      current script and displays a message and waits until the dialog is closed.
      Unlike <literal>WbConfirm</literal> the script will always continue once the message dialog is closed.
    </para>
    <para>
      <literal>WbMessage</literal> can be called in two different ways:
			<itemizedlist>
        <listitem>
          <para>With just a message text, e.g. <literal>WbMessage Done!</literal></para>
        </listitem>

        <listitem>
          <para>
            Supplying parameters for the message and the dialog title:
            <simpara>
              <literal>WbConfirm -message="Script finished" -title="SQL Script"</literal>
            </simpara>
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      This command has no effect in batch or console mode.
    </para>
  </section>

  <section id="command-echo">
    <title>Print a text - WbEcho</title>
    <para>
      The command <literal>WbEcho</literal> can be used to print messages. The following statement:
    </para>
    <programlisting>WbEcho The answer is: 42</programlisting>
    <para>
      will print the text "The answer is: 42" to the message pane in GUI mode, or to the console in batch or console mode.
    </para>
  </section>

  <section id="command-wbcall">
    <title>Run a stored procedure with OUT parameters - WbCall</title>
      <para>
        If you want to run a stored procedure that has <literal>OUT</literal> parameters, you have to use the <literal>WbCall</literal>
        command to correctly see the returned value of the parameters.
      </para>

      <para>
        Consider the following (Oracle) procedure:
      </para>
      <programlisting>CREATE OR REPLACE procedure return_answer(answer OUT integer)
IS
BEGIN
  answer := 42;
END;
/</programlisting>
      <para>
        To call this procedure you need to supply a placeholder indicating that
        a parameter is needed.
      </para>
      <screen>SQL> WbCall return_answer(?);
PARAMETER | VALUE
----------+------
ANSWER    | 42

(1 Row)
Converted procedure call to JDBC syntax: {call return_answer(?)}
Execution time: 0.453s
SQL></screen>

    <simplesect>
      <title>Stored procedures with REF CURSORS</title>
      <para>
        If the stored procedure has a REF CURSOR (as an output parameter), <literal>WbCall</literal>
        will detect this, and retrieve the result of the ref cursors.
      </para>
      <para>
        Consider the following (Oracle) stored procedure:
      </para>
<programlisting>CREATE PROCEDURE ref_cursor_example(pid number, person_result out sys_refcursor, addr_result out sys_refcursor) is
BEGIN
    OPEN person_result FOR
      SELECT *
      FROM person
      WHERE person_id = pid;

    OPEN addr_result FOR
      SELECT a.*
      FROM address a JOIN person p ON a.address_id = p.address_id
      WHERE p.person_id = pid;
END;
/</programlisting>
      <para>
        To call this procedure you use the same syntax as with a regular OUT parameter:
       </para>
       <programlisting>WbCall ref_cursor_example(42, ?, ?);</programlisting>
       <para>
        &wb-productname; will display two result tabs, one for each cursor returned by the procedure. If you use
        <literal>WbCall ref_cursor_example(?, ?, ?)</literal> you will be prompted to enter a
        value for the first parameter (because that is an IN parameter).
      </para>

    </simplesect>
    <simplesect>
      <title>PostgreSQL functions that return a refcursor</title>

      <para>
        When using ref cursors in PostgreSQL, normally such a function can simply be used inside a SELECT
        statement, e.g. <literal>SELECT * FROM refcursorfunc();</literal>. Unfortunately the PostgreSQL JDBC driver
        does not handle this correctly and you will not see the result set returned by the function.
      </para>

      <para>
        To display the result set returned by such a function, you have to use <literal>WbCall</literal> as well
      </para>
      <programlisting>CREATE OR REPLACE FUNCTION refcursorfunc()
  RETURNS refcursor
AS
$$
DECLARE
    mycurs refcursor;
 BEGIN
    OPEN mycurs FOR SELECT * FROM PERSON;
    RETURN mycurs;
 END;
$$ LANGUAGE plpgsql;
/</programlisting>
      <para>
        You can call this function using
      </para>
      <programlisting>WbCall refcursorfunc();</programlisting>
     <para>
       This will then display the result from the SELECT inside the function.
      </para>

    </simplesect>

  </section>

  <section id="command-wbinclude">
    <title>Execute a SQL script - WbInclude (@)</title>
    <para>
      With the <literal>WbInclude</literal> command you run SQL scripts without
      actually loading them into the editor, or call other scripts from within
      a script. The format of the command is <literal>WbInclude -file=filename;</literal>.
      For DBMS other then MS SQL, the command can be abbreviated using the @ sign: <literal>@filename;</literal>
      is equivalent to <literal>WbInclude -file=filename;</literal>.
      The called script way may also include other scripts. Relative filenames (e.g. as parameters
      for &wb-productname; commands) in the script are always resolved to the directory
      where the script is located, not the current directory of the application.
    </para>
    <para>
      The reason for excluding MS SQL is, that when creating stored procedures in MS SQL, the procedure
      parameters are identified using the @ sign, thus &wb-productname; would interpret the lines
      with the variable definition as the WbInclude command. If you want to use the @ command
      with MS SQL, you can <link linkend="options-enable-shortinclude">configure</link> this in your
      <literal>workbench.settings</literal> configuration file.
    </para>
    <note><para>
      If the included SQL script contains <literal>SELECT</literal> queries, the result
      of those queries will <emphasis role="bold">not</emphasis> be displayed in the GUI unless <literal>-displayResult=true</literal>
      is used.
    </para></note>
    <para>The long version of the command accepts additional parameters.
      When using the long version, the filename needs to be passed as a parameter as well.
    </para>
    <para>
      Only files up to a <link linkend="options-max-script-size">certain size</link> will be read into memory. Files exceeding
      that size will be processed statement by statement. In this case the automatic
      detection of the <link linkend="alternate-delimiter-usage">alternate delimiter</link> will
      <emphasis role="bold">not work</emphasis>. If your scripts exceed the maximum size and you do use the alternate delimiter
      you will have to use the long version of the command using the <literal>-file</literal> and <literal>-delimiter</literal>
      parameters.
    </para>

    <para>
      <literal>WbInclude</literal> supports <link linkend="conditional-exec">conditional execution</link>
    </para>

    <para>The command supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry id="include-param-file">-file</entry>
            <entry>The filename of the file to be included.</entry>
          </row>

          <row>
            <entry>-continueOnError</entry>
            <entry>
              Defines the behavior if an error occurs in one of the statements.
              If this is set to <literal>true</literal> then script execution will continue
              even if one statement fails. If set to <literal>false</literal> script execution
      	      will be halted on the first error. The default value is <literal>false</literal>
            </entry>
          </row>

          <row>
            <entry id="include-param-delimiter">-delimiter</entry>
            <entry>
              <para>
              Specify a delimiter to be used that is different from the standard <literal>;</literal> delimiter.
              </para>
              <para>
              A non-standard delimiter will be required to be on a line of its own.
              If you specify <literal>-delimiter=/</literal> the following will work:
<programlisting>select *
from person
/
</programlisting>
              but putting the delimiter at the end of a line will <emphasis role="bold">not</emphasis> work:
<programlisting>select *
from person/
</programlisting>
              </para>
              <para>
                If this parameter is not specified, the SQL standard <literal>;</literal> delimiter will be used.
              </para>
            </entry>
          </row>

          <row>
            <entry id="include-param-encoding">-encoding</entry>
            <entry>
              Specify the encoding of the input file. If no encoding is specified,
              the default encoding for the current platform (operating system) is used.
            </entry>
          </row>

          <row>
            <entry>-verbose</entry>
            <entry>
              Controls the logging level of the executed commands.
              <literal>-verbose=true</literal> has the same effect as adding a
              <literal>WbFeedback on</literal> inside the called script.
              <literal>-verbose=false</literal> has the same effect as adding
              the statement <literal>WbFeedback off</literal> to the called script.
            </entry>
          </row>

          <row>
            <entry>-displayResult</entry>
            <entry>
              <para>
              By default any result set that is returned e.g. by a <literal>SELECT</literal> statement in the script will not be
              displayed. By specfying <literal>-displayResult=true</literal> those results will be displayed.
              </para>
            </entry>
          </row>

          <row>
            <entry>-printStatements</entry>
            <entry>
              <para>
                If true, every SQL statement will be printed before execution. This is mainly intended for console
                usage, but works in the GUI as well.
              </para>
            </entry>
          </row>

          <row>
            <entry>-showTiming</entry>
            <entry>
              <para>
                If true, display the execution time of every SQL statement and the overall execution time of the script.
              </para>
            </entry>
          </row>

          <row>
            <entry>-useSavepoint</entry>
            <entry>
              Control if each statement from the file should be guarded with a savepoint
              when executing the script. Setting this to <literal>true</literal> will make
              execution of the script more robust, but also slows down the processing
              of the SQL statements.
            </entry>
          </row>
          <row>
            <entry>-ignoreDropErrors</entry>
            <entry>
							Controls if errors resulting from DROP statements should be treated as an error or as a warning.
            </entry>
          </row>

          <row>
            <entry><literallayout>-searchFor
-replaceWith
-ignoreCase
-useRegex</literallayout></entry>
            <entry>
              <para>
              Defines search and replace parameters to change the SQL statements before they are sent to the
              database. This can e.g. be used to replace the schema name in DDL script that uses
              fully qualified table names.
              </para>
              <para>
                The replacement is done without checking the syntax of the statements. If the search value is
                contained in a string literal or a SQL comment, it is also replaced.
              </para>
            </entry>
          </row>

        </tbody>
      </tgroup>
    </informaltable>

    <section id="command-include-examples">
      <title>Examples</title>
      <para>Execute <literal>my_script.sql</literal></para>
      <programlisting>@my_script.sql;</programlisting>
      <para>Execute <literal>my_script.sql</literal> but abort on the first error</para>
      <programlisting>WbInclude -file="my_script.sql" -continueOnError=false;</programlisting>
      <para>
        Execute the script <literal>create_tables.sql</literal> and change all occurances of <literal>oldschema</literal>
        to <literal>new_schema</literal>
      </para>
      <programlisting>WbInclude -file=create_tables.sql -searchFor="oldschema." -replaceWith="new_schema."</programlisting>
      <para>
        Execute a large script that uses a non-standard statement delimiter:
      </para>
      <programlisting>WbInclude -file=insert_10million_rows.sql -delimiter='/';</programlisting>
    </section>
  </section>

  <section id="conditional-exec">
    <title>Conditional execution</title>
    <para>
      The following &wb-productname; commands support conditional execution based on variables:
			<itemizedlist>
        <listitem><literal><link linkend="command-wbinclude">WbInclude</link></literal></listitem>
        <listitem><literal><link linkend="command-copy">WbCopy</link></literal></listitem>
        <listitem><literal><link linkend="command-import">WbImport</link></literal></listitem>
        <listitem><literal><link linkend="command-export">WbExport</link></literal></listitem>
        <listitem><literal><link linkend="command-wbexec">WbSysExec</link></literal></listitem>
      </itemizedlist>
    </para>
    <para>
      Conditional execution is controlled using the following parameters:
    </para>
    &conditionals;
  </section>


  <section id="command-wbrunlb">
     <title>Extract and run SQL from a Liquibase ChangeLog - WbRunLB</title>
    <indexterm><primary>Liquibase</primary><secondary>Run SQL from Liquibase file</secondary></indexterm>

     <para>
       If you manage your stored procedures in Liquibase ChangeLogs, you can use this command to run the
       necessary SQL directly from the XML file, without the need to copy and paste it into &wb-productname;.
       This is useful when testing and developing stored procedures that are managed by a Liquibase changeLog.
     </para>

     <important>
       <para>
         This is NOT a replacement for Liquibase.
       </para>
       <para>
         <literal>WbRunLB</literal> will only extract SQL statements stored in <literal>&lt;sql&gt;</literal> or
         <literal>&lt;createProcedure&gt;</literal> tags or scripts referenced through the <literal>&lt;sqlFile&gt;</literal> tag.
       </para>
       <para>
         It will not convert any of the Liquibase tags to "real" SQL.
       </para>

       <para>
         <literal>WbRunLB</literal> will <emphasis role="bold">NOT</emphasis> update
         the Liquibase log table (<literal>DATABASECHANGELOG</literal>) nor will it check if the specified changeSet(s) have
         already been applied to the database.
       </para>
       <para>
         It is merely a convenient way to extract and run SQL statements stored in a Liquibase XML file!
       </para>
     </important>
     <para>
        The attribute <literal>splitStatements</literal> for the <literal>sql</literal>
        tag is evaluated. The delimiter used to split the statements follows the usual &wb-productname; rules (including the use
        of the <link linkend="understand-alternate-delim">alternate delimiter</link>).
     </para>

    <para><literal>WbRunLB</literal> supports the following parameters:</para>

    <informaltable frame="all">
      <tgroup cols="2" align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-file</entry>
            <entry>
              The filename of the Liquibase changeLog (XML) file. The <literal>&lt;include&gt;</literal> tag is NOT supported! SQL statements stored in files
              that are referenced using Liquibase's <literal>include</literal> tag will not be processed.
            </entry>
          </row>

          <row>
            <entry>-changeSet</entry>
            <entry>
              <para>
                A list of changeSet ids to be run. If this is omitted, then the SQL from all changesets (containing supported tags) are executed. The value
                specified can include the value for the author and the id, <literal>-changeSet="Arthur::42"</literal> selects the changeSet
                where <literal>author="Arthur"</literal> and <literal>id="42"</literal>. This parameter can be repeated in order to select
                multiple changesets: <literal>-changeSet="Arthur::42" -changeSet="Arthur::43"</literal>.
              </para>
              <para>
                You can specify wildcards before or after the double colon: <literal>-changeSet="*::42"</literal> will select all
                changesets with the id=42. <literal>-changeSet="Author::*"</literal> will select all changesets from "Arthur"
              </para>
              <para>
                If the parameter value does not contain the double colon it is assumed to be an ID only: <literal>-changeSet="42"</literal> is the same
                as <literal>-changeSet="*::42"</literal>
              </para>
              <para>
                If this parameter is omitted, all changesets are executed.
              </para>
              <para>
                This parameter supports auto-completion if the <literal>-file</literal> argument is specified.
              </para>
            </entry>
          </row>

          <row>
            <entry>-continueOnError</entry>
            <entry>
              Defines the behaviour if an error occurs in one of the statements.
              If this is set to <literal>true</literal> then script execution will continue
              even if one statement fails. If set to <literal>false</literal> script execution
      	      will be halted on the first error. The default value is <literal>false</literal>
            </entry>
          </row>

          <row>
            <entry>-encoding</entry>
            <entry>
              Specify the encoding of the input file. If no encoding is specified, UTF-8 is used.
            </entry>
          </row>

        </tbody>
      </tgroup>
     </informaltable>

   </section>

	<section id="pk-handling">
		<title>Handling tables or updateable views without primary keys</title>

		<section id="command-define-pk">
			<title>Define primary key columns - WbDefinePK</title>
			<para>
				To be able to directly edit data in the result set (grid) &wb-productname; needs
				a primary key on the underlying table. In some cases these primary keys are not present or
				cannot be retrieved from the database (e.g. when using updateable views).
				To still be able to automatically update a result based on those tables (without always
				manually defining the primary key) you can manually define a primary
				key using the <literal>WbDefinePk</literal> command.
			</para>
			<para>
				Assuming you have an updateable view called <literal>v_person</literal> where
				the primary key is the column <literal>person_id</literal>. When you simply do a
				<literal>SELECT * FROM v_person</literal>, &wb-productname; will prompt you for the
				primary key when you try to save changes to the data. If you run
			</para>

			<programlisting>WbDefinePk v_person=person_id</programlisting>
			<para>
				before retrieving the result, &wb-productname; will automatically
				use the <literal>person_id</literal> as the primary key (just as if this
				information had been retrieved from the database).
			</para>
			<para>To delete a definition simply call the command with an empty column list:</para>
			<programlisting>WbDefinePk v_person=</programlisting>
			<para>
				If you want to define certain mappings permanently, this can be done using
				a mapping file that is specified in the <link linkend="options-pkmapping">configuration file</link>.
				The file specified has to be a text file with each line containing one
				primary key definition in the same format as passed to this command. The global mapping will
				automatically be saved when you exit the application if a filename has been defined.
				If no file is defined, then all PK mappings that you define are lost when
				exiting the application (unless you explicitely save them using
				<link linkend="command-save-pkmap">WbSavePkMap</link>
			</para>

			<programlisting>v_person=person_id
v_data=id1,id2</programlisting>

			<para>
				will define a primary key for the view <literal>v_person</literal> and one for
				the view <literal>v_data</literal>. The definitions stored in that file can
				be overwritten using the <literal>WbDefinePk</literal> command, but those changes
				won't be saved to the file. This file will be read for all database connections and
				is not profile specific. If you have conflicting primary key definitions for
				different databases, you'll need to execute the <literal>WbDefinePk</literal> command
				each time, rather then specifying the keys in the mapping file.
			</para>

			<para>
				When you define the key columns for a table through the GUI, you have the option
				to remember the defined mapping. If this option is checked, then that mapping
				will be added to the global map (just as if you had executed <literal>WbDefinePk</literal>
				manually.
			</para>
			<note><para>
		The mappings will be stored with lowercase table names internally, regardless how you specify them.
			</para></note>

		</section>

		<section id="command-list-pk">
			<title>List defined primary key columns - WbListPKDef</title>
			<para>To view the currently defined primary keys, execute the command
			<literal>WbListPkDef</literal>.</para>
		</section>

		<section id="command-load-pkmap">
			<title>Load primary key mappings - WbLoadPKMap</title>
			<para>
				To load the additional primary key definitions from a file, you can
				use the the <literal>WbLoadPKMap</literal> command. If a filename is defined
				in the <link linkend="options-pkmapping">configuration file</link> then that
				file is loaded. Alternatively if no file is configured, or if you want to
				load a different file, you can specify the filename using the <literal>-file</literal>
				parameter.
			</para>
		</section>

		<section id="command-save-pkmap">
			<title>Save primary key mappings - WbSavePKMap</title>
			<para>
				To save the current primary key definitions to a file, you can
				use the the <literal>WbSavePKMap</literal> command. If a filename is defined
				in the <link linkend="options-pkmapping">configuration file</link> then the
				definition is stored in that file. Alternatively if no file is configured, or if you want to
				store the current mapping into a different file, you can specify the filename
				using the <literal>-file</literal> parameter.
			</para>
		</section>

	</section>

  <section id="command-fetchsize">
     <title>Change the default fetch size - WbFetchSize</title>
     <para>
       The default fetch size for a connection can be defined in the <link linkend="profile-fetch-size">connection profile</link>. Using the
       command <literal>WbFetchSize</literal> you can change the fetch size without changing the connection profile.
     </para>
     <para>
       The following script changes the default fetch size to 2500 rows and then runs a <literal>WbExport</literal> command.
     </para>
     <programlisting>WbFetchSize 2500;
WbExport -sourceTable=person -type=text -file=/temp/person.txt;
</programlisting>

     <para>
       <literal>WbFetchSize</literal> will not change the current connection profile.
     </para>
   </section>


  <section id="command-run-batch">
     <title>Run statements as a single batch - WbStartBatch, WbEndBatch</title>
     <para>
       To send several SQL Statements as a single "batch" to the database server, the two commands WbStartBatch and WbEndBatch can be used.
       All statements between these two will be sent as a single statement (using <literal>executeBatch()</literal>) to the server.
     </para>
     <para>
       Note that not all JDBC drivers support batched statements, and the flexibility what kind of statements can be batched varies between the
       drivers as well. Most drivers will not accept different types of statements e.g. mixing DELETE and INSERT in the same batch.
     </para>
     <para>
       To send a group of statements as a single batch, simply use the command <literal>WbStartBatch</literal> to mark the beginning and
       <literal>WbEndBatch</literal> to mark the end. You have to run all statements together either by using "Execute all" or by selecting all
       statements (including WbStartBatch and WbEndBatch) and then using "Execute selected". The following example sends all INSERT statements
       as a single batch to the database server:
     </para>
     <programlisting>WbStartBatch;
INSERT INTO person (id, firstname, lastname) VALUES (1, 'Arthur', 'Dent');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Ford', 'Prefect');
INSERT INTO person (id, firstname, lastname) VALUES (3, 'Zaphod', 'Beeblebrox');
INSERT INTO person (id, firstname, lastname) VALUES (4, 'Tricia', 'McMillian');
WbEndBatch;
COMMIT;
</programlisting>


  </section>
  <section id="command-selectblob">
    <title>Extracting BLOB content - WbSelectBlob</title>
    <para>
			To save the contents of a <literal>BLOB</literal> or <literal>CLOB</literal> column
      into an external file the <literal>WbSelectBlob</literal> command can be used. Most DBMS
      support reading of <literal>CLOB</literal> (character data) columns directly, so depending
      on your DBMS (and JDBC driver) this command might only be needed for binary data.
    </para>
    <para>
			The syntax is very similar to the regular <literal>SELECT</literal> statement, an additional
      <literal>INTO</literal> keyword specifies the name of the external file into which the
      data should be written:
    </para>
    <programlisting>WbSelectBlob blob_column
INTO c:/temp/image.bmp
FROM theTable
WHERE id=42;</programlisting>
    <para>
      Even if you specify more then one column in the column list, &wb-productname; will only
      use the first column. If the SELECT returns more then one row, then one
      output file will be created for each row. Additional files will be created with
      a counter indicating the row number from the result. In the above
      example, image.bmp, image_1.bmp, image_3.bmp and so on, would be created.
    </para>
		<para>
			<literal>WbSelectBlob</literal> is intended for an ad-hoc retrieval of a single LOB column.
			If you need to extract the contents of several LOB rows and columns it is recommended to
			use the <link linkend="command-export">WbExport</link> command.
		</para>
    <para>
			You can also manipulate (save, view, upload) the contents of BLOB columns in a result set.
			Please refer to <xref linkend="blob-support"/> for details.
    </para>

  </section>

  <section id="command-wbfeedback">
    <title>Control feedback messages - WbFeedback</title>
    <para>
      Normally &wb-productname; prints the results for each statement
      into the message panel. As this feedback can slow down the execution
      of large scripts, you can disable the feedback using the <literal>WbFeedback</literal>
      command. When <literal>WbFeedback OFF</literal> is executed, only a summary of the
      number of executed statements will be displayed, once the script execution has
      finished. This is the same behaviour as selecting "Consolidate script log" in the
      options window. The only difference is, that the setting through <literal>WbFeedback</literal>
      is temporary and does not affect the global setting.
    </para>
    <para>
      <literal>WbFeedback traceOn</literal> can be used to enable printing of every executed statement
      to the screen. The SQL statement printed will be the one after variable substitution and macro expansion.
      <literal>WbFeedback traceOff</literal> will turn tracing of statements off.
    </para>
  </section>

  <section id="command-set">
    <title>Setting connection properties - SET</title>
    <para>
      The <literal>SET</literal> command is passed on directly to the driver,
      except for the parameters described in this chapter because they
      have an equivalent JDBC call which will be executed instead.
    </para>
    <para>
      Oracle does not have a SQL set command. The SET command that is available
      in SQL*Plus is a specific SQL*Plus command and will not work with other client software.
      Most of the SQL*Plus SET commands only make sense within SQL*Plus (e.g. formatting of the results).
      To be able to run SQL scripts that are intended for Oracle SQL*PLus, any error reported
      from the SET command when running against an Oracle database will silently be ignored and
      only logged as a warning.
    </para>

    <section id="command-set-feedback">
      <title>FEEDBACK</title>
      <para>
				<literal>SET feedback ON/OFF</literal> is equivalent to the <link linkend="command-wbfeedback">WbFeedback</link>
				command, but mimics the syntax of Oracle's SQL*Plus utility.
      </para>
    </section>

    <section id="command-set-autocommit">
      <title>AUTOCOMMIT</title>
      <para>
				With the command <literal>SET autocommit ON/OFF</literal> autocommit can be turned on or
				off for the current connection. This is equivalent to setting the autocommit property
				in the <link linkend="profile-jdbc-properties">connection profile</link> or toggling
				the state of the
				<menuchoice><guimenu>SQL</guimenu><guimenuitem>Autocommit</guimenuitem></menuchoice>
				menu item.
      </para>
    </section>

    <section id="command-set-maxrows">
      <title>MAXROWS</title>
      <para>
        Limits the number of rows returned by the next statement. The behaviour of this command
        is a bit different between the console mode and the GUI mode. In console mode, the maxrows
        stay in effect until you explicitely change it back using <literal>SET maxrows</literal> again.
      </para>
      <para>
        In GUI mode, the maxrows setting is only in effect for the script currently being executed and
        will only temporarily overwrite any value entered in the "Max. Rows" field.
      </para>
    </section>
  </section>

  <section id="set-oracle">
    <title>Changing Oracle session behavior - SET</title>
    <para>
      The following options for the SET command are only available when being connected to an Oracle database.
    </para>
    <section id="command-set-serveroutput">
      <title>SERVEROUTPUT</title>
      <para>
        <literal>SET serveroutput on</literal> is equivalent to the <link linkend="command-dbms-output">ENABLEOUT</link>
        command and <literal>SET serveroutput off</literal> is equivalent to <link linkend="command-dbms-output">DISABLEOUT</link> command.
      </para>
    </section>

    <section id="command-set-autotrace">
      <title>AUTOTRACE</title>
      <para>
        This enables or disables the <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_twelve040.htm#i2698680">"autotrace"</ulink> feature similar to the one in SQL*Plus.
        The syntax is equivalent to the SQL*Plus command and supports the following options:
        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <colspec colname="c1"  colwidth="2.5cm" />
            <colspec colname="c2"/>
            <thead>
              <row>
                <entry>Option</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry>ON</entry>
                <entry>
                  <para>
                    Turns on autotrace mode. After running a statement, the statement result (if it
                    is a query), the statistics and the execution plan for that statement are displayed as separate result tabs.
                  </para>
                </entry>
              </row>
              <row>
                <entry>OFF</entry>
                <entry>
                  <para>
                    Turns off the autotrace mode.
                  </para>
                </entry>
              </row>
              <row>
                <entry>TRACEONLY</entry>
                <entry>
                  <para>
                    Like <literal>ON</literal>, but does not display the result of a  query.
                  </para>
                </entry>
              </row>
              <row>
                <entry>REALPLAN</entry>
                <entry>
                  <para>
                    This is an extension to the SQL*Plus <literal>EXPLAIN</literal> mode. Using <literal>EXPLAIN</literal>, &wb-productname; will
                    simply run an <literal>EXPLAIN PLAN</literal> for the statement (and the statement will not be executed) - this is the same
                    behavior as SQL*Plus' <literal>EXPLAIN</literal> mode.
                  </para>
                  <para>
                    Using <literal>REALPLAN</literal>, &wb-productname; will run the statement and then retrieve the execution plan
                    that was generated while running the statement. This might yield a different result than regular <literal>EXPLAIN</literal>
                    mode. The actual plan also contains more details about estimated and actual row counts. This plan is retrieved
                    using <literal>dbms_xplan.display_cursor()</literal>. If <literal>REALPLAN</literal> is used, the actual SQL statement
                    sent to the server will be changed to include the <literal>GATHER_PLAN_STATISTICS</literal> hint.
                  </para>
                </entry>
              </row>

            </tbody>
          </tgroup>
        </informaltable>
        </para>
      <para>
        The information shown in autotrace mode can be controlled with two options after the <literal>ON</literal> or <literal>TRACEONLY</literal>
        parameter. <literal>STATISTICS</literal> will fetch the statistics about the execution and <literal>EXPLAIN</literal>
        which will display the execution plan for the statement. If not additional parameter is specified, <literal>EXPLAIN STATISTICS</literal> is used.
      </para>
      <para>
        If statistics are requested, query results will be fetched from the database server but they will not be displayed.
      </para>
      <para>
        Unlike SQL*Plus, the keywords (<literal>AUTOTRACE, STATISTICS, EXPLAIN</literal>) cannot be abbreviated!
      </para>
      <para>
        For more information about the prerequisites for the autotrace mode, see the description of
        <link linkend="oracle-autotrace">DBMS specific features</link>.
      </para>
    </section>
  </section>

  <section id="command-wbmode">
    <title>Changing read only mode - WbMode</title>
    <para>
      In the <link linkend="profile-confirm-updates">connection profile</link> two options can be specified
      to define the behavior when running commands that might change or update the database: a "read only" mode
      that ignores such commands and a "confirm all" mode, where you need to confirm any statement that might change
      the database.
    </para>
    <para>
      These states can temporarily be changed without changing the profile using the <literal>WbMode</literal> command.
    </para>

    <note>
      <para>This changes the mode for all editor tabs, not only for the
      one where you run the command.</para>
    </note>

    <para>
      Parameters for the <literal>WbMode</literal> command are:
			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1"  colwidth="2.5cm" />
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>reset</entry>
							<entry>
								<para>
									Resets the flags to the profile's definition
								</para>
							</entry>
						</row>
						<row>
							<entry>normal</entry>
							<entry>
								<para>
									Makes all changes possible (turns off read only and confirmations)
								</para>
							</entry>
						</row>
						<row>
							<entry>confirm</entry>
							<entry>
								<para>
									Enables confirmation for all updating commands
								</para>
							</entry>
						</row>
						<row>
							<entry>readonly</entry>
							<entry>
								<para>
									Turns on the read only mode
								</para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
    </para>

    <para>
      The following example will turn on read only mode for the current connection, so that any
      subsequent statement that updates the database will be ignored
    </para>
    <programlisting>WbMode readonly;</programlisting>

    <para>
      To change the current connection back to the settings from the profile use:
    </para>
    <programlisting>WbMode reset;</programlisting>

  </section>

  <section id="command-rowcount">
    <title>Count rows for all tables - WbRowcCount</title>
    <para>
      This command retrieves the row counts for several tables at once. If called without parameters
      the row counts for all tables accessible to the current user are counted.
    </para>
    <para>
			The command supports the following parameters to specify the tables (or views) to be counted.
			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1"  colwidth="2.5cm" />
					<colspec colname="c2"/>
					<thead>
						<row>
							<entry>Parameter</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody valign="top">
						<row>
							<entry>-schema</entry>
							<entry>
								<para>
									Count the rows for tables from the given schemas, e.g. <literal>-schema=public,local</literal>
								</para>
                <para>
                  The parameter supports auto-completion and will show a list of available schemas.
                </para>
							</entry>
						</row>
						<row>
							<entry>-catalog</entry>
							<entry>
								<para>
									Show only indexes for the specified catalog e.g. <literal>-catalog=other_db</literal>
								</para>
							</entry>
						</row>
						<row>
							<entry>-objects</entry>
							<entry>
								<para>
                  Show only the row counts for the tables (or views) specified by the parameter. The parameter value
                  can contain wildcards, e.g. <literal>-objects=PR%,ORD%</literal> will count the rows
                  for all tables with names that either start with <literal>PR</literal> or <literal>ORD</literal>
								</para>
                <para>
                  The parameter supports auto-completion and will show a list of available tables.
                </para>
							</entry>
						</row>
						<row>
							<entry>-types</entry>
							<entry>
								<para>
                  Define the types of objects which should be selected. By default only tables are considered.
                  If you also want to count the rows for views, use <literal>-types=table,view</literal>
								</para>
                <para>
                  The parameter supports auto-completion and will show a list of available object types.
                </para>
							</entry>
						</row>
						<row>
							<entry>-orderBy</entry>
							<entry>
								<para>
                  Defines how the resulting table should be sorted. By default it will be sorted
                  alphabetically by table name. The <literal>-orderBy</literal> parameter specifies the columns to sort the result by.
                  By default, sorting is done ascending, if you want a descending sort, append <literal>:desc</literal>
                  to the column name, e.g.: <literal>-orderBy="rowcount:desc"</literal>.
                </para>
                <para>
                  So sort by multiple columns separate the column names with a comma: <literal>-orderBy="rowcount:desc,name:desc"</literal>
                  or <literal>-orderBy="rowcount,name:desc"</literal>
								</para>
							</entry>
						</row>
						<row>
							<entry>-excludeColumns</entry>
							<entry>
                <para>Possible values: <literal>catalog</literal>, <literal>schema</literal>, <literal>type</literal></para>
                <para>
                  By default <literal>WbRowCount</literal> will display the same columns as the table list in the
                  DbExplorer. If not all columns are needed or wanted, this parameter can be used to exclude
                  certain columns.
                </para>
								<para>
                  You can specify a comma separated list of columns to be excluded, e.g. <literal>-excludeColumns=type,catalog</literal>.
                  The columns <literal>ROWCOUNT</literal> and <literal>NAME</literal> can not be excluded.
								</para>
                <para>
                  The name <literal>database</literal> can be used instead of <literal>catalog</literal>.
                </para>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</para>
    <para>
      If none of the above parameters are used, <literal>WbRowCount</literal> assumes that a list ot table names was specified.
      <literal>WbRowCount person,address,orders</literal>is equivalent to <literal>WbRowCount -objects=person,address,orders</literal>. When
      called without any parameters the row counts for all tables accessible to the current user will be displayed.
    </para>
    <para>
      Unlike the <link linkend="dbexplorer-rowcount">Count rows</link> item in the DbExplorer, <literal>WbRowCount</literal>
      displays the result for all tables once it is finished. It does not incrementally update the output.
    </para>
  </section>

  <section id="command-connect">
    <title>Change the connection for a script - WbConnect</title>

    <para>
			With the <literal>WbConnect</literal> command, the connection for the currently running script can be changed.
		</para>

		<para>
			When this command is run in GUI mode, the connection is <emphasis role="bold">only</emphasis>
			changed for the remainder of the script execution. Therefor at least one other statement should be
			executed together with the <literal>WbConnect</literal> command. Either by running
			the complete script of the editor or selecting the <literal>WbConnect</literal> command
			together with other statements. Once the script has finished, the connection is closed
			and the "global" connection (selected in the connect dialog) is active again. This also applies
			to scripts that are run in <link linkend="using-scripting">batch mode</link> or
			scripts that are started from within the console using
			<literal><link linkend="command-wbinclude">WbInclude</link></literal>.
		</para>

		<para>
			When this command is entered directly in the command line of the
			<link linkend="console-mode">console mode</link>, the current connection is closed and the
			new connection is kept open until the application ends, or a new connection is established
			using <literal>WbConnect</literal> on the command line again.
		</para>

	  <para>
			There are three different ways to specify a connection:
		</para>

    <section id="command-connect-profile-arg">
      <title>By specifying a profile</title>
      <informaltable frame="all">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="3.6cm" />
          <colspec colname="c2" />
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody valign="top">
          <row>
            <entry>-profile</entry>
            <entry>
              <para>Specifies the profile name to connect to.</para>
              <para>
                This parameter is ignored if either <literal>-connection</literal> or the detailed connection informations
                are supplied individually.
              </para>
            </entry>
          </row>
          <row>
            <entry>-profileGroup</entry>
            <entry>Specifies the group in which the profile is stored. This is only required if the profile name is not unique</entry>
          </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>

    <section id="command-connect-descriptor-arg">
      <title>By specifying a simple connection string</title>
      <informaltable frame="all">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="3.6cm" />
          <colspec colname="c2" />
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody valign="top">
            <row id="connect-descriptor">
              <entry>-connection</entry>
              <entry>
                &connect-descriptor;
                <para>
                  If an appropriate driver is already configured the driver's classname or the JAR file don't have to be specified.
                </para>
                <para>
                  If an appropriate driver is not configured, the driver's jar file must be specified:
                  <simpara>
                  <literal>"username=foo,password=bar,url=jdbc:postgresql://localhost/mydb,driverjar=/etc/drivers/postgresql.jar"</literal>
                  </simpara>
                  &wb-productname; will try to detect the driver's classname automatically (based on the JDBC URL).
                </para>
                <para>
                  If this parameter is specified, <literal>-profile</literal> is ignored.
                </para>
                <para>
                  The individual parameters controlling the connection <emphasis>behavior</emphasis>
                  can be used together with <literal>-connection</literal>, e.g. <literal>-autocommit</literal> or <literal>-fetchSize</literal>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

    </section>
    <section id="command-connect-args">
      <title>By specifying all connection attributes</title>
      <informaltable frame="all">
        <tgroup cols="2">
          <colspec colname="c1" colwidth="3.6cm" />
          <colspec colname="c2" />
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>

          <tbody valign="top">
            &common-connect-args;
          </tbody>
        </tgroup>
      </informaltable>
    </section>

		<para>
			If none of the parameters is supplied when running the command, it is assumed that any value
			after <literal>WbConnect</literal> is the name of a connection profile, e.g.:
		</para>
		<programlisting>WbConnect production</programlisting>
		<para>
			will connect using the profile name <literal>production</literal>, and is equivalent to
		</para>
		<programlisting>WbConnect -profile=production</programlisting>

  </section>

  <section id="command-history">
    <title>Show the history of SQL statements - WbHistory</title>
    <para>
      This command is primarily intended for <link linkend="console-mode">console mode</link> to show the statements
      that have been executed. In console mode the number of any of the listed statements can be
      entered to re-execute that statement from the history directly.
    </para>
  </section>

  <section id="command-xslt">
    <title>Run an XSLT transformation - WbXslt</title>

    <para>
      Transforms an XML file via a XSLT stylesheet. This can be used to format
      XML input files into the correct format for &wb-productname; or to transform
      the output files that are generated by the various &wb-productname; commands.
    </para>
    <para>Parameters for the XSLT command:</para>

    <informaltable frame="all">
      <tgroup cols="2"  align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">

          <row>
            <entry>-inputfile</entry>
            <entry>The name of the XML source file.</entry>
          </row>

          <row>
            <entry>-xsltoutput</entry>
            <entry>The name of the generated output file.</entry>
          </row>

          <row>
            <entry>-stylesheet</entry>
            <entry>The name of the XSLT stylesheet to be used.</entry>
          </row>

          &common-xslt-args;

        </tbody>
      </tgroup>
    </informaltable>
  </section>

  <section id="command-wbexec">
    <title>Running operating system commands - WbSysExec</title>
    <para>
      To run an operating system command use <literal>WbSysExec</literal> followed by a valid command for your operating system.
    </para>
    <para>
      To run the program <literal>ls</literal> the following call can be used: <programlisting>WbSysExec ls</programlisting>
    </para>
    <para>
      To run Windows commands that are internal to <literal>cmd.exe</literal> such as <literal>DIR</literal>, you
      must call <literal>cmd.exe</literal> with the <literal>/c</literal> switch to make sure cmd.exe is terminated:
      <programlisting>WbSysExec cmd /c dir /n</programlisting>
    </para>
    <para>
      If you need to specify a working directory for the program, or want to specify the command line arguments
      individually, a second format is available using the standard &wb-productname; parameter handling:
    </para>

    <para>
      <literal>WbSysExec</literal> supports <link linkend="conditional-exec">conditional execution</link>
    </para>

    <informaltable frame="all">
      <tgroup cols="2"  align="left">
        <colspec colname="c1" colwidth="4cm" />
        <colspec colname="c2" />
        <thead>
          <row>
            <entry>Parameter</entry>
            <entry>Description</entry>
          </row>
        </thead>

        <tbody valign="top">
          <row>
            <entry>-program</entry>
            <entry>The name of the executable program</entry>
          </row>
          <row>
            <entry>-argument</entry>
            <entry>One commandline argument for the program. This parameter can be repeated multiple times.</entry>
          </row>
          <row>
            <entry>-dir</entry>
            <entry>The working directory to be used when calling the external program</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>
      To run an internal Windows command using the second format, use the following syntax:
    </para>
    <programlisting>WbSysExec -program='cmd.exe' -argument='/c' -argument='dir /n' -dir='c:\temp\'</programlisting>
  </section>

  <section id="command-sysopen">
    <title>Opening a file with the default application - WbSysOpen</title>
    <para>
      <literal>WbSyOpen</literal> can be used to open a file with the default application of the operating system.
    </para>
    <programlisting>WbExport -file=c:/temp/person.txt -sourceTable=person -type=text -header=true;
WbSysOpen c:/temp/person.txt;</programlisting>

    <note id="console-external-editor">
      <para>
        Due to limitations of the Java console mode, neither <literal>WbSysExec</literal> nor <literal>WbSysOpen</literal> can be used to
        run a text editor (vi, vim) in console mode (and putting &wb-productname; into the background).
      </para>
    </note>

  </section>

  <section id="command-setconfig">
    <title>Change an internal configuration parameter - WbSetConfig</title>
    <indexterm><primary>Configuration</primary><secondary>change advanced configuration properties</secondary></indexterm>
    <para>
      Not all configuration parameters are available through the <link linkend="options">Options Dialog</link> and have
      to be changed manually in the file <link linkend="config-dir">workbench.settings</link>. Editing the file requires
      to close the application.
    </para>
    <para>
      When using <literal>WbSetConfig</literal> configuration properties can be changed permanently without restarting &wb-productname;.
    </para>
    <para>
      Any value that is changed through this command will be saved automatically in <literal>workbench.settings</literal>
      when the application is closed.
    </para>
    <para>
      If you want to e.g. disable the use of Savepoints in the SQL statements entered interactively, the following
      command will turn this off for PostgreSQL:
    </para>
    <programlisting>WbSetConfig workbench.db.postgresql.sql.usesavepoint=false</programlisting>
    <para>
      For a list of configuration properties that can be changed, please refer to <link linkend="settings">Advanced configuration options</link>
    </para>
    <para>
      If you supply only the property key, the current value will be displayed. If no argument is supplied for <literal>WbSetConfig</literal> all
      properties are displayed. You can also supply a partial property key. <literal>WbSetConfig workbench.db.postgresql</literal> will list
      all PostgreSQL related properties. You can directly edit the properties in the result set.
    </para>
    <para>
      The value <literal>[dbid]</literal> inside the property name will get replaced with the current
      <link linkend="dbid">DBID</link>.
    </para>
    <para>
      The following command changes the property named <literal>workbench.db.postgresql.ddlneedscommit</literal>
      if the current connection is against a PostgreSQL database:
      <programlisting>WbSetConfig workbench.db.[dbid].ddlneedscommit=true</programlisting>
    </para>
  </section>

</section>