<section id="dbms-specific">
	<title>DBMS specific features</title>

  <section id="dbms-specific-postgres">
     <title>PostgreSQL specific features</title>

     <section id="postgres-open-trans">
       <indexterm><primary>PostgreSQL</primary><secondary>check for pending transactions</secondary></indexterm>
       <title>Checking for un-committed changes</title>
       <para>
         Before a SQL panel (or the application) is closed, &wb-productname; will check if the current connection
         has any un-committed changes (e.g. an <literal>INSERT</literal> without a <literal>COMMIT</literal>).
         This is done by checking the <ulink url="http://www.postgresql.org/docs/current/static/view-pg-locks.html"><literal>pg_locks</literal></ulink>
         system view. The information in this view might not always be 100% correct and can report open transactions even though
         there are none.
       </para>
       <para>
         The checking for un-committed changes can be controlled through the <link linkend="profile-open-trans">connection profile</link>.
       </para>
     </section>
     <section id="postgres-copy-api">
       <indexterm><primary>PostgreSQL</primary><secondary>COPY</secondary></indexterm>
       <title>Using the COPY API for client side files</title>
       <para>
         <link linkend="command-import">WbImport</link> can make use of PostgreSQL's <literal>COPY</literal> API
         to send client side files to the server. The SQL statement <literal>COPY from stdin</literal> does not work when
         executed using the JDBC driver. But <literal>WbImport</literal> can make use of the <link linkend="import-pg-copy">COPY API</link>
         by using the parameter <literal>-usePgCopy</literal>
       </para>
     </section>
     <section id="postgres-pgpass">
       <indexterm><primary>PostgreSQL</primary><secondary>.pgpass</secondary></indexterm>
       <indexterm><primary>PostgreSQL</primary><secondary>pgpass.conf</secondary></indexterm>
       <title>Using .pgpass</title>
       <para>
         If username, password or both are empty in a <link linkend="profiles">connection profile</link>, &wb-productname; will
         try to use the information stored in the <ulink url="http://www.postgresql.org/docs/current/static/libpq-pgpass.html">password file</ulink> file
         or the <ulink url="http://www.postgresql.org/docs/current/static/libpq-envars.html">environment variables</ulink>
         (<literal>PGPASS</literal>,  <literal>PGUSER</literal>) the same way as libpq uses them.
       </para>
     </section>

		<section id="pg-statement-savepoint">
			<title>Using savepoints for single statements</title>
			<para>
				PostgreSQL marks a complete transaction as failed if a only single statement fails.
        In such a case the transaction cannot be committed, e.g.
				consider the following script:
			</para>
			<programlisting>INSERT INTO person (id, firstname, lastname) VALUES (1, 'Arthur', 'Dent');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Zaphod', 'Beeblebrox');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Ford', 'Prefect');
COMMIT;</programlisting>
			<para>
				As the ID column is the primary key, the third insert will fail with a unique key violation.
				In PostgreSQL you cannot commit anyway and thus persist the first two <literal>INSERT</literal>s.
			</para>
			<para>
				This problem can only be solved by using a SAVEPOINT before and after each
				statement. In case that statement fails, the transaction can be rolled back to the state
				before the statement and the reminder of the script can execute.
			</para>
			<para>
				Doing this manually is quite tedious, so you can tell &wb-productname; to do this
				automatically for you by setting the properties:
			</para>
			<programlisting>workbench.db.postgresql.ddl.usesavepoint=true
workbench.db.postgresql.sql.usesavepoint=true
</programlisting>
			<para>
				in the file <link linkend="settings">workbench.settings</link>. If this is enabled,
        &wb-productname; will issue a <literal>SET SAVEPOINT</literal> before running each statement
        and will release the savepoint after the statement. If the statement failed, a rollback to the
        savepoint will be issued that will mark the transaction as "clean" again. So in the above
        example (with <literal>sql.usesavepoint</literal> set to <literal>true</literal>), the last
        statement would be rolled back automatically but the first two <literal>INSERT</literal>s
        can be committed (this will also required to turn on the "Ignore errors" option is enabled).
      </para>

      <para>
        If you want to use the modes <link linkend="import-update-mode"><literal>update/insert</literal></link> or
				<link linkend="import-update-mode"><literal>insert/update</literal></link>
				for <link linkend="command-import">WbImport</link>, you should also add the
				property:
			</para>
			<programlisting>workbench.db.postgresql.import.usesavepoint=true</programlisting>
      <para>
        to enable the usage of savepoints during imports. This setting also affects
        the <literal>WbCopy</literal> command.
      </para>
      <para>
        This is not necessary when the using the mode <link linkend="import-native-upsert"><literal>upsert</literal></link>
        or <link linkend="import-native-insert-ignore"><literal>insertIgnore</literal></link> with Postgres 9.5
      </para>
      <para>
        You can also use the parameter <literal>-useSavepoint</literal> for the
        <literal>WbImport</literal> and <literal>WbCopy</literal> commands to control the use of
        savepoints for each import.
      </para>
      <para>
        <note>
        Using savepoints can slow down the import substantially.
        </note>
      </para>
		</section>

    <section id="pg-idle-transaction">
      <title>Preventing connections with "idle in transaction" state</title>
      <para>
        Postgres has a very strict transaction concept which means that even a simple <literal>SELECT</literal> statement
        starts a transaction. This has some implications on concurrency, the most obvious one is that
        tables that are "used" in a transaction (because a query has retrieved some values) cannot be modified
        using DDL statements (<literal>ALTER TABLE</literal>). Connections to the server that do this have the status
        <literal>idle in transaction</literal> as opposed to just "idle".
      </para>
      <para>
        There are two ways to prevent this:
         <itemizedlist>
           <listitem>Working with auto-commit enabled, so that each query is automatically committed. This is how pgAdmin and psql work by default</listitem>
           <listitem>If you don't want to work with auto-commit enabled, these transactions need to be ended properly by running
             a <literal>rollback</literal> or <literal>commit</literal> when the query is finished</listitem>
         </itemizedlist>
      </para>
      <para>
        &wb-productname; can be configured to do the second approach automatically, by <link linkend="command-setconfig">setting the configuration property</link>
        <literal>workbench.db.postgresql.transaction.readonly.end</literal> to one of the following values:
      </para>
      <para>
         <itemizedlist>
           <listitem>never</listitem>
           <listitem>rollback</listitem>
           <listitem>commit</listitem>
         </itemizedlist>
         The feature is disabled if the value <literal>never</literal> is configured. The other two values control how
         the transaction is ended: either by running a <literal>rollback</literal> or a <literal>commit</literal>
      </para>
      <para>
        The statement to end the transaction will <emphasis role="bold">only</emphasis> be sent to the server,
        if the current transaction has not modified anything in the database. Once a real change has been done
        by running an DML or DDL statement, nothing will be sent automatically.
      </para>
    </section>

  </section>

  <section id="dbms-specific-oracle">
     <title>Oracle specific features</title>
     <section id="oracle-open-trans">
       <indexterm><primary>Oracle</primary><secondary>check for pending transactions</secondary></indexterm>
       <title>Checking for un-committed changes</title>
       <para>
         Before a SQL panel (or the application) is closed, &wb-productname; will check if the current connection
         has any un-committed changes (e.g. an <literal>INSERT</literal> without a <literal>COMMIT</literal>).
         This is done by checking the <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e25513/dynviews_3114.htm"><literal>V$TRANSACTION</literal></ulink>
         system view.
       </para>
       <para>
         <note>By default a regular user does not have <literal>SELECT</literal> privilege on <literal>V$TRANSACTION</literal>,
         please grant the privilege before enabling this feature.</note>
       </para>
       <para>
         The checking for un-committed changes can be controlled through the <link linkend="profile-open-trans">connection profile</link>.
       </para>
     </section>

     <section id="oracle-autotrace">
       <indexterm><primary>Oracle</primary><secondary>autotrace</secondary></indexterm>
       <title>SQL*Plus autotrace mode</title>

       <para>
         &wb-productname; supports the a mode similar to <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_twelve040.htm#i2698680">"autotrace"</ulink> mode in SQL*Plus.
         The command to turn on autotrace is the same as in SQL*Plus and supports the same options.
         For details see the description of the <link linkend="command-set-autotrace">SET</link> command.
       </para>
       <para>
         The current user needs to have the <ulink url="http://docs.oracle.com/cd/E11882_01/server.112/e16604/ch_eight.htm#i1037226"><literal>PLUSTRACE</literal></ulink>
         role in order to be able to see statement statistics (which is required by SQL*Plus as well).
         The <literal>PLUSTRACE</literal> role grants the <literal>SELECT</literal>
         privilege on the system views: <literal>V$SESSTAT</literal>, <literal>V$STATNAME</literal> and <literal>V$MYSTAT</literal>. The role
         is not required for the <literal>traceonly explain</literal> option.
       </para>

       <para>
         As an extension to the Oracle syntax, &wb-productname; supports the keyword <literal>realplan</literal> as a
         substitute for <literal>explain</literal>. In that case the execution plan is also displayed but not by
         using <literal>EXPLAIN PLAN</literal> but by retrieving the actual execution plan that is available
         via <literal>dbms_xplan.display_cursor()</literal>. In order to use that package, the execute SQL
         will be changed by &wb-productname;. It will prepend it with a unique identifier so that the SQL can be
         found again in Oracle's system views and it will add the <literal>gather_plan_statistics</literal> hint
         to the statement in order to get more detailed statistics in the execution plan.
       </para>
       <para>
         In order to see the "real" execution plan, use <literal>set autotrace traceonly realplan</literal> instead
         of <literal>set autotrace traceonly explain</literal>.
       </para>
       <para>
         When using <literal>statistics</literal> together with <literal>explain</literal> or <literal>realplan</literal>,
         &wb-productname; will have to retrieve the generated <literal>SQL_ID</literal> in order to get the
         execution plan using <literal>dbms_xplan.display_cursor()</literal>. To use that function the SQL_ID is required
         which is retrieved from <literal>V$SQL</literal> using a unique comment that is added to the SQL statement
         before it is sent to the database. Querying <literal>V$SQL</literal> based on the column <literal>SQL_TEXT</literal>
         is quite an expensive operation and might create unwanted latch contention on the server. If you want to
         avoid that overhead do not use the <literal>statistics</literal> option when also displaying the execution plan.
       </para>
       <section id="ora-autotrace-examples">
         <title>Examples</title>
         <para>
           Show statistics without retrieving the actual data:
         </para>
         <programlisting>set autotrace traceonly statistics</programlisting>

         <para>
           Retrieve the data and show statistics
         </para>
         <programlisting>set autotrace on statistics</programlisting>

         <para>
           Display the statistics and the execution plan but do not retrieve the data
         </para>
         <programlisting>set autotrace traceonly explain statistics</programlisting>

         <para>
           Display the statistics and the actual execution plan but do not retrieve the data
         </para>
         <programlisting>set autotrace traceonly realplan statistics</programlisting>

       </section>
     </section>

     <section id="oracle-show">
       <indexterm><primary>Oracle</primary><secondary>show system information</secondary></indexterm>
       <title>Using SQL*Plus' SHOW command</title>
       <para>
         &wb-productname; supports most of the parameters and options the <literal>SHOW</literal> from SQL*Plus does.

        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <colspec colname="c1"/>
            <colspec colname="c2" />
            <thead>
              <row>
                <entry>SHOW&nbsp;option</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody valign="top">
              <row>
                <entry>ERRORS</entry>
                <entry>Displays errors from the last PL/SQL compilation.</entry>
              </row>
              <row>
                <entry>PARAMETERS</entry>
                <entry>
                  <para>Displays configuration parameters.
                    Unlike SQL*Plus you can supply multiple parameters separated with a comma: <literal>show parameter memory,sga</literal> will show
                    the values for all parameters that contain the string <literal>memory</literal> or <literal>sga</literal>.
                  </para>
                  <para>As with SQL*Plus, you need the <literal>SELECT</literal> privilege on <literal>V_$PARAMETER</literal>
                  to use the <literal>PARAMETERS</literal> option.</para>
                </entry>
              </row>
              <row>
                <entry>SGA</entry>
                <entry>
                  <para>Displays memory information.</para>
                  <para>
                    As with SQL*Plus, you need <literal>SELECT</literal> privilege on
                    <literal>V_$SGA</literal> to use the <literal>sga</literal> (or <literal>sgainfo</literal> option.
                  </para>
                </entry>
              </row>
              <row>
                <entry>SGAINFO</entry>
                <entry>Displays extended memory information not available in SQL*Plus.</entry>
              </row>
              <row>
                <entry>RECYCLEBIN</entry>
                <entry>Shows the content of the recyclebin.</entry>
              </row>
              <row>
                <entry>USER</entry>
                <entry>Shows the current user.</entry>
              </row>
              <row>
                <entry>AUTOCOMMIT</entry>
                <entry>Shows the state of the autocommit property.</entry>
              </row>
              <row>
                <entry>LOGSOURCE</entry>
                <entry>Displays the location of the archive logs.</entry>
              </row>
              <row>
                <entry>EDITION</entry>
                <entry>Shows the edition of the current database.</entry>
              </row>
              <row>
                <entry>CON_ID</entry>
                <entry>Displays the id of the current container database (only for 12c)</entry>
              </row>
              <row>
                <entry>PDBS</entry>
                <entry>Displays the list of pluggable databases (only for 12c)</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
       </para>
     </section>

     <section id="oracle-source-dbms-metadata">
       <indexterm><primary>Oracle</primary><secondary>DBMS_METADATA</secondary></indexterm>
       <title>Using DBMS_METADATA for source retrieval</title>
       <para>
        &wb-productname; uses the information returned by the JDBC driver to re-create the source
        of database objects (tables, views, ...). The source generated this way will not always match
        the source generated by the Oracle.
       </para>
       <para>
         The use of <literal><ulink url="http://docs.oracle.com/cd/E11882_01/appdev.112/e40758/d_metada.htm">DBMS_METADATA</ulink></literal>
         for object source retrieval is controlled by configuration properties.
       </para>
       <para>
         The property <literal>workbench.db.oracle.use.dbmsmeta</literal>
         can be used to controll the use for all object types. When set to <literal>true </literal>
         the source for all objects will be retrieved using <literal>DBMS_METADATA</literal>.
       </para>
       <para>
         The use of <literal>DBMS_METADATA</literal> can also be controlled for a specific object type by appending
         the type name to the property name <literal>workbench.db.oracle.use.dbmsmeta</literal>. The following types
         can be configured:
         <itemizedlist>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.table</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.mview</literal> (for MATERIALIZED VIEWs)</listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.index</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.view</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.sequence</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.synonynm</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.procedure</literal> (includes packages)</listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.trigger</literal></listitem>
           <listitem><literal>workbench.db.oracle.use.dbmsmeta.constraint</literal> (for FK and PK constraints)</listitem>
         </itemizedlist>
         The value of a specific object type overrides the global setting.
       </para>
     </section>

  </section>

</section>