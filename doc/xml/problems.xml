<section id="troubleshooting">
	<title>Common problems</title>

  <section id="driver-not-found">
    <title>The driver class was not found</title>
    <para>
      If you get an error <literal>"Driver class not registered"</literal> or
      <literal>"Driver not found"</literal> please check the following settings:
      <itemizedlist>
        <listitem><para>Make sure you have specified the correct location of the jar file. Some drivers (e.g. for IBM DB2)
        may require more than one jar file.</para></listitem>
        <listitem><para>Check the spelling of the driver's class name. Remember that it's case sensitive. If you don't know
        the driver's class name, simply press the <keycap>Enter</keycap> key inside the input field of the jar file location.
        &wb-productname; will then scan the jar file(s) to find the JDBC driver</para></listitem>
      </itemizedlist>
    </para>
  </section>

  <section id="out-of-memory-error">
    <title>Out of memory errors</title>
    <para>
      The memory that is available to the application is limited by
      the Java virtual machine to ensure that applications don't use all
      available memory which could potentially make a system unusable.
    </para>
    <para>
      If you retrieve large resultsets from the database, you may receive
      an error message indicating that the application does not have
      enough memory to store the data.
    </para>
    <para>
      Please refer to <link linkend="install-increase-memory">Increasing the memory</link> for details
      on how to increase the memory that is available to &wb-productname;
    </para>
  </section>
  <section id="no-ddraw">
    <title>Display problems when running under Windows&reg;</title>

    <para>
      If you experience problems when running &wb-productname; (or
      other Java/Swing based applications) on the Windows&reg; platform, this
      might be due to problems with the graphics driver and/or the
      DirectDraw installation. If upgrading the graphics driver or the
      DirectDraw/DirectX version is not an option (or does not solve the
      problem), try to run SQL Workbench with the direct draw feature
      turned off:
    </para>

    <programlisting>java -Dsun.java2d.noddraw=true -jar sqlworkbench.jar</programlisting>

    <para>
      When using the exe launcher, you can use the following syntax:
    </para>

    <programlisting>SQLWorkbench -noddraw</programlisting>

    <para>
      If you run &wb-productname; through a program that enables remote
      access to a Windows&reg; workstations (PC-Duo, VNC, NetMeeting, etc),
      you may need to disable the use of DirectDraw for Java as well.
    </para>

  </section>

  <section id="hi-cpu-usage">
    <title>High CPU usage when executing statements</title>

    <para>
      If you experience a high CPU usage when running a SQL statement,
      this might be caused by a combination of the graphics driver, the JDK and
      the Windows&reg; version you are using. This is usually caused by the animated
      icon which indicates a running statement (the yellow smiley). This animation can
      be turned off in <menuchoice><guimenu>Tools</guimenu><guimenuitem>Options</guimenuitem></menuchoice>
      See <xref linkend="option-animated-icon"/> for details. A different
      icon (not animated) will be used if that option is disabled.
    </para>
  </section>
  
	<section id="oracle-problems">
		<title>Oracle Problems</title>

		<section id="oracle-long-problems">
			<title>Error: "Stream has already been closed"</title>
			<para>
				Due to a bug in Oracle's JDBC driver, you cannot retrieve columns with 
				the <literal>LONG</literal> or <literal>LONG RAW</literal> data type if the <literal>DBMS_OUTPUT</literal> 
				package is enabled. 
				In order to be able to display these columns, the support for <literal>DBMS_OUTPUT</literal> 
				has to be switched off using the <link linkend="command-dbms-output">DISABLEOUT</link> command
				before runnnig a <literal>SELECT</literal> statement that returns <literal>LONG</literal> 
				or <literal>LONG RAW</literal> columns.
			</para>
		</section>
		
		<section id="oracle-blob-problems">
			<title>BLOB support is not working properly</title>
			<para>
				&wb-productname; supports reading and writing BLOB data in 
				various ways. The implementation relies on standard JDBC API calls
				to work properly in the driver. If you experience problems when updating
				BLOB columns (e.g. using the <link linkend="blob-support">enhanced</link> <literal>UPDATE, INSERT</literal>
				syntax or the <link linkend="data-pumper">DataPumper</link>)
				then please check the version of your Oracle JDBC driver. Only 10.x drivers 
				implement the necessary JDBC functions properly. The version of your driver
				is reported in the log file when you make a connection to your Oracle server.
			</para>
		</section>
		
		<section id="oracle-enable-remarks">
			<title>Table and column comments are not displayed</title>
			<para>
				By default Oracle's JDBC driver does not return comments made on columns or tables 
				(<literal>COMMENT ON ..</literal>). Thus your comments will not be shown in the database 
				explorer.
			</para>
			<para>
				To enable the display of column comments, you need to pass the property <literal>remarksReporting</literal>
				to the driver.
			</para>
			<para>
				In the profile dialog, click on the <guibutton>Extended Properties</guibutton> button.
				Add a new property in the following window with the name <literal>remarksReporting</literal>
				and the value <literal>true</literal>. Now close the dialog by clicking on the OK button.
			</para>
			<para>
				Turning on this features slows down the retrieval of table information e.g. in the Database Explorer.
			</para>
			<para>
				When you have comments defined in your Oracle database and use the <link linkend="command-schema-report">WbReport</link>
				command, then you have to enable the remrks reporting, otherwise the comments will not show up in the report.
			</para>
		</section>

    <section id="oracle-date-time">
      <title>Time for DATE columns is not displayed</title>
      <para>
        A <literal>DATE</literal> column in Oracle always contains a time as well. If you are not seeing
        the time (or just 00:00:00) for a date column but you know there is a different time stored, please enable the 
        option "Oracle DATE as Timestamp" in the "Data formatting" section of the Options dialog 
        (<menuchoice><guimenu>Tools</guimenu><guimenuitem>Options</guimenuitem></menuchoice>)
      </para>
    </section>

		<section id="oracle-display-xml">
			<title>Content of XMLTYPE columns is not displayed</title>
      <para>
        The content of columns with the data type <literal>XMLTYPE</literal> cannot be displayed by &wb-productname; because
        the Oracle JDBC driver does not implement the necessary JDBC 4.0 XML API (as of 11.2.0.1.0).
      </para>
      <para>
        The only way to retrieve and update XMLType columns using &wb-productname; is to cast the columns to a CLOB 
        value e.g. <literal>CAST(xml_column AS CLOB)</literal>
      </para>
      <para>
        In the DbExplorer you can customize the generated SQL statement to automatically convert the XMLType to a 
        CLOB. Please refer to the chapter <link linkend="customize-dbexplorer-retrieval">Customize data retrieval in the DbExplorer</link>
        for details.
      </para>
      <para>
        Note 
      </para>
    </section>
    
		<section id="oracle-comment-problems">
			<title>Error: "missing mandatory parameter"</title>
			<para>
        When running statements that contain single line comments that are not followed by a space
        the following Oracle error may occur:
        <literal>ORA-01009: missing mandatory parameter [SQL State=72000, DB Errorcode=1009]</literal>.
      </para>
      <programlisting>--This is a comment
SELECT 42 FROM dual;</programlisting>
      <para>When adding a space after the two dashes the statement works:</para>
      <programlisting>-- This is a comment
SELECT 42 FROM dual;</programlisting>
      <para>
        This seems to be a problem with old Oracle JDBC drivers (such as the 8.x drivers). It is
        highly recommend to upgrade the driver to a more recent version (10.x or 11.x) as they not
        only fix this problems, but are in general much better than the old versions.
      </para>
		</section>

	</section>
	
	<section id="mysql-problems">
		<title>MySQL Problems</title>

		<section id="mysql-no-info-schema">
			<title>INFORMATION_SCHEMA tables not displayed in DbExplorer</title>
			<para>
				It seems that the necessary API calls to list the tables of the <literal>INFORMATION_SCHEMA</literal>
				database (which is a database, not a schema - contrary to its name) are not implemented correctly
				in earlier JDBC drivers of MySQL. Only the driver with the version 5.1.7 returns the list of tables
				of the <literal>INFORMATION_SCHEMA</literal> database.
			</para>
		</section>

		<section id="mysql-select-problems">
			<title>"Operation not allowed" error message</title>
			<para>
				In case you receive an error message "<literal>Operation not allowed after ResultSet closed</literal>"
				please upgrade your JDBC driver to a more recent version. This problem was fixed with the MySQL JDBC
				driver version 3.1. So upgrading to that or any later version will fix this problem.
			</para>
		</section>

		<section id="mysql-zero-date-problems">
			<title>Problems with zero dates with MySQL</title>
			<para>
				MySQL allows the user to store invalid dates in the database (0000-00-00). Since 
				version 3.1 of the JDBC driver, the driver will throw an exception when trying to retrieve
				such an invalid date. This behaviour can be controlled by adding an <link linkend="profile-extended-properties">extended property</link>
				to the connection profile. The property should be named <literal>zeroDateTimeBehavior</literal>. You can
				set this value to either <literal>convertToNull</literal> or to <literal>round</literal>. For details
				see <ulink url="http://dev.mysql.com/doc/refman/4.1/en/connector-j-installing-upgrading.html"/>
			</para>
		</section>

		<section id="mysql-no-view-source">
			<title>Source SQL for views is not displayed</title>
			<para>
				&wb-productname; retrieves the view definitioin from <literal>INFORMATION_SCHEMA.VIEWS</literal>.
        In some cases the column <literal>VIEW_DEFINITION</literal> does not contain the view definition 
        and thus the source cannot be displayed.
			</para>
		</section>

	</section>
	
	<section id="mssql-problems">
		<title>Microsoft SQL Server Problems</title>

		<section id="mssql-cloned-connection">
		  <title>Can't start a cloned connection while in manual transaction mode</title>
		  <para>
		    This error usually occurs in the DbExplorer if an older Microsoft JDBC Driver is used
		    and the connection does not use autocommit mode. There are three ways to fix this problem:
		    <itemizedlist>
		      <listitem><simpara>Upgrade to a newer Microsoft driver (e.g. the one for <ulink url="http://www.microsoft.com/sql/technologies/jdbc/default.mspx">SQL Server 2005</ulink>)</simpara></listitem>
		      <listitem><simpara>Enable autocommit in the connection profile</simpara></listitem>
		      <listitem><simpara>Add the parameter <literal>;SelectMethod=Cursor</literal> to your JDBC URL</simpara></listitem>
		    </itemizedlist>
		    This <ulink url="http://support.microsoft.com/?scid=kb;en-us;313181&amp;x=9&amp;y=11">article</ulink>
		    in Microsoft's Knowledgebase gives more information regarding this problem.
		  </para>
		  <para>
		    The possible parameters for the SQL Server 2005 driver are listed here:
        <ulink url="http://msdn2.microsoft.com/en-us/library/ms378988.aspx"/>
		  </para>
		</section>

		<section id="mssql-locking-problems">
		  <title>Dealing with locking problems</title>
		  <para>
				Microsoft SQL Server (at least up to 2000) does not support concurrent reads and writes
				to the database very well. Especially when using DDL statements, this can lead to
				database locks that can freeze the application. This affects e.g. the display of the tables
				in the DbExplorer.	As the JDBC driver needs to issue a SELECT statement to retrieve the table 
				information, this can be blocked by e.g. a non-committed <literal>CREATE ... </literal>
				statement as that will lock the system table(s) that store the meta information about tables
				and views.
		  </para>
			<para>
				Unfortunately there is no real solution to blocking transactions e.g. between a SQL tab and the
				DbExplorer. One (highly discouraged) solution is to run in autocommit mode, the other to have
				only one connection for all tabs (thus all of them share the same transaction an the DbExplorer
				cannot be blocked by a different SQL tab).
			</para>
			<para>
				The Microsoft JDBC Driver supports a connection property called <literal>lockTimeout</literal>.
				It is recommended to set that to 0 (zero) (or a similar low value). If that is done, calls
				to the driver's API will through an error if they encounter a lock rather than waiting
				until the lock is released. The jTDS driver does not support such a property. If you are using
				the jTDS driver, you can define a <link linkend="profile-connect-scripts">post-connect script</link> that 
				runs <literal>SET LOCK_TIMEOUT 0</literal>.
			</para>
		</section>

		<section id="mssql-result-buffer">
			<title>WbExport using a lot of memory</title>
      <para>
        The jTDS driver and the Microsoft JDBC driver read the complete result set into memory
        before returning it to the calling application. This means that when retrieving
        data, &wb-productname; uses (for a short amount of time) twice as much memory as really
        needed. This also means that <link linkend="command-export">WbExport</link> will
        effectively read the entire result into memory before writing it into the output file.
        For large exports this us usually not wanted.
      </para>
      <para>
        This behaviour of the drivers can be changed by adding an additional parameter to the
        JDBC URL that is used to connect to the database. For the jTDS driver append
        <literal>useCursors=true</literal> to the URL, e.g.
        <literal>jdbc:jtds:sqlserver://localhost:2068;useCursors=true</literal>.
      </para>
      <para>
        The URL parameters for the jTDS driver are listed here: <ulink url="http://jtds.sourceforge.net/faq.html#urlFormat"/>
      </para>
      <para>
        For the Microsoft driver, use the parameter <literal>selectMethod=cursor</literal> to
        switch to a cursor based retrieval that does not buffer all rows within the driver, e.g.
        <literal>jdbc:sqlserver://localhost:2068;selectMethod=cursor</literal>.
      </para>
      <para>
        The URL parameters for the Microsoft driver are listed here:
        <ulink url="http://msdn2.microsoft.com/en-us/library/ms378988.aspx"/>
      </para>

    </section>

	</section>
	
	<section id="db2-problems">
		<title>DB2 Problems</title>

		<section id="db2-charset">
			<title>"Connection closed" errors</title>
			<para>
				When using the DB2 JDBC drivers it is important that the <literal>charsets.jar</literal> 
				is part of the used JDK (or JRE). Apparently the DB2 JDBC driver needs this library in 
				order to correctly convert the EBCDIC characterset (used in the database) into the 
				Unicode encoding that is used by Java.
				The library <literal>charsets.jar</literal> is usually included in all multi-language
				JDK/JRE installations. 
			</para>
			<para>
				If you experience intermittent "Connection closed" errors when running SQL statements,
				please verify that <literal>charsets.jar</literal> is part of your JDK/JRE installation.
				This file is usually installed in <literal>jre\lib\charsets.jar</literal>.
			</para>
		</section>

		<section id="db2-display-xml">
			<title>XML columns are not displayed properly in the DbExplorer</title>
      <para>
        The content of columns with the data type <literal>XML </literal> are not displayed in the DbExplorer
        (but something like <literal>com.ibm.db2.jcc.am.ie@1cee792</literal> instead) because the driver does not convert 
        them to a character datatype. To customize the retrieval for those columns, please
        refer to the chapter <link linkend="customize-dbexplorer-retrieval">Customize data retrieval in the DbExplorer</link>.
      </para>
      <para>
        When using a driver that supports JDBC 4, &wb-productname; since build 107 will display the XML content directly
        without the need to cast the result.
      </para>
    </section>

    <section id="db2-error-text">
      <title>No error text is displayed</title>
      <para>
        When running SQL statements in &wb-productname; and an error occurs, DB2 does not show a proper error message.
        To enable the retrieval of error messages by the driver you have to set the <link linkend="profile-extended-properties">extended
        connection property</link> <literal>retrieveMessagesFromServerOnGetMessage</literal> to <literal>true</literal>.
      </para>
      <para>
        The connection properties for the DB2 JDBC driver are documented here:
        <simplelist>
          <member><ulink url="http://publib.boulder.ibm.com/infocenter/db2luw/v9r7/index.jsp?topic=/com.ibm.db2.luw.apdv.java.doc/doc/r0052038.html"/></member>
          <member><ulink url="http://publib.boulder.ibm.com/infocenter/db2luw/v9r7/topic/com.ibm.db2.luw.apdv.java.doc/doc/r0052607.html"/></member>
        </simplelist>
        
      </para>
    </section>

    <section id="db2-run-command">
      <title>DB2 commands like REORG cannot be run</title>
      <para>
        REORG, RUNSTATS and other db2 command line commands cannot be be run directly through a JDBC interface because
        those are not SQL statements, but DB2 commands. To run such a command from with &wb-productname; you have to use the
        function <literal>sysproc.admin_cmd()</literal>. To run e.g. a REORG on a table you have to run the following statement:
      </para>
      <programlisting>call sysproc.admin_cmd('REORG TABLE my_table');</programlisting>
    </section>

	</section>

	<section id="pg-problems">
		<title>Postgres Problems</title>

		<section id="pg-result-buffer">
			<title>WbExport using a lot of memory</title>
      <para>
        The Postgres JDBC driver defaults to buffer the results obtained from the database
        in memory before returning them to the application. This means that when retrieving
        data, &wb-productname; uses (for a short amount of time) twice as much memory as really
        needed. This also means that <link linkend="command-export">WbExport</link> will
        effectively read the entire result into memory before writing it into the output file.
        For large exports this us usually not wanted.
      </para>
      <para>
        This behaviour of the driver can be changed so that the driver uses cursor based retrieval.
        To do this, the connection profile must disable the "Autocommit" option, and must define
        a default fetch size that is greater than zero. A recommended value is e.g. 10, it might be
        that higher numbers give a better performance. The number defined for the fetch size,
        defines the number of rows the driver keeps in its internal buffer before requesting more
        rows from the backend.
      </para>
      <para>
        More details can be found in the driver's manual:  <ulink url="http://jdbc.postgresql.org/documentation/83/query.html#query-with-cursor"/>
      </para>
    </section>
    
		<section id="pg-statement-savepoint">
			<title>Getting the error: Current transaction is aborted</title>
			<para>
				Postgres - unlike other DBMS - marks a complete transaction as failed if
				a single statement fails. In such a case the transaction cannot be committed, e.g.
				consider the following script:
			</para>
			<programlisting>INSERT INTO person (id, firstname, lastname) VALUES (1, 'Arthur', 'Dent');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Zaphod', 'Beeblebrox');
INSERT INTO person (id, firstname, lastname) VALUES (2, 'Ford', 'Prefect');
COMMIT;</programlisting>
			<para>
				As the ID column is the primary key, the third insert will fail with a unique key violation.
				In Postgres you cannot commit anyway and thus persist the first two <literal>INSERT</literal>s.
			</para>
			<para>
				This problem can only be solved by using a SAVEPOINT before and after each
				statement. In case that statement fails, the transaction can be rolled back to the state
				before the statement and the reminder of the script can execute.
			</para>
			<para>
				Doing this manually is quite tedious, so you can tell &wb-productname; to do this
				automatically for you by setting the properties:
			</para>
			<programlisting>workbench.db.postgresql.ddl.usesavepoint=true
workbench.db.postgresql.sql.usesavepoint=true
</programlisting>
			<para>
				in the file <link linkend="settings">workbench.settings</link>. If this is enabled,
        &wb-productname; will issue a <literal>SET SAVEPOINT</literal> before running each statement
        and will release the savepoint after the statement. If the statement failed, a rollback to the
        savepoint will be issued that will mark the transaction as "clean" again. So in the above
        example (with <literal>sql.usesavepoint</literal> set to <literal>true</literal>), the last
        statement would be rolled back automatically but the first two <literal>INSERT</literal>s
        can be committed (this will also required to turn on the "Ignore errors" option is enabled).
      </para>
      
      <para>
        If you want to use the modes <link linkend="import-update-mode"><literal>update/insert</literal></link> or
				<link linkend="import-update-mode"><literal>insert/update</literal></link>
				for <link linkend="command-import">WbImport</link>, you should also add the
				property:
			</para>
			<programlisting>workbench.db.postgresql.import.usesavepoint=true</programlisting>
      <para>
        to enable the usage of savepoints during imports. This setting also affects
        the <literal>WbCopy</literal> command.
      </para>
      <para>
        You can also use the parameter <literal>-useSavepoint</literal> for the
        <literal>WbImport</literal> and <literal>WbCopy</literal> commands to control the use of
        savepoints for each import.
      </para>
      <para>
        Using savepoints can slow down the import substantially.
      </para>
		</section>

	</section>

</section>
	
