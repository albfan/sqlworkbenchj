<section id="using-fk">
	<title>Working with foreign keys</title>

	<section id="fk-navigation">
		<title>Navigating referenced rows</title>
		<para>
			Once you have retrieved data from a table that has foreign key relations to
			other tables, you can navigate the relationship for specific rows in the result set.
			Select the rows for which you want to find the data in the related tables, then
			right click inside the result set. In the context menu two items are available:
			<simplelist columns="1">
				<member>Referenced rows</member>
				<member>Referencing rows</member>
			</simplelist>
		</para>
		<para>
			Consider the following tables:
			<simplelist columns="1">
				<member><literal>BASE(b_id, name)</literal> </member>
				<member><literal>DETAIL(d_id, base_id, description)</literal> with <literal>base_id</literal>
				referencing <literal>BASE(b_id)</literal> </member>
				<member><literal>MORE_DETAIL(md_id, detail_id, description)</literal> with <literal>detail_id</literal>
				referencing <literal>DETAIL(d_id)</literal></member>
			</simplelist>
		</para>


		<para>
			The context menu for the selected rows will give you the choice in
			which SQL tab you want the generated <literal>SELECT</literal> to be pasted. This is similar
			to the <link linkend="dbexplorer-select-data">Put SELECT into</link> feature in the table list
			of the DbExplorer.
		</para>

		<para>
			Once you have obtained a result set from the table <literal>BASE</literal>, select
			(mark) the rows for which you want to retrieve the related rows, e.g. the one where id=1. Using
			<menuchoice><guimenu>Referencing rows</guimenu><guimenuitem>DETAIL</guimenuitem></menuchoice>
			&wb-productname; will create the following statement:
<programlisting>SELECT *
FROM DETAIL
WHERE base_id = 1;</programlisting>
			The result of the generated statement will always be added to the existing results of the chosen
			SQL panel. By default the generated SQL statement will be appended to the text editor.
			If you don't want the generated statement to be appended to the editor,
			hold down the <literal>Ctrl</literal> key while selecting the desired menu item.
			In that case, the generated statement will only be written to the messages
			panel of the SQL tab. If the target tab contains an external file, the statement will never
			be appended to the editor's text.
		</para>


		<para>
			To navigate from the child data to the "parent" data, use
			<guimenu>Referenced rows</guimenu>
		</para>
		<para>
			The additional result tabs can be closed using
			<menuchoice><guimenu>Data</guimenu><guimenuitem>Close result</guimenuitem></menuchoice>
		</para>
	</section>

	<section id="command-join-completion">
		<title>Generating JOIN conditions</title>
    <para>
      When using ANSI JOIN syntax to create table joins with tables linked by foreign keys in the database,
      the command <literal>JOIN completion</literal> can be used to automatically generate the necessary
      join condition. Consider the following statement
    </para>
    <para>
    <programlisting>
SELECT ord.amount, ord.order_date, prod.name
FROM orders ord
  JOIN product prod ON |</programlisting>(the | denoting the location of the cursor).</para>
    <para>
      When the cursor is located behind the <literal>ON</literal> keyword and you select
      <menuchoice><guimenu>SQL</guimenu><guimenuitem>JOIN completion</guimenuitem></menuchoice>, &wb-productname; will
      retrieve the foreign key and corresponding primary key definitions between the tables <literal>orders</literal> and
      <literal>product</literal>. If such constraints exist, the corresponding condition will be generated and
      written into the editor. After executing <guimenuitem>JOIN completion</guimenuitem>, the SQL statement will look like this:
    </para>
    <programlisting>SELECT ord.amount, ord.order_date, prod.name
FROM orders ord
  JOIN product prod ON prod.id = ord.product_id</programlisting>
    <para>
      This feature requires on the usage of the JOIN keyword. Joining tables in the <literal>WHERE</literal> clause is not supported!
    </para>
    <para>
      By default &wb-productname; tries to create a join condition on the table from the "previous" <literal>JOIN</literal> condition
      (or the <literal>FROM</literal>) clause. If no foreign key constraint is found linking the "current" and the "previous" table,
      a popup window with all tables in the select statement that could be used for completion is displayed. This popup merely
      looks at the tables in the statement, no test for foreign key constraints is done when displaying this list.
    </para>
  </section>

  <section id="select-fk-values">
    <title>Selecting foreign key values in referencing tables</title>
    <para>
      &wb-productname; supports the selection of foreign key values (i.e. the primary key values of the referenced
      table) in two different situations: while editing a result set and while writing a DML statement.
    </para>

    <section id="edit-fk-lookup">
      <title>Editing foreign key values</title>
      <indexterm><primary>Editing data</primary><secondary>select values for foreign key columns</secondary></indexterm>
      <indexterm><primary>Foreign keys</primary><secondary>editing values of foreign key columns</secondary></indexterm>
      <para>
        After starting to edit a cell, the context menu contains an item <guimenuitem>Select FK value</guimenuitem>. Once this
        item is selected &wb-productname; will detect the table that the current column references. If a foreign
        key is detected a dialog window will be shown containing the data from the rerenced table. For performance reasons
        the check if the current column is referencing another table is only done <emphasis>after</emphasis> the item has been selected.
        If no foreign key could be found, a message is displayed in the status bar.
      </para>
      <para>
        By default the dialog will not load more than 150 rows from that table. The number of retrieved rows can be
        configured through the "Max. Rows" input field.
      </para>
      <para>
        There are two ways to find the desired target row which can be selected using the radio buttons
        above the input field.
        <itemizedlist>
          <listitem>
            <para id="filter-fk-lookup">Applying a filter</para>
            <para>
              This mode is intended for small lookup tables. All rows are loaded into memory and the
              rows are filtered immediately when typing. The typed value is searched in all columns of the
              result set. Clicking on the reload button will always re-retrieve all rows.
            </para>
          </listitem>
          <listitem>
            <para id="retrieve-fk-lookup">Retrieving data</para>
        <para>
          This mode is intended for large tables where not all rows can be loaded into memory. After
          entering a search term and hitting the <keycap>ENTER</keycap> key (or clicking on the
          reload button), a SQL statement to retrieve the rows containing the search statement will be executed.
          The returned rows are then displayed.
        </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>
        Once you have selected the desired row, clicking the <guibutton>OK</guibutton> will put the value
        of the corresponding primary key column into the currently edited cell.
      </para>
    </section>

    <section id="fk-lookup-dml">
      <title>Selecting FK values when editing DML statements</title>
      <indexterm><primary>DML</primary><secondary>select values for foreign key columns</secondary></indexterm>
      <indexterm><primary>Foreign keys</primary><secondary>Update foreign key columns</secondary></indexterm>
      <para>
        When invoking code-completion inside a DML (<literal>UPDATE, DELETE, INSERT, SELECT</literal>) statement, an additional
        entry <literal>(Select FK value)</literal> is available in the popup if the cursor is located inside the value assignment
        or condition, e.g. in the following example:
        <programlisting>update film_category
    set category_id = |
  where film_id = 42;</programlisting>(the | denoting the location of the cursor).
      </para>
      <para>
        When that menu item is selected, the statement is analyzed and if the column of the current expression is
        a foreign key to a different table, the lookup dialog will appear and will let you select the approriate PK
        value from the referenced table.
      </para>
    </section>

    <section id="fk-lookup-limits">
      <title>Limitations of the foreign key lookup</title>
      <para>
        Currently the lookup has the following limitations:
        <itemizedlist>
          <listitem>
            <para>Only result sets for a single table are supported</para>
          </listitem>
          <listitem>
            <para>
              To select the values for a multi-column foreign key, you need to do this for each column
              individually. The dialog will not automatically fill all foreign key columns in the result set.
            </para>
          </listitem>
        </itemizedlist>
      </para>
    </section>

  </section>

	<section id="edit-data-delete-referenced">
		<title>Deleting rows with foreign keys</title>
    <indexterm><primary>Editing data</primary><secondary>deleting rows which are referenced through a foreign key</secondary></indexterm>
		<para>
			To delete rows from the result set including all dependent rows, choose
			<menuchoice><guimenu>Data</guimenu><guimenuitem>Delete With Dependencies</guimenuitem></menuchoice>.
			In this case &wb-productname; will analyze all foreign keys referencing the update table, and will
			generate the necessary <literal>DELETE</literal> statements to delete the dependent rows, before
			sending the <literal>DELETE</literal> for the selected row(s).
		</para>
		<para>
			<guimenuitem>Delete With Dependencies</guimenuitem> might take some time to detect all
			foreign key dependencies for the current update table. During this time a message will
			be displayed in the status bar. The selected row(s) will not be removed from the result
			set until the dependency check has finished.
		</para>
    <note>
      <para>
        Note that the generated SQL statements to delete the dependent rows will only
        be shown if you have enabled the preview of generated DML statements
        in the <link linkend="options-confirm-update">options dialog</link>
      </para>
   </note>
	 <para>
		 You can also generate a script to delete the selected and all depending rows through
		 <menuchoice><guimenu>Data</guimenu><guimenuitem>Generate delete script</guimenuitem></menuchoice>.
		 This will not remove any rows from the current result set, but instead create and display
		 a script that you can run at a later time.
	 </para>
   <para>
     If you want to generate a SQL script to delete all dependent rows, you can also use the
     &wb-productname; command <link linkend="command-gendelete">WbGenerateDelete</link>.
   </para>
	</section>

</section>
