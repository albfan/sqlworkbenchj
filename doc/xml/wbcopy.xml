<section id="command-copy">
	<title>Copy one table to another - WbCopy</title>

<para>
	The <literal>WbCopy</literal> is essentially the command line version of the
	the <link linkend="data-pumper">DataPumper</link>. For a more detailed explanation
	of the copy process, please refer to that section. It bascially chains a WbExport and a
	<literal>WbImport</literal> statement without the need of an intermediate data file.
	The <literal>WbCopy</literal> command requires that a connection to the source and target
	database can be made at the same time.
</para>

	<section id="wbcopy-general-parameters">

		<title>General parameters for the <literal>WbCopy</literal> command.</title>
		<informaltable frame="all">
			<tgroup cols="2"  align="left">
				<colspec colname="c1" colwidth="4cm" />
				<colspec colname="c2" />
				<thead>
					<row>
						<entry>Parameter</entry>
						<entry>Description</entry>
					</row>
				</thead>

				<tbody valign="top">
					<row>
						<entry>-sourceProfile</entry>
						<entry>
							<para>
								The name of the connection profile to use as the source connection.
								If -sourceprofile is not specified, the current connection is used as the source.
							</para>
							<para>
								If the profile name contains spaces or dashes, it has to be quoted.
							</para>
						</entry>
					</row>

					<row>
						<entry>-sourceGroup</entry>
						<entry>
							<para>
								If the name of your source profile is not unique across 
								all profiles, you will need to specify the group in which the profile 
								is located with this parameter.
							</para>
							<para>
								If the group name contains spaces or dashes, it has to be quoted.
							</para>
						</entry>
					</row>

					<row>
						<entry>-targetProfile</entry>
						<entry>
							<para>
								The name of the connection profile to use as the target connection. If
								<literal>-targetprofile</literal> is not specified, the current connection is used as the target.
							</para>
							<para>
								If the profile name contains spaces or dashes, it has to be quoted.
							</para>
						</entry>
					</row>

					<row>
						<entry>-targetGroup</entry>
						<entry>
							<para>
								If the name of your target profile is not unique across 
								all profiles, you will need to specify the group in which the profile 
								is located with this parameter.
							</para>
							<para>
								If the group name contains spaces or dashes, it has to be quoted.
							</para>
						</entry>
					</row>

					<row>
						<entry>-commitEvery</entry>
						<entry>
							The number of rows after which a commit is sent to the target database. This parameter
							is ignored if JDBC batching (<literal>-batchSize</literal>) is used.
						</entry>
					</row>

					<row>
						<entry>-deleteTarget</entry>
						<entry>
							<para>Possible values: <literal>true</literal>, <literal>false</literal></para>
							<para>
								If this parameter is set to true, all rows are deleted from the
								target table before copying the data.
							</para>
						</entry>
					</row>

					<row>
						<entry>-mode</entry>
						<entry>
							<para>
								Defines how the data should be sent to the database. Possible
								values are <literal>INSERT</literal>, <literal>UPDATE</literal>,
								'<literal>INSERT,UPDATE</literal>' and '<literal>UPDATE,INSERT</literal>'. Please
								refer to the description of the <link linkend="command-import">WbImport</link> 
								command for details on.
							</para>
						</entry>
					</row>

					<row>
						<entry>-keyColumns</entry>
						<entry>
							<para>
								Defines the key columns for the target table. This parameter
								is only necessary if import is running in <literal>UPDATE</literal> mode.
							</para>
						</entry>
					</row>

					<row>
						<entry>-batchSize</entry>
						<entry>
							<para>
								Enable the use of the JDBC batch update feature, by setting the size
								of the batch queue. Any value greater than 1 will enable batch modee. If the
								JDBC driver supports this, the INSERT (or UPDATE) performance can be increased.
							</para>
							<para>
								This parameter will be ignored if the driver does not support batch updates or if
								the mode is not UPDATE or INSERT (i.e. if <literal>-mode=update,insert</literal>
								or <literal>-mode=insert,update</literal> is used).
							</para>
						</entry>
					</row>

					<row>
						<entry>-commitBatch</entry>
						<entry>
							<para>Valid values: <literal>true</literal>, <literal>false</literal></para>
							<para>When using the <literal>-batchSiez</literal> parameter, the 
								<literal>-commitEvery</literal> is ignored (as not all JDBC drivers
								support a <literal>COMMIT</literal> inside a JDBC batch operation. When 
								using <literal>-commitBatch=true</literal> &wb-productname; will send a 
								<literal>COMMIT</literal> to the database server after each JDBC 
								batch is sent to the server.
							</para>
						</entry>
					</row>

					<row>
						<entry>-continueOnError</entry>
						<entry>
							<para>
								Defines the behaviour if an error occurs in one of the statements.
								If this is set to <literal>true</literal> the copy process will continue
								even if one statement fails. If set to <literal>false</literal> the copy process
								will be halted on the first error. The default value is <literal>false</literal>.
							</para>
							<para>
								Note that for some DBMS <literal>continueOnError</literal> will not work. PostgreSQL
								will not execute any further commands if the current transactions had an error. 
							</para>
						</entry>
					</row>

				</tbody>
			</tgroup>
		</informaltable>
	</section>

	<section id="wbcopy-single-table">
		<title>Copying data from one or more tables</title>
		<informaltable frame="all">
			<tgroup cols="2"  align="left">
				<colspec colname="c1" colwidth="4cm" />
				<colspec colname="c2" />
				<thead>
					<row>
						<entry>Parameter</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody valign="top">
					<row>
						<entry>-sourceTable</entry>
						<entry>
							The name of the table(s) to be copied. You can either specifiy a 
							list of tables: <literal>-sourceTable=table1,table2</literal>. Or select
							the tables using a wildcard: <literal>-sourceTable=*</literal> will copy
							all tables accessible to the user. If more than one table is specified 
							using this parameter, the <literal>-targetTable</literal> parameter is 
							ignored. 
						</entry>
					</row>
					
					<row>
						<entry>-checkDependencies</entry>
						<entry>
							<para>
								When copying more than one file into tables with foreign key constraints, 
								this switch can be used to import the files in the correct order (child tables first). 
								When <literal>-checkDependencies=true</literal> is passed, &wb-productname; will 
								check the foreign key dependencies for the tables specified with <literal>-sourceTable</literal>
							</para>
						</entry>
					</row>
					
					<row>
						<entry>-sourceWhere</entry>
						<entry>
							A <literal>WHERE</literal> condition that is applied to the source table.
						</entry>
					</row>
					
					<row>
						<entry>-targetTable</entry>
						<entry>
							The name of the table into which the data should be written. 
							This parameter is ignored if more than one table is copied.
						</entry>
					</row>
					
					<row>
						<entry>-createTarget</entry>
						<entry>If this parameter is set to <literal>true</literal> the target table
						will be created, if it doesn't exist. 
						Valid values are <literal>true</literal> or <literal>false</literal>.
						</entry>
					</row>
					
					<row>
						<entry>-dropTarget</entry>
						<entry>
							If this parameter is set to <literal>true</literal> the target table
							will be dropped before it is create. This parameter is ignored if 
							<literal>-createtarget=true</literal>	is specified.
						</entry>
					</row>
					
					<row>
						<entry>-columns</entry>
						<entry>
							<para>Defines the columns to be copied. If this parameter is not specified, then
							all matching columns are copied from source to target. Matching
							is done on name <emphasis role="bold">and</emphasis> data type. You
							can either specify a list of columns or a column mapping.
							</para>
							<para>When supplying a list of columns, the data from
							each column in the source table will be copied into the corresponding (i.e. one
							with the same name) column in the target table.
							If <literal>-createtarget=true</literal>, then
							the list also defines the columns of the target table. The names have to be separated
							by comma: <literal>-columns=firstname, lastname, zipcode</literal>
							</para>
							<para>
							A column mapping defines which column from the source table maps to which column
							of the target table (if the column names do not match)
							If <literal>-createtable=true</literal> then the
							target table will be created from the specified target names:
							<literal>-columns=firstname/surname, lastname/name, zipcode/zip</literal> Will copy the column
							<literal>firstname</literal> from the source table to a column named <literal>surname</literal>
							in the target table, and so on.
							</para>
							<para>This parameter is ignored if more than one table is copied.</para>
						</entry>
					</row>
					
					<row>
						<entry>-preTableStatement</entry>
						<entry>
							<para>
								This parameter defines a SQL statement that should be executed before the copy
								process starts inserting data into the target table. The name of the current
								table (when e.g. importing a whole directory) can be referenced using 
								<literal>${table.name}</literal>.
							</para>
							<para>
								To define a statement that should be executed after all rows have been 
								inserted but before the data is committed, you can use the 
								<literal>-postTableStatement</literal> parameter. 
							</para>
							<para>
								These parameters can e.g. be used to enable identity insert for MS SQL Server:
								<programlisting>-preTableStatement="set identity_insert ${table.name} on"
-postTableStatement="set identity_insert ${table.name} off"</programlisting>
								Errors resulting from executing these statements will be ignored. If you want 
								to abort the copy in that case you can specify <literal>-ignorePrePostErrors=false</literal>
								and <literal>-continueOnError=false</literal>. 
							</para>
							
						</entry>
					</row>					
				</tbody>
			</tgroup>
		</informaltable>
	</section>

	<section id="command-copy-query">
		<title>Copying data based on a SQL query</title>
		<informaltable frame="all">
			<tgroup cols="2"  align="left">
				<colspec colname="c1" colwidth="4cm" />
				<colspec colname="c2" />
				<thead>
					<row>
						<entry>Parameter</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>-sourcequery</entry>
						<entry>The SQL query to be used as the source data (instead of a table).</entry>
					</row>
					<row>
						<entry>-columns</entry>
						<entry>The list of columns of the target table, in the order
						in which they appear in the source table.</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
	</section>

	<section id="copy-update-mode">
		<title>Update mode</title>
		<para>The <literal>WbCopy</literal> command understands the same update mode
		parameter as the <literal>WbImport</literal> command. For a discussion on
		the different update modes, please refer to the <link linkend="import-update-mode">WbImport</link>
		command.</para>
	</section>

	<section id="copy-examples">
		<title>Examples:</title>
		<para>Copy all columns from one table to another table with the same columns:</para>
		<programlisting>WbCopy -sourceprofile=ProfileA
	 -targerprofile=ProfileB
	 -sourcetable=the_table
	 -targettable=the_other_table;</programlisting>

		<para>Copy all columns from one table to another table with the same columns, but
					only certain rows.</para>
		<programlisting>WbCopy -sourceprofile=ProfileA
	 -targerprofile=ProfileB
	 -sourcetable=the_table
	 -sourcewhere="lastname LIKE 'D%'
	 -targettable=the_other_table;</programlisting>

		<para>
			Copy only selected columns to a table with different column names. Before the
			copy is started all rows are deleted from the target table:
		</para>
		<programlisting>WbCopy -sourceprofile=ProfileA
	 -targerprofile=ProfileB
	 -sourcetable=person
	 -targettable=contact
	 -deletetarget=true
	 -columns=firstname/surname, lastname/name, birthday/bday;</programlisting>

	 <para>
		 If you use this way to map columns, please make sure that you
		 don't use the forward slash as the <link linkend="options-alternate-delimiter">alternate delimiter</link>.
		 This can be achieved by either specifying a different character sequence or making sure
		 that - if you use the forward slash - the current script does not end with it, as
		 this turns on the usage of the alternate delimiter. The above example would work even if
		 the forward slash was used as the alternate delimiter, because the whole command is
		 terminated with a semicolon, which disables the usage of the alternate delimiter.
	 </para>

		<para>
			Copy data based on a SQL query, matching the columns
			from the query to the corresponding columns from the target table:
		</para>

		<programlisting>WbCopy -sourceprofile=ProfileA
	 -targerprofile=ProfileB
	 -sourcequery="SELECT firstname, lastname, birthday FROM person"
	 -targettable=contact
	 -deletetarget=true
	 -columns=surname, name, bday;</programlisting>
	 <para>The order in the <literal>-columns</literal> parameter <emphasis role="bold">must</emphasis>
	 match the order in the <literal>SELECT</literal> statement!</para>
 </section>

</section>