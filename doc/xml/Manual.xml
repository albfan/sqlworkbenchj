<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" 
					"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"
[					
	<!ENTITY whatsnew SYSTEM "history.txt">
]>

<?xml-stylesheet href="html.css" type="text/css"?>
<article>
  <title>SQL Workbench/J User Manual</title>

	<section id="information">
		<title>General Information</title>
		
		<section id="license">
			<title>Software license</title>
	
			<para>Copyright (c) 2002-2003, Thomas Kellerer</para>
	
			<para>This software is released to the public domain.</para>
	
			<para>Permission is hereby granted, free of charge, to any person
			obtaining a copy of this software and associated documentation files (the
			&#34;Software&#34;), to deal in the Software without restriction,
			including without limitation the rights to use, copy, modify, merge,
			publish, distribute, and to permit persons to whom the Software is
			furnished to do so, subject to the following conditions:</para>
	
			<para>The above copyright notice and this permission notice shall be
			included in all copies or substantial portions of the Software.</para>
	
			<para>In order to ensure that this software stays free, selling, licensing
			or charging for the use of this software is prohibited. The right to
			include this software in a commercial product (bundling) is still granted
			as long as this software is not the major functionality delivered.</para>
	
			<para>Disclaimer</para>
	
			<para>THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY
			KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
			MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN
			NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
			DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
			OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
			USE OR OTHER DEALINGS IN THE SOFTWARE.</para>
		</section>
		
		
    <section id="version">
      <title>Program version</title>

      <para>This document describes build @BUILD_NUMBER@ of the SQL Workbench/J</para>
    </section>

		<!--
		<section id="history">
			<title>SQL Workbench/J History</title>
			< <markup>&whatsnew;</markup> >
			<para>
				<textdata	fileref="history.txt"/>
			</para>
		</section>
		-->
	</section>
	
  <section id="install">
    <title>Installing and starting SQL Workbench/J</title>

    <para>To run SQLWorkbench/J JDK 1.4 (or above) is required. Apart from
    that, no special installation procedure is required. Just copy the files
    into a directory that is convenient. When upgrading to a newer version of
    SQLWorkbench/J the old .jar file can simply be overwritten.</para>
    
    <section id="starting">
      <title>Starting the program</title>

      <para>Workbench.jar is a self executing JAR file. This means, that if
      your JDK is installed properly, a double click (on the Windows platform)
      on Workbench.jar will execute the application. To run the application
      manually use the command:</para>

      <programlisting>java -jar Workbench.jar</programlisting>

      <para>If you want to create a shortcut on your desktop use the above
      line. On Windows systems - if you don&#39;t use the native launcher - it
      is recommended to use javaw instead of java, so that the console window
      is not displayed.</para>

      <section id="config-dir" xreflabel="Configuration directory">
        <title>Specifying the location of configuration files</title>

        <para>By default SQL Workbench/J will put all its configuration files
        into the current directory. The current directory is not necessarily the
        directory where the .jar file is located, but it will be that directory in 
        most of the cases.
        </para>
        <para>The configuration files are:
        <itemizedlist>
          <listitem><para>General configuration settings (<filename>workbench.settings</filename>)</para></listitem>
          <listitem><para>Connection profiles (<filename>WbProfiles.xml</filename>)</para></listitem>
          <listitem><para>JDBC Driver definitions (<filename>WbDrivers.xml</filename>)</para></listitem>
          <listitem><para>Log file (<filename>workbench.log</filename>)</para></listitem>
          <listitem><para>Workspace files (<filename>*.wksp</filename>)</para></listitem>
        </itemizedlist>
        </para>
        
        <para>If you want to put these files into a different directory, start SQL Workbench/J
        with the parameter -configdir to specify an alternate directory:</para>
				<para>
        <programlisting>java -jar Workbench.jar -configdir=c:\ConfigData</programlisting>
        or if you are using the Windows® launcher:
        <programlisting>JWorkbench -configdir=c:\ConfigData</programlisting>
				</para>
      </section>

    </section>
    
		<section id="install-increase-memory">
			<title>Increasing the memory available to the application</title>
			<para>SQL Workbench/J is a Java application and thus runs inside a 
			so-called virtual machine (JVM). The virtual machine limits the memory 
			independently from the installed memory that is available to the operating 
			system.</para>
			<para>SQL Workbench/J reads the data that is returned by a <literal>SELECT</literal>
			statement into the main memory. When retrieving large result sets, you might
			get an error message, indicating that not enough memory is available. In this 
			case you need to increase the memory that the JVM requests from the operating
			system (or change your statement to return fewer rows).</para>
			<para>When you use the <link linkend="launcher-using">Windows® Launcher</link> to start SQL Workbench/J 
			you need to pass the parameter -J-Xmx256m to the executable:
			<programlisting>JWorkbench.exe -J-Xmx256m</programlisting>This example
			will increase the maximum memory to 256MB. The recommended way
			is to create Windows® shortcut (e.g. on the desktop) and add the above parameter
			to the shortcut definition. The launcher increases the available heap size 
			by default to 128 MB.</para>
			<para>When you are running SQL Workbench/J on a non-Windows® system or not 
			using the launcher, then you need to pass this parameter directly to the JVM</para>
			<para><programlisting>java -Xmx256m -jar Workbench.jar</programlisting></para>
			<note>
				<para>The -Xmx parameter increases the <emphasis role="bold">maximum</emphasis>
				memory to the given value. This does not mean that the application will use 
				that much memory</para>
			</note>
		</section>
		
    <section id="no-ddraw">
      <title>Crashes/Bluescreen when running under Windows®</title>

      <para>If you experience problems when running SQL Workbench/J (or
      other Java/Swing based applications) on the Windows® platform, this
      might be due to problems with the graphics driver and/or the
      DirectDraw installation. If upgrading the graphics driver or the
      DirectDraw/DirectX version is not an option (or does not solve the
      problem), try to run SQL Workbench with the direct draw feature
      turned off:</para>

      <programlisting>java -Dsun.java2d.noddraw=true -jar Workbench.jar</programlisting>

      <para>When using the exe launcher, you have to use the following
      syntax:</para>

      <programlisting>jworkbench -J-Dsun.java2d.noddraw=true</programlisting>
    </section>
    
    <section id="hi-cpu-usage">
      <title>High CPU usage when executing statements</title>
      <para>If you experience a high CPU usage when running a SQL statement, 
      this might be caused by a combination of the graphics driver, the JDK and
      the Windows version you are using. This is usually caused by the animated 
      icon which indicates a running statement (the yellow smiley). This animation can be turned off
      with a setting in the <filename>workbench.settings</filename> configuration file. 
      See <xref linkend="option-animated-icon"/> for details. A different
      icon (not animated) will be used if that option is disabled. 
      </para>
    </section>

    <section id="launcher-using">
      <title>Using the Windows launcher</title>

      <para>On the windows platform the supplied JWorkbench.exe can be used to
      start the program. The native launcher searches for an installed JDK
      (querying the registry) and then starts the SQL Workbench. The file
      workbench.jar has to be located in the same directory as the
      JWorkbench.exe, otherwise it doesn&#39;t work.</para>

      <para>By default the launcher increases the maximum JVM heap size to 128
      MB (the default for JDK 1.4 is 96MB). If you need more heap memory, you
      need to pass the appropriate JVM parameter to the launcher</para>

      <section id="launcher-jdk-search">
        <title>How the Windows launcher searches for a JDK</title>

        <para>First the launcher checks for a system variable <literal>WORKBENCH_JDK</literal>.
        If that is defined, the JDK specified by that directory is used. If
        <literal>WORKBENCH_JDK</literal> is not found, <literal>JAVA_HOME</literal> is used. 
        If <literal>JAVA_HOME</literal> is not defined, then the launcher checks if 
        a sub-directory JRE exists in the folder where JWorkbench.exe is located. If 
        that sub-directory exists, it is assumed that it contains a valid JRE. If the 
        sub-directory does not exist, or if it is not a JRE installation, then the registry key 
        <literal>HKLM\Software\JavaSoft\Java Runtime Environment</literal> is queried. 
        If that is not defined, <literal>HKLM\Software\JavaSoft\Java Development Kit</literal> 
        is queried.</para>

        <para>In the registry key, a subkey for the version 1.4 is retrieved, and
        the directory specified by that key is used as the base JDK
        directory.</para>
      </section>

      <section id="launcher-parameters">
        <title>Parameters for the Windows launcher</title>

        <para>To distinguish parameters for the launcher and parameters to the 
        JVM that will be started, JVM parameter need to be prefixed with -J.
        If you want to pass the parameter <literal>-Xmx256m</literal> to the JVM, 
        pass the parameter <literal>-J-Xmx128m</literal> to the launcher. 
        To define a system property you need to pass the parameter
        <literal>-J-Dsun.java2d.noddraw=true</literal>.</para>

        <para>The following parameters are recognized:</para>

        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <colspec colname="c1" colwidth="2cm" />
            <colspec colname="c2"  />
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry>-jdk</entry>

                <entry>Specify the installation
                directory of the JDK e.g.: -jdk=c:\jdk1.4.1</entry>
              </row>

              <row>
                <entry>-J</entry>

                <entry>Pass a parameter to the JVM e.g:
                -J-Dmyprop.value=hello</entry>
              </row>

              <row>
                <entry>-server</entry>

                <entry>Select the server JVM (instead of the
                default client JVM)</entry>
              </row>

              <row>
                <entry>-debug</entry>
                <entry>Write debug information to the file workbench.dbg to identify problems when using the launcher</entry>
              </row>

              <row>
                <entry>-help</entry>
                <entry>Display a message with the list of parameters</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>All other parameters are passed unchanged to the main class.
        See <xref linkend="commandline"/> for details.</para>

        <para>The following call to the launcher:</para>

        <programlisting>JWorkbench -configdir=c:\MyConf -J-Dsun.java2d.noddraw=true</programlisting>

        <para>is the same as directly starting Workbench.jar with these
        parameters:</para>

        <programlisting>java -Dsun.java2d.noddraw=true -jar Workbench.jar -configdir=c:\MyConf</programlisting>
      </section>
    </section>

    <section id="commandline" xreflabel="command line parameters">
      <title>Command line parameters</title>

      <para>Command line parameters are <emphasis role="bold">not</emphasis> case sensitive, 
      the parameters <literal>-Profile</literal> or <literal>-profile</literal> are
      identical. The usage of the command line parameters is identical between
      the launcher or starting SQL Workbench/J using the java command itself.</para>

      <section>
        <title>-configdir=&#60;a directory&#62;</title>

        <para>Store all settings, the connection profile and the statement
        history in the given directory.</para>

        <programlisting>java -jar Workbench.jar -configdir=&#34;c:/Configurations/JWorkbench&#34; 
jworkbench -configdir=&#34;c:/Configurations/JWorkbench&#34;</programlisting>
      </section>

      <section>
        <title>-profile=&#60;profile name&#62;</title>

        <para>Connect to the given profile. The name has to be exactly the
        same as it appears in the profile dialog (case sensitiv!). If the name
        contains spaces, it has to be enclosed in quotations marks:</para>

        <para>Example:</para>

        <programlisting>java -jar Workbench.jar -profile=&#34;Oracle - Test&#34;
jworkbench -profile='Oracle - Test'</programlisting>
      </section>

      <section>
        <title>-script=&#60;filename&#62;</title>

        <para>Run the given script. Multiple scripts can be specified by
        separating them with a comma. The scripts will be executed in the
        order in which they appear in the commandline</para>

        <para>Example:</para>

        <programlisting>java -jar Workbench.jar -script='c:/scripts/script1.sql','c:/scripst/script2.sql'
jworkbench -script='c:/scripts/script1.sql','c:/scripst/script2.sql'</programlisting>

        <para>When this parameter is specified no GUI will be displayed. The
        script(s) will be executed and then the Workbench will terminate. Any
        messages are written to the logfile which can either be specified with
        the -logfile parameter or via an entry in workbench.settings.</para>

        <para>When specifying the -script parameter, make sure you also
        specify a connection profile!</para>
      </section>

      <section>
        <title>-logfile=&#60;filename&#62;</title>

        <para>Write messages to a file named &#60;filename&#62;. If this
        parameter is not passed, the logfile name will be retrieved from
        workbench.settings (currently there is no field in the option dialog
        to enter the location of the log file)</para>
      </section>

      <section>
        <title>-AbortOnError=[true|false]</title>

        <para>Controls the behavior when running a script through the -script
        parameter. If any error occurs, and AbortOnError is true, script
        processing is completely stopped. The only script which will be
        executed after that point is the script specified with the parameter
        -CleanupError. If no error occurs the script specified with
        -CleanupSuccess is executed.</para>

        <para>If AbortOnError is false all statements in all scripts are
        executed regardless of any errors. As no error information is
        evaluated the script specified in -CleanupSuccess will be executed at
        the end.</para>

        <para>Instead of true/false you can also use yes/no</para>

        <para>If this parameter is not supplied it defaults to true, meaning
        that the script will be aborted when an error occurs.</para>
      </section>

      <section>
        <title>-CleanupSuccess=&#60;filename&#62;</title>

        <para>This script is executed as the last script if either no error
        occurred or AbortOnError is set to false.</para>
      </section>

      <section>
        <title>-CleanupErorr=&#60;filename&#62;</title>

        <para>This script is executed as the last script if AbortOnError is
        set to true and an error occurred during script execution.</para>
      </section>

      <section>
        <title>Script execution without a profile</title>

        <para>When specifying a script to execute, you don&#39;t need to have
        a profile for the connection (in fact you don&#39;t need
        WbProfiles.xml, WbDrivers.xml to run in this mode).</para>

        <para>When specifying a script, SQL Workbench/J accepts the following
        parameters to specify the full connection details</para>

        <informaltable frame="all">
          <tgroup cols="2">
            <colspec colname="c1" colwidth="2.5cm" />
            <colspec colname="c2" />
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry>-url</entry>

                <entry>The -url parameter specifies the JDBC url
                to connect to.</entry>
              </row>

              <row>
                <entry>-username</entry>

                <entry>Specify the username for the DBMS</entry>
              </row>

              <row>
                <entry>-password</entry>

                <entry>Specify the password for the user</entry>
              </row>

              <row>
                <entry>-driver</entry>

                <entry>Specify the full class name of the JDBC
                driver</entry>
              </row>

              <row>
                <entry>-driverjar</entry>

                <entry>Specify the full pathname to the .jar file
                containing the JDBC driver</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Example (one line):</para>

        <programlisting>java -jar Workbench.jar -url=jdbc:postgresql:/dbserver/mydb
     -driver=org.postgresql.Driver -username=thomas -password=welcome  
     -driverjar=C:/Programme/pgsql/pg73jdbc3.jar -script=test.sql</programlisting>

        <para>This will start SQL Workbench/J, connect to the database server
        as specified in the connection parameters and execute the script
        test.sql</para>
      </section>
    </section>
  </section>

  <section id="jdbc-setup" xreflabel="JDBC setup">
    <title>JDBC setup</title>

    <section id="configure-drivers">
      <title>Configuring JDBC drivers</title>
      <para>Before you can connect to a DBMS you have to configure the JDBC
      driver to be used. The driver configuration is available in the connection 
      dialog or through <menuchoice><guimenu>File</guimenu><guimenuitem>Manage Drivers</guimenuitem></menuchoice>
      </para>
      
      <para>The configuration of a specific driver requires at least two properties:</para>
  
      <itemizedlist><listitem><para>the driver&#39;s class name</para></listitem>
      <listitem><para>the library where to find the classes</para></listitem></itemizedlist>
    
			<para>The name of the library has to contain the full path to the driver's jar file, so that
			SQLWorkbench/J can find it. If a driver requires more than one library,
			select all necessary libraries in the file open dialog, or enter all the
			filenames separated by a semicolon.</para>
	
			<note><para>You do not need to add the jar file containing the driver to the
			classpath of the JVM! This is handled by the application automatically.</para>
			</note>
			
			<para>You can assign a sample URL to each driver, which will be put into
			the URL property of the profile, when the driver class is selected.</para>
			
			<para>SQLWorkbench/J comes with some sample URLs pre-configured.
			Some of these sample URLs use brackets to indicate a parameters that need 
			to be replaced with the actual value for your connection:  (servername)</para> 
			<para>In this case the entire sequence including the brackets need to be replaced with the actual servername.</para>
    </section>

    <section id="jdbc-drivers">
      <title>JDBC Drivers</title>
      
        <para>Here is an overview of common JDBC drivers, and how they have to
    be configured. SQLWorkbench/J contains predefined JDBC drivers. The only
    thing that needs to be changed is the exact location of the library
    containing the driver class.</para>

    <informaltable frame="all">
      <tgroup cols="3" align="left">
        <colspec colname="c1" colwidth="2cm" />
        <colspec colname="c2" colwidth="4cm" />
        <colspec colname="c3"  />
        <thead valign="top">
          <row> 
            <entry><para>DBMS</para> </entry> 
            <entry> <para>Driver class</para></entry> 
            <entry> <para>Library name</para> </entry> 
          </row>      
        </thead>
        <tbody valign="top"> 
          <row> 
            <entry> <para>Oracle</para> </entry> 
            <entry> <para>oracle.jdbc.OracleDriver</para> </entry> 
            <entry> <para>ojdbc4.jar (JDBC 2.x, for JDK 1.4)<sbr/>
                    <ulink url="http://otn.oracle.com/software/tech/java/sqlj_jdbc/content.html"/></para>
            </entry> 
          </row> 
          <row> 
            <entry> <para>PostgreSQL</para> </entry> 
            <entry> <para>org.postgresql.Driver</para> </entry> 
            <entry> <para>pg73jdbc3.jar (exact name depends on PostgreSQL version<sbr/>
                    <ulink url="http://jdbc.postgresql.org"/></para>
            </entry> 
          </row> 
          <row> 
            <entry> <para>SQL Server 2000</para> </entry> 
            <entry> <para>com.microsoft.jdbc.sqlserver.SQLServerDriver</para></entry> 
            <entry> <para>msbase.jar;mssqlserver.jar;msutil.jar<sbr/>
                    <ulink url="http://www.microsoft.com/sql/default.asp"/></para></entry> 
          </row> 
          <row> 
            <entry> <para>SQL Server </para> </entry> 
            <entry> <para>net.sourceforge.jtds.jdbc.Driver</para> </entry> 
            <entry> <para><ulink url="http://jtds.sourceforge.net"/></para></entry> 
          </row> 
          <row> 
            <entry> <para>HSQLDB</para> </entry>
            <entry> <para>org.hsqldb.jdbcDriver</para> </entry> 
            <entry><simplelist columns="1"><member>hsqldb.jar</member>
                   <member><ulink url="http://hsqldb.sourceforge.net"/></member></simplelist>
						</entry> 
          </row> 
          <row> 
            <entry> <para>ODBC Bridge</para></entry> 
            <entry> <para>sun.jdbc.odbc.JdbcOdbcDriver</para> </entry> 
            <entry> <para>Included in the JDK</para> </entry>
          </row> 
        </tbody> 
      </tgroup>
    </informaltable>

    </section>
  </section>

  <section id="profiles">
    <title>Connecting to the database</title>

    <section id="profile-intro">
      <title>Connection profiles</title>
      <para>SQL Workbench/J uses the concept of database profiles to store
      connection information. A connection profile stores two different types
			of settings:
			
			<itemizedlist>
				<listitem><para>JDBC related properties such as the JDBC driver class, the connection URL, etc.</para></listitem>
				<listitem><para>SQL Workbench/J related properties such as the profile name the assocated workspace, etc.</para></listitem>
			</itemizedlist>
			</para>

      <para>After the program is started, you are prompted to choose a
      connection profile to connect to a database. The dialog will display a list
			of available profiles on the left side. When selecting a profile, its details
			(JDBC and SQL Workbench/J settings) are displayed on the right side of the 
			window.</para>

      <para>To create a new profile click on the  
			<guibutton>New Profile</guibutton> button (<guiicon>
			<inlinegraphic fileref="@IMAGE_DIR@/New16.gif" format="GIF"/></guiicon>). 
			This will create a new profile with the name "New Profile". 
			The other properties will be empty.</para>
			
			<note>
      <para>You can create a copy of the currently selected profile by holding
			down the <keycap>Shift</keycap> key while clicking on the 
			<guibutton>New Profile</guibutton> button.</para>
			</note>
      <para>To delete an existing profile, select the profile in the list and
      click on the <guibutton>Delete Profile</guibutton> button
			(<guiicon> <inlinegraphic fileref="@IMAGE_DIR@/Delete16.gif" format="GIF"/></guiicon>)
			</para>
    </section>

		<section id="profile-jdbc-properties">
			<title>JDBC related profile settings</title>
			<informaltable frame="all">
				<tgroup cols="2" align="left">
					<colspec colname="c1" colwidth="2cm" />
					<colspec colname="c2" colwidth="4cm" />
					<thead valign="top">
						<row> 
							<entry><para>Property</para> </entry> 
							<entry> <para>Description</para></entry> 
						</row>      
					</thead>
					<tbody valign="top"> 
						<row> 
							<entry> <para>Driver</para> </entry> 
							<entry> <para>This is the classname for the JDBC driver. The exact
							name depends on the DBMS and driver combination. The documentation
							for your driver should contain this information. SQL Workbench/J has some 
							drivers pre-configured. See <xref linkend="jdbc-setup"/> for details on 
							how to configure your JDBC driver for SQL Workbench/J.
							</para> </entry>
						</row>
						<row>
							<entry><para>URL</para></entry>
							<entry><para>The connection URL for your DBMS. This value is highly
							DBMS specific. The pre-configured drivers from SQL Workbench/J contain
							a sample URL. If the sample URL (which gets filled into the text field
							when you select a driver class) contains words in brackets, then these
							words (including the brackets) are placeholders for the actual values.
							You have to replace them (including the brackets) with the approriate values 
							for your DBMS connection</para></entry>
						</row>
						<row>
							<entry><para>Username</para></entry>
							<entry><para>This is the name of the DBMS user account</para></entry>
						</row>
						<row>
							<entry><para>Password</para></entry>
							<entry><para>This is the password for your DBMS user account. You can 
							choose not to store the password in the connection profile.</para></entry>
						</row>
						<row>
							<entry><para>Autocommit</para></entry>
							<entry><para>This checkbox enables/disables the Autocommit property 
							for the connection. If Autocommit is enabled, then each SQL statement
							is automatically committed on the DBMS. If this is disabled, any DML
							statement (<literal>UPDATE, INSERT, DELETE, ...</literal>) has to be 
							committed in order to make the change permanent. Some DBMS 
							require a commit for DDL statements (<literal>CREATE TABLE, ...</literal>) 
							as well. Please refer to the documentation of your DBMS.</para></entry>
						</row>
					</tbody>
				</tgroup>
				
			</informaltable>
			
		</section>
    
    <section id="profile-workbench-settings">
      <title>SQL Workbench/J specific settings</title>

      <section id="profile-save-password">
        <title>Save password</title>

        <para>If this option is enabled (i.e. checked) the password for the
        profile will also be stored in the profile file. If the global
        option <link linkend="options-encrypt-password">Encrypt Passwords</link> 
        is selected, then the password will be stored encrypted, 
        otherwise it will be stored in plain text!</para>
      </section>

      <section id="profile-separate-connection">
        <title>One connection per tab</title>

        <para>If this option is enabled, then each tab in the main window
        will open a separate connection to the database server. This is
        useful, if the JDBC driver is not multi-threaded and does not allow
        to execute two statements concurrently on the same connection.</para>

        <para>The connection for each tab will not be opened until the tab
        is actually selected.</para>
      </section>

      <section id="profile-ignore-drop-error">
        <title>Ignore DROP errors</title>

        <para>If this option is enabled, any error reported by the database
        server when issuing a statement that begins with DROP, will be
        ignored. Only a warning will be printed into the message area. This
        is useful when executing SQL scripts to build up a schema, where a
        <literal>DROP TABLE</literal> is executed before each <literal>CREATE TABLE</literal>. If the table does
        not exist the error which the <literal>DROP</literal> statement will report, is not
        considered as an error and the script execution continues.</para>
      </section>

      <section id="profile-workspace-file">
        <title>Workspace</title>

        <para>For each connection a workspace file can be assigned. When you
        create a new connection, and do not yet have a workspace file, leave
        this field empty. Later when you have entered some statements you
        wish to associate with this connection, use 
        <menuchoice><guimenu>Workspace</guimenu><guimenuitem>Save Workspace as</guimenuitem></menuchoice>
        to create a workspace file. You will be prompted
        if you want to assign that workspace to the active connection
        profile.</para>
      </section>
    </section>
  
		<section id="oracle-sysdba-connection">
			<title>Connect to Oracle with SYSDBA privilege</title>
			<para>Sometimes it's necessary to connect with SYSDBA privileges 
			with oracle to carry out tasks where the SYSDBA privilege is required. This 
			is possible with Oracle's thin driver by supplying some additional properties
			to the driver upon connecting.</para>
			<para>In the profile dialog, click on the <guibutton>Extended Properties</guibutton> button.
			Add a new property in the following window with the name <literal>internal_logon</literal> 
			and the value <literal>sysdba</literal>. Close the dialog by clicking on the OK button
			</para>
			<para>In the connection profile provide a username and password for an 
			account is allowed to connect as sysdba (e.g. SYS)</para>
		</section>
    
    <section id="odbc">
      <title>ODBC connections without a data source</title>
      <para>On Microsoft Windows® you can use the ODBC bridge to connect to
      ODBC datasources. For some drivers you don&#39;t need to create an ODBC
      datasource in order to be able to use the ODBC driver. The following
      URLs can be used to connect to data files directly</para>
      <para>The class name of the driver is <literal>sun.jdbc.odbc.JdbcOdbcDriver</literal></para>
  
      <informaltable frame="all">
        <tgroup cols="2" align="left">
          <colspec colname="c1" colwidth="2.5cm" />
          <colspec colname="c2"  />
          <thead valign="top">
            <row>
              <entry>ODBC Connection</entry>
              <entry>URL to be used</entry>
            </row>
          </thead>
          <tbody valign="top"> 
            <row> 
              <entry> <para>Excel</para> </entry> 
              <entry><para>jdbc:odbc:DRIVER={Microsoft Excel Driver (*.xls)};DBQ=&#60;filename&#62;</para> </entry> 
              </row> 
              <row> 
                <entry> <para>Access</para> </entry> 
                <entry> <para>jdbc:odbc:DRIVER={Microsoft Access Driver (*.mdb)};DBQ=&#60;filename&#62;</para> </entry> </row> 
              <row> 
                <entry> <para>dBase</para> </entry> 
                <entry>  <para>jdbc:odbc:DRIVER={Microsoft dBase Driver (*.dbf)};DefaultDir=&#60;directory where the .dbf files are located&#62;</para></entry> 
              </row> 
          </tbody> 
        </tgroup> 
      </informaltable>
    </section>
    
    
  </section>

  <section id="editor" xreflabel="Editing SQL Statements">
    <title>Editing SQL Statements</title>
    <section id="editor-java-tools">
      <title>Java related editor functions</title>
      <para>The editor of the SQL Workbench/J offers two functions to aid in developing 
      SQL statements which should be used inside a Java class (e.g. with JDBC access).</para>
      
      <section id="editor-copy-java-code-snippet" xreflabel="Copy Code Snippet">
        <title>Copy Code Snippet</title>
        <para>Suppose you have created the SQL statement that you wish to use inside 
        a Java class to access your DBMS. The menu item <menuchoice><guimenu>SQL</guimenu><guimenuitem>Copy Code Snippet</guimenuitem></menuchoice>
        will create a piece of code that defines a String variable which contains the current SQL statement (or
        the currently selected statement if any text is selected).</para>
        <para>Suppose you have the following SQL statement:</para>
<programlisting>SELECT p.name,
       p.firstname,
       a.street,
       a.zipcode,
       a.phone
FROM person p,
     address a
WHERE p.person_id = a.person_id;</programlisting>
      <para>When copying the code snippet, the following text will be placed into the clipboard</para>
      <programlisting>String sql="SELECT p.name, \n" + 
           "       p.firstname, \n" + 
           "       a.street, \n" + 
           "       a.zipcode, \n" + 
           "       a.phone \n" + 
           "FROM person p, \n" + 
           "     address a \n" + 
           "WHERE p.person_id = a.person_id; \n";</programlisting>
           
           <para>You can now paste this code into your Java class.</para>
					 <para>If you don't like the <literal>\n</literal> character in 
					 your code, you can disable the generation of the newline characters
					 in you <literal>workbench.settings</literal> file. 
					 See <link linkend="manual-setting-snippet-no-newline">Manual settings</link>
					 for details.
					 </para>
      </section>
      
      <section id="editor-clean-java-code" xreflabel="Clean Java Code">
        <title>Clean Java code</title>
        <para>When using the <xref linkend="editor-copy-java-code-snippet"/> feature during
        development, the SQL statement ususally needs refinement after testing the Java class. 
        You can Copy &amp; Paste the generated Java code into SQL Workbench/J, then when you select
        the pasted text, and call <menuchoice><guimenu>SQL</guimenu><guimenuitem>Clean Java Code</guimenuitem></menuchoice>
        the selected text will be "cleaned" from the Java stuff around it. The algorithm behind that is as 
        follows: remove everything up to the first &quot; at the beginning of the line. Delete everything 
        up to the first &quot; searching backwards from the end of the line. Any trailing whitespace including
        escaped characters such as \n will be removed as well. Lines starting with // will be converted to 
        SQL single line comments starting with -- (keeping existings quotes!). The following code:</para>
<programlisting>String sql="SELECT p.name, \n" + 
           "       p.firstname, \n" + 
           "       a.street, \n" + 
           //"       a.county, \n" + 
           "       a.zipcode, \n" + 
           "       a.phone \n" + 
           "FROM person p, \n" + 
           "     address a \n" + 
           "WHERE p.person_id = a.person_id; \n"</programlisting>
        <para>will be converted to:</para>
        <programlisting>SELECT p.name, 
       p.firstname, 
       a.street, 
--"       a.county, " +
       a.zipcode, 
       a.phone 
FROM person p, 
     address a 
WHERE p.person_id = a.person_id; </programlisting>
      
      </section>

    </section>
    <section id="editor-sql-tools">
      <title>SQL related editor functions</title>
    
      <section id="editor-reformat-sql" xreflabel="SQL Formatter">
        <title>Reformat SQL</title>
        <para>When you analyze statements from e.g. a log file, they are not necessarily formatted in a way that
        can be easily read, let alone understood. The editor of the SQL Workbench/J can reformat SQL statements 
        into a format that's easier to read and understand for a human beeing. This feature is often called pretty-printing.
        Suppose you have the following statement (pasted from a log file)
        </para>
<programlisting>select user.* from user, user_profile, uprof where user.user_id = user_profile.user_id and 
user_profile.user_id = uprof.user_id and uprof.user_role = 1 and uprof.internal_user = 'F'
and not exists (select 1 from claim where 
claim.id = uprof.id)</programlisting>
      <para>this will be reformatted to look like this:</para>
      <programlisting>SELECT user. *
FROM user,
     user_profile,
     uprof
WHERE user.user_id = user_profile.user_id
AND   user_profile.user_id = uprof.user_id
AND   uprof.user_role = 1
AND   uprof.hp_internal_user = 'F'
AND   NOT EXISTS (
                   SELECT 1
                   FROM claim
                   WHERE claim.id = uprof.id
                  )</programlisting>
      
      <para>Please note that this feature can only do basic reformatting for a single statement and is not 
      intended to reformat a complete script. However, this will be enhanced in future versions.</para>
			<para>You can configure a threshold up to which sub-<literal>SELECT</literal>s will not be reformatted but 
			put into one single line. The default for this threshold is 80 characters. Meaning that any 
			subselect that is shorter than 80 characters will not be reformatted as the sub-<literal>SELECT</literal>
			in the above example. Please refer to <link linkend="formatter-subselect-threshold">Formatting options</link> for details. </para>
      </section>
      
      <section id="editor-make-in-list">
        <title>Create SQL &quot;IN&quot; List</title>
        <para>Sometimes when you Copy &amp; Paste lines of text from e.g. a spreadsheet, you might want to use the values which 
        are pasted into several lines, as a condition for a SQL <literal>IN</literal> expression. Suppose you a have a list of ID's in your
        spreadsheet each in one row of the same column. If you copy and paste this date you will get each ID on a new line
        inside the editor. To convert this into an <literal>IN</literal> list can be quite cumbersome. If you select the text, and then 
        select <menuchoice><guimenu>SQL</guimenu><guimenuitem>Create SQL List</guimenuitem></menuchoice> the selected text will be 
        converted in a format that can be used as an expression for an <literal>IN</literal> condition:</para>
<programlisting>AABC
CFGH
H23-F
3345
</programlisting><para>will be converted to:</para>
<programlisting>('AABC',
 'CFGH',
 'H23-F',
 '3345')</programlisting>
        <para>The function <menuchoice><guimenu>SQL</guimenu><guimenuitem>Create non-char SQL List</guimenuitem></menuchoice>
        is basically the same. The only difference is, that it assumes that each item in the list is a numeric value, and no
        single quotes are placed around the values.</para>
        <para>The following list:</para>
<programlisting>42
43
44
45</programlisting>
        <para>will be converted to:</para><programlisting>(42, 43, 44, 45)</programlisting>
        <para>These two functions will only be available when text is selected</para>
       </section>
    </section>
  </section>
  
  <section id="using">
    <title>Using SQL Workbench</title>

    <section id="executing-sql-statements">
      <title>Executing SQL statements</title>

      <section id="statement-history">
        <title>Statement history</title>

        <para>When executing a statement the contents of the editor is put
        into an internal buffer together with the information about the
        text selection and the cursor position. Even when you select a part of the current
        text and execute that statement, the whole text is stored in the history buffer together 
        with the selection information. When you select and execute different parts of the text
        and then move through the history you will see the selection change for each history
        entry.</para> 
        <para>The previous statement can be
        recalled by pressing <keycap>Alt-Left</keycap> or choosing 
        <menuchoice><guimenu>SQL</guimenu><guimenuitem>Previous Statement</guimenuitem></menuchoice>
        statement from the menu. Once the previous statement(s) have been
        recalled the next statement can be shown using <keycap>Alt-Right</keycap> or choosing
        <menuchoice><guimenu>SQL</guimenu><guimenuitem>Next Statement</guimenuitem></menuchoice> 
        from the menu. This is similar to browsing through the history of a web browser.</para>
      </section>

      
      <section id="execute-dml">
        <title>Executing DML Statements</title>

        <para>SQL statements can be entered in the upper part of the window.
        Please refer to <xref linkend="editor"/> for details on the editing features
        of SQL Workbench/J.</para>
        <para>
        The tabbed display allows you to keep more than one statement
        accessible (without needing to use the history functions). Each tab
        has its own result set and message panel. When you switch to a
        different statement tab, the result list in the lower part of the
        window will change to either the last result or the last message of
        that statement.</para>
        
        <para>For JDBC drivers which do not support multi-threaded execution, you 
        can configure your <link linkend="profiles">Connection Profile</link> such 
        that SQL Workbench/J will open a new connection for each tab</para>

        <para>If you enter more than one statement in the editor and want to execute all statements 
        as a batch script, you need to delimit each statement. The SQL standard for terminating a SQL 
        statement is the semicolon. Alternatively you can separate each statement with the keyword
        <literal>GO</literal> on a single line (MS SQL Server Syntax).</para>
        <para>As a third alternative, an <link linkend="options-alternate-delimiter">alternate delimiter</link>
        can be defined, which can be used in cases where the semicolon is not suitable. See <xref linkend="execute-ddl"/>
        for details.
        </para>
        
        <para>Valid "scripts" are:</para>
<programlisting>UPDATE sometable SET col1 = 'newvalue' WHERE id=1;
COMMIT;</programlisting>
<para>or using the keyword <literal>GO</literal>. This is the same syntax as the MS SQL Query Analyzer uses</para>
<programlisting>UPDATE sometable SET col1 = 'newvalue' WHERE id=1
GO
COMMIT
GO</programlisting>
<para>or if the alternate delimiter has been set to / the same syntax as Oracle's
SQL*Plus can be used.</para>
<programlisting>UPDATE sometable SET col1 = 'newvalue' WHERE id=1
/
COMMIT
/</programlisting>
        <para>You can run any statement that is valid for the current DBMS. If
        the statement returns a result set, it will be displayed, otherwise
        any messages from the server will be displayed in the messages tab. To
        add or remove tab pages, right click on the tab header and choose
        <guimenuitem>Add tab</guimenuitem> or <guimenuitem>Close tab</guimenuitem>). 
        The number of tabs is stored in
        the associated workspace. If you do not have a workspace assigned to
        the current profile, the tab count will be stored in the default
        workspace.</para>

        <para>The statement is executed by either pressing <keycap>F9</keycap>, <keycap>Ctrl-E</keycap> or
        clicking the <guibutton>Execute Selected</guibutton> button 
				(<guiicon><inlinegraphic fileref="@IMAGE_DIR@/ExecuteSel16.gif" format="GIF"/></guiicon>)
				in the toolbar. This will execute the currently selected
        text. If no text is selected in the editor, the complete statement
        will be executed. If you want to execute the whole statement even when
        text is selected, use the command SQL/Execute All</para>

        <para>To execute the statement in which the cursor is currently
        located use <keycap>Ctrl-Enter</keycap>. The current statement is defined as the text
        between the previous SQL delimiter and the next SQL delimiter. The
        delimiter is not necessarily a semicolon. The delimiter can 
        be configured in the <link linkend="options">system preferences</link>.
        </para>

        <para>The font that is used for the SQL editor can be defined in the
        <link linkend="options">system preferences</link>.</para>
      </section>

      <section id="execute-ddl" xreflabel="Executing DDL Statements">
        <title>Executing DDL Statements</title>

        <para>SQLWorkbench will send every statement to the backend DBMS, so
        executing DDL statements (<literal>CREATE TABLE</literal>, ...) is not a problem.</para>

        <para>However when executing statements such as <literal>CREATE PROCEDURE</literal> which
        in turn contain valid SQL statement, delimited with a ; the SQL
        Workbench will send everything up to the first semicolon to the
        backend. In case of a <literal>CREATE PROCEDURE</literal> statement this will obviously
        result in an error as the statement is not complete.</para>
        
        <para>This is an example of a <literal>CREATE PROCEDURE</literal> which will 
        <emphasis role="bold">not</emphasis> work due to the embedded semicolon in 
        the procedure source itself</para>
<programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
result INTEGER;
BEGIN
  SELECT max(col1) INTO result FROM sometable;
  RETURN result;
END;</programlisting>
        <para>When executing this script, Oracle would return an error because SQL Workbench/J will
        send everything up to the keyword <literal>INTEGER</literal> to the database. Obviously this
        fragment is not correct.</para>
        
        <para>The solution is to terminate the script with a character
        sequence called "<xref linkend="options-alternate-delimiter"/>". 
        The value of this sequence can be configured in the <link linkend="options">options dialog</link>. 
        The default is <emphasis role="bold">./</emphasis> (a dot followed by a slash)</para>

        <para>If a SQL statement is terminated with the alternate delimiter, 
        that delimiter is used instead of a semicolon. This way the semicolons embedded in
        the <literal>CREATE PROCEDURE</literal> script will be sent correctly to the backend
        DBMS.</para>
        
        <para>So the solution to the above problem is the following script:</para>
<programlisting>CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
result INTEGER;
BEGIN
  SELECT max(col1) INTO result FROM sometable;
  RETURN result;
END;
./</programlisting>
        <para>Note the trailing <literal>./</literal> at the end in order to "turn on" the
        use of the alternate delimiter.</para>
        
        <para><emphasis role="bold">When is the alternate delimiter used?</emphasis></para>
        
        <para>As soon as the statement (or script) that you execute is terminated with the
        alternate delimiter, the alternate delimiter is used to separate the individual 
        SQL statements. When you execute selected text from the editor, be sure to
        select the alternate delimiter as well, otherwise it will not be
        recognized (if the alternate delimiter is not selected, the statement to be executed
        does not end with the alternate delimiter).</para>
        <para>If you use the alternate delimiter (by terminating the whole script with it), then
        <emphasis role="bold">all</emphasis> statements have to be delimited with it. You cannot mix the use
        of the normal semicolon and the alternate delimiter for one execution. The following statement (when executed
        as a whole) would produce an error message:</para>
<programlisting>
SELECT sysdate FROM DUAL;

CREATE OR REPLACE FUNCTION proc_sample RETURN INTEGER
IS
result INTEGER;
BEGIN
  SELECT max(col1 INTO result FROM sometable;
  RETURN result;
END;
./</programlisting>
      <para>SQL Workbench/J would turn on the use of the alternate delimiter as the whole script is terminated
      with it. As there is only a semicolon between the <literal>SELECT</literal> and the <literal>CREATE</literal>
      statement, both would be sent to the database as one statement.</para>

      </section>
    </section>

      <section id="macros">
        <title>SQL Macros</title>

        <para>SQL Workbench/J offers so called SQL macros, or abbreviations.
        You can define macros for often used SQL statements. Once defined, you
        only need to enter the defined macro name and the underlying SQL
        statement will be executed.</para>

        <section id="define-macro">
          <title>Defining Macros</title>

          <para>There are two ways to define a SQL macro. Once you have
          selected the statement in the SQL editor, select
          <menuchoice><guimenu>SQL</guimenu><guimenuitem>Add SQL macro</guimenuitem></menuchoice> from the main 
          menu. A dialog box will appear where you can enter the name for this macro. 
          From then on, you can execute the defined statement by simply entering the
          given name.</para>

          <para>You can edit, delete and add new macros through
          <menuchoice><guimenu>File</guimenu><guimenuitem>Manage SQL macros</guimenuitem></menuchoice>.</para>
        </section>

        <section id="exec-macro">
          <title>Executing macros</title>

          <para>To execute a macro, you can either type the alias you have
          defined, or select <menuchoice><guimenu>SQL</guimenu><guimenuitem>SQL Macros</guimenuitem></menuchoice>. 
          The first 10 macros will be listed there directly. The other macros can be executed when
          selecting <menuchoice><guimenu>SQL</guimenu><guisubmenu>SQL Macros</guisubmenu><guimenuitem>Run macro...</guimenuitem></menuchoice> This will
          display a dialog with all defined macros. After selecting a macro,
          it can be executed by clicking on the <guibutton>Run</guibutton> button.</para>

          <para>The alias for a macro which is executed through the menu, will
          not be placed into the editor and will not overwrite the current
          text in the editor.</para>
        </section>
      </section>
    
      <section id="using-workspaces">
        <title>Using workspaces</title>

        <para>The complete history for all editor tabs is saved and loaded
        into one file, called a workspace. These workspaces can be saved and loaded
        to restore a specific editing context. 
        You can assign a saved workspace to a <link linkend="profiles">connection profile</link>. 
        When the connection is established, the workspace is loaded into SQL Workbench/J. Using this feature
        you can maintain a completely different set of statements for different connections.</para>
        
        <para>If you do not assign a workspace to a connection profile, a workspace with the 
        name <filename>Default.wksp</filename> will be used for storing the statement history.
        This default workspace is shared between <emphasis role="bold">all</emphasis> profiles
        that have no workspace assigned. 
        </para>

        <para>To save a new workspace from the current SQL statement history,
        select <menuchoice><guimenu>Workspace</guimenu><guimenuitem>Save Workspace as....</guimenuitem></menuchoice></para> 
        <para>The default file extension for workspaces is <filename>wksp</filename>.</para>

        <para>Once you have loaded a workspace, you can save it with
        <menuchoice><guimenu>Workspace</guimenu><guimenuitem>Save Workspace</guimenuitem></menuchoice>. 
        The current workspace is automatically
        saved, when you exit the Workbench.</para>

        <para>An existing workspace can be loaded with
        <menuchoice><guimenu>Workspace</guimenu><guimenuitem>Load Workspace</guimenuitem></menuchoice>
        </para>
        <para>If you have an external file open in one of the editor tabs, the filename itself 
        will be stored in workspace. When loading the workspace SQL Workbench/J will try to load
        the external file again. If the file does not exist, the last history entry from the saved 
        history for that tab will be displayed.</para>
        <para>The workspace file itself is a normal ZIP file, which contains one file with the 
        statement history for each tab. The individual files can be extracted from the workspace 
        using your favorite UNZIP tool.</para>
        
      </section>

    <section id="manage-scripts">
      <title>Saving and loading SQL scripts</title>

      <para>The text from the current editor can be saved to an external file,
      by choosing <menuchoice><guimenu>File</guimenu><guimenuitem>Save</guimenuitem></menuchoice> or 
      <menuchoice><guimenu>File</guimenu><guimenuitem>Save as</guimenuitem></menuchoice>. The filename for the
      current editor will be remembered. To close the current file, select <menuchoice><guimenu>File</guimenu><guimenuitem>Discard file</guimenuitem></menuchoice> 
      <keycap>(Ctrl-F4)</keycap> or use the context menu on the tab label itself.</para>
      <note>
        <para>Detaching a file from the editor will remove the text from editor as well. 
        If you only want to detach the filename from the editor 
        but keep the text, then press <keycap>Ctrl-Shift-F4</keycap> or hold down the <keycap>Shift</keycap> key
        while selecting the Discard menu item.</para>
      </note>
      <para>When you load a SQL script and execute the statements, be aware that due to the history management 
      in SQL Workbench/J the content of the external file will be placed into the history buffer. If you load 
      large files, this might lead to massive memory consumption. Currently only the <emphasis>number</emphasis> of
      statements put into the history can be controlled, but not the total size of the history itself. This might
      change with a later version.</para>
    </section>

    <section id="server-messages">
      <title>Viewing server messages</title>

      <para>For MS SQL Server, any message written with the
      <literal>PRINT</literal> command will be displayed in the messages tab.</para>

      <para>For Oracle the dbms_output package is supported as well. Support for this
      package can to be turned on manually with the <xref linkend="command-enableout"/> command 
      or by default in the <link linkend="options-enable-out">system preferences</link>
      </para>

      <para>Postgres supports a similar mechanism. Any text returned by a function or 
      stored procedure with the <literal>RAISE</literal> keyword, will be displayed in the message tab as well</para>
      
      <para>If your DBMS supports something similar please let me know, and I
      will implement it provided I have access to the DBMS. Please send your
      request to workbench@kellerer.org</para>
    </section>

    <section id="edit-data">
      <title>Editing the data</title>

      <para>Once the data has been retrieved from the database, it can be
      edited directly in the table. The SQL Workbench assumes that enough
      columns have been retrieved from the table so that at a unique
      identifier is available to identify the rows to be updated.</para>

      <para>If you have defined primary keys in your database schema, and they
      are part of the result set, the primary key columns will be used for the
      where statements for <literal>UPDATE</literal> and <literal>DELETE</literal>. If no primary key columns are
      found, the JDBC driver is asked for a <emphasis>best row identifier</emphasis>. If
      that doesn&#39;t return any information, the original values of all
      columns in the result set will be used to restrict <literal>DELETE</literal>&#39;s and
      <literal>UPDATE</literal>&#39;s</para>

      <para>To enter the Edit mode, choose 
      <menuchoice><guimenu>Data</guimenu><guimenuitem>Enable Data Edit</guimenuitem></menuchoice>
      from the main menu. The toolbar icon will indicate the edit mode by
      being pressed down (The pressed down look is dependent on the
      Look &#38; Feel). Now the data in the result set can be edited. To
      insert a new row choose 
      <menuchoice><guimenu>Data</guimenu><guimenuitem>Insert row</guimenuitem></menuchoice>. The new row will be
      inserted prior the current row. To delete the current row, choose
      <menuchoice><guimenu>Data</guimenu><guimenuitem>Delete row</guimenuitem></menuchoice>.</para>

      <para>The changes will not be saved to the database until you choose
      <menuchoice><guimenu>Data</guimenu><guimenuitem>Save</guimenuitem></menuchoice>. 
      If the update is successful (no database errors) a <literal>COMMIT</literal> will be
      sent to the database automatically. If an error is reported during the 
      update, a <literal>ROLLBACK</literal> will be sent to the database</para>

      <para>Once you issue a new <literal>SELECT</literal> statement the edit mode will be
      disabled. If you try to enable the edit mode for a result set where more
      than one table is involved, you will be prompted for the table which should 
      be updated.</para>
    </section>
    
    <section id="change-display">
      <title>Changing the display of the result set table</title>

      <para>Each column width of the result set table can be changed. When you
      press the right mouse button in the header area of the result set, the
      following menu is displayed:</para>

      <para><guimenuitem>Optimal width</guimenuitem> determines the text width of the longest
      entry of that column and adjusts the column width to completely display
      the contents. Optimal width for all columns can also be executed by
      pressing Ctrl-W</para>

      <para>Each row can be resized vertically as well, to display multi line
      contents.</para>
    </section>

  </section>

  <section id="wb-commands">
    <title>Special SQL Workbench/J commands</title>

    <section id="command-list">
      <title>LIST</title>

      <para>This command lists all available tables (including views and
      synonyms). This output is equivalent to the left part of the Database
      Object Explorer&#39;s Table tab.</para>
    </section>

    <section id="command-listprocs">
      <title>LISTPROCS</title>

      <para>This command will list all stored procedures available to the
      current user. The output of this command is equivalent to the Database
      Explorer&#39;s Procedure tab.</para>
    </section>

    <section id="command-desc">
      <title>DESCRIBE (DESC)</title>

      <para>Describe shows the definition of the given table. It can be
      abbreviated with DESC. The command expects the table name as a parameter.</para>
      <programlisting>DESC person;</programlisting>
      <para>If you want to show the structure of a table from a different user, you need
      to prefix the table name with the desired user</para>
      <programlisting>DESCRIBE otheruser.person;</programlisting>
    </section>

    <section id="command-listcat">
      <title>LISTCAT (LISTDB)</title>

      <para>Lists the available catalogs or databases. The output of this
      command depends on the underlying JDBC driver and DBMS. For MS SQL
      Server this lists the available databases (which then could be changed
      by USE &#60;dbname&#62;)</para>

      <para>For Oracle this command returns nothing (as Oracle does not
      implement the concept of catalogs)</para>
      <para>This command calls the JDBC driver's getCatalogs() method and will 
      return its result. If on your database system this command does not display
      a list, it is most likely that your DBMS does not support catalogs (e.g. Oracle)
      or the driver does not implement this feature.
      </para>
    </section>

    <section id="command-spool">
      <title>EXPORT (EXP, SPOOL)</title>

      <para>Exports the result of the <emphasis role="strong">next</emphasis>
      SQL statement (which has to produce a result set) to a file without
      loading the data into memroy. This is
      equivalent to the menu item       
      <menuchoice><guimenu>SQL</guimenu><guimenuitem>Spool Data</guimenuitem></menuchoice>. 
      The export command gives you more control over the format of the created file, then the
      menu.</para>
      <note><para>EXP and SPOOL are synonyms for the EXPORT command. All three
      commands are identical.</para></note>

      <para>The command supports the following parameters:</para>

      <informaltable frame="all">
        <tgroup cols="2" align="left">
          <colspec colname="c1" colwidth="4cm" />
          <colspec colname="c2" />
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>
          
          <tbody valign="top">
            <row>
              <entry><para>-type=[text|sql|xml]</para></entry>

              <entry><para>Defines the type of the output file
              </para></entry>
            </row>

            <row>
              <entry><para>-file=&#60;filename&#62;</para></entry>

              <entry><para>Defines the output file </para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <section>
        <title>Parameters for the type SQL</title>

        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <colspec colname="c1" colwidth="4cm" />
            <colspec colname="c2" />
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody valign="top">
              <row>
                <entry><para>-table</para></entry>

                <entry><para>If the type is SQL the given
                tablename will be used to create the INSERT statements. This
                is useful when the data is retrieved from several different
                tables, and should be inserted into one target table (e.g.
                when migrating data from one DBMS to another)</para></entry>
              </row>

              <row>
                <entry><para>-charfunc</para></entry>

                <entry><para>If this parameter is given, any
                non-printable character in a text/character column will be
                replaced with a call to the given function with the ASCII
                value as the parameter. </para> <para>If -charfunc=chr is
                given (e.g. for an Oracle syntax), a CR (=13) inside a
                character column will be replaced with:</para> 
                <para><literal>INSERT
                INTO ... VALUES (&#39;First line&#39;||chr(13)||&#39;Second
                line&#39; ... )</literal></para> 
                
                <para>This setting will affect ASCII values 0 to 31</para>
                </entry>
              </row>

              <row>
                <entry><para>-concat</para></entry>

                <entry><para>If charfunc is given and the DBMS
                does not support the standard ANSI character for
                concatenating strings (which is ||) then a different
                concatenation character can be defined with this parameter:</para>
                <para>-concat=+</para> <para>e.g. for MS Access </para></entry>
              </row>

              <row>
                <entry><para>-commitevery</para></entry>

                <entry><para>A numeric value which identifies
                the number of <literal>INSERT</literal> statements after which a <literal>COMMIT</literal> 
                is put into the generated SQL script.</para> 
                <para>-commitevery=100</para>
                <para>will create a <literal>COMMIT;</literal> after every 100 <literal>INSERT</literal>&#39;s</para>
                </entry>
              </row>

              <row>
                <entry><para>-createtable==[true|false]</para></entry>

                <entry><para>If this parameter is set to true,
                the necessary <literal>CREATE TABLE</literal> command is put into the output
                file.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>

      <section id="spool-text-parameters">
        <title>Parameters for the type TEXT</title>

        <informaltable frame="all">
          <tgroup cols="2"  align="left">
            <colspec colname="c1" colwidth="4cm" />

            <colspec colname="c2" />
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>

            <tbody valign="top">
              <row>
                <entry><para>-delimiter</para></entry>

                <entry><para>The given string sequence will be
                placed between two columns. The default is a tab character.</para></entry>
              </row>

              <row>
                <entry><para>-dateformat</para></entry>

                <entry><para>The date format to be used when
                writing date columns into the output file. The syntax of the
                format definition, is the same as for the SimpleDateFormat
                class.</para></entry>
              </row>

              <row>
                <entry><para>-datetimeformat</para></entry>

                <entry><para>The format to be used when writing
                datetime (or timestamp) columns into the output file.
                </para></entry>
              </row>

              <row>
                <entry><para>-quotechar</para></entry>

                <entry><para>The character (or sequence of
                characters) to be used to enclose text data. The default is
                not to use a quote character</para></entry>
              </row>

              <row>
                <entry><para>-decimal</para></entry>

                <entry><para>The decimal symbol to be used for
                numbers. The default is a point.</para></entry>
              </row>

              <row>
                <entry><para>-cleancr=[true|false]</para></entry>

                <entry><para>Controls the writing of non
                printing characters inside character columns. If
                cleancr=true, any non printable character (&#60; 32) will be
                replaced with a space character.</para></entry>
              </row>

              <row>
                <entry><para>-header=[true|false]</para></entry>

                <entry><para>If this parameter is set to true,
                the header (i.e. The column names) are placed into the
                output file.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>

      <section id="spool-xml-parameters">
        <title>Parameters for the type XML</title>

        <informaltable frame="all">
          <tgroup cols="2" align="left">
            <thead>
              <row>
                <entry>Parameter</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry><para>-table</para></entry>

                <entry><para>The given tablename will be put
                into the &#60;table&#62; tag as an attribute.</para></entry>
              </row>

              <row>
                <entry><para>-dateformat</para></entry>

                <entry><para>The date format to be used when
                writing date columns into the output file. The syntax of the
                format definition, is the same as for the SimpleDateFormat
                class.</para></entry>
              </row>

              <row>
                <entry><para>-datetimeformat</para></entry>

                <entry><para>The format to be used when writing
                datetime (or timestamp) columns into the output file.
                </para></entry>
              </row>

              <row>
                <entry><para>-decimal</para></entry>

                <entry><para>The decimal symbol to be used for
                numbers. The default is a point.</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Examples:</para>

        <programlisting>EXPORT -type=text -file=&#34;c:/data/data.txt&#34; -delimiter=&#34;|&#34; -decimal=&#34;,&#34;;
SELECT * FROM data_table;</programlisting>

        <para>Will create a text file with the data from data_table. Each
        column will be separated with the character | Each fractional number
        will be written with a comma as the decimal separator.</para>

        <programlisting>EXPORT -type=sql -file=&#34;c:/data/newtable.sql&#34; -table=newtable;
SELECT * FROM table1, table2 
WHERE table1.column1 = table2.column1;</programlisting>

        <para>Will create a SQL scripts which inserts the data from table1
        and table2 into a table called newtable. If the parameter -table is
        omitted, the creation of SQL is only possible, if the SELECT is
        based on a single table (or view).</para>
        <para>For more details on how you can export and import data using the XML format 
        please refer to <xref linkend="xml-export-import"/></para>
      </section>
    </section>
    <section id="command-import">
      <title>IMPORT (IMP)</title>
      <para>The IMPORT command can read and parse XML files generated by the
      <link linkend="command-spool">EXPORT</link> command's XML format.
      It is the recommended way to transfer files from one system to another because
      those commands do not need to read all the data into memory.
      </para>
      <para>The IMPORT command has the following syntax</para>
      <informaltable frame="all">
        <tgroup cols="2" align="left">
          <colspec colname="c1" colwidth="4cm" />
          <colspec colname="c2"/>
          <thead>
            <row>
              <entry>Parameter</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><para>-type=[xml]</para></entry>
              <entry><para>Defines the type of the input file</para></entry>
            </row>
            <row>
              <entry><para>-file=&#60;filename&#62;</para></entry>
              <entry><para>Defines the full name of the input file</para></entry>
            </row>
            <row>
              <entry><para>-commitevery=(number)</para></entry>
              <entry><para>Issue a commit every (number) rows. If this parameter
              is not passed, then SQL Workbench/J will commit everything when 
              all rows have been imported. Passing a value of zero or a negativ
              value will enable this behaviour as well.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>        
      <para>Currently only -type=xml is supported. Support for tab separated 
      text files will be implemented in a later release</para>
      <para>The XML import only works on files generated by the <link linkend="command-spool">EXPORT</link> 
      (or SPOOL) command. It does not require any additional arguments as all the information
      that is needed to import the data is stored in the XML file.</para>
      <note><para>The architecture of the SQL Workbench/J makes it possible to 
      plug other XML parsers into the system to allow the import of other 
      XML formats. This is not yet enabled. If you have the need to use your
      own XML parser, please contact the author for details.</para></note>
      <para>For more information on how to export and import data with SQL Workbench/J
      please see <xref linkend="xml-export-import"/>.</para>
    </section>

    <section id="command-enableout" xreflabel="ENABLEOUT">
      <title>ENABLEOUT</title>

      <para>This command enables the <literal>DBMS_OUTPUT</literal> package when connected to
      an Oracle database. On other systems this command does nothing. After
      the <literal>DBMS_OUTPUT</literal> package is enabled, any message written with
      dbms_output.put_line() are displayed in the message pane after
      executing a SQL statement. It is equivalent to calling the
      dbms_output.enable() procedure.</para>

      <para>The <literal>DBMS_OUTPUT</literal> package can be enabled automatically when a
      connection is established. See <xref linkend="options-enable-out"/></para>
    </section>

    <section id="command-disableout">
      <title>DISABLEOUT</title>

      <para>This disables the <literal>DBMS_OUTPUT</literal> package for an Oracle database.
      This is equivalent to calling dbms_output.disable() procedure.</para>
    </section>
  </section>

  <section id="export-import">
    <title>Exporting and importing data</title>
    <section id="export">
      <title>Export data</title>

      <para>You can export the data of the <emphasis role="strong">result set</emphasis> into local files of the
      following formats:</para>

      <itemizedlist>
        <listitem>
          <para>HTML</para>
        </listitem>

        <listitem>
          <para>SQL INSERT syntax</para>
        </listitem>

        <listitem>
          <para>XML format</para>
        </listitem>

        <listitem>
          <para>Tab separated text file. Columns are separated with a tab, rows are separated with a newline character</para>
        </listitem>
      </itemizedlist>

      <para>To copy the data into the clipboard choose <menuchoice><guimenu>Data</guimenu><guimenuitem>Copy into
      Clipboard</guimenuitem></menuchoice> from the data menu. The export dialog uses default
      settings for the creation of the files. If you want to have more control
      over the generated output file, use the <link linkend="command-spool">EXPORT</link>
      command.</para>
      <para>Please keep in mind that exporting the data from the result set 
      requires you to load everything into memory. If you need to export 
      data sets which are too big to fit into memory, you should use the XML files
      generated by the <link linkend="command-spool">EXPORT</link> command.
      The IMP (IMPORT) command can read those files without the need to load the whole
      file into memory. The command can write the data directly into a file without the 
      need to load all rows into memory and is the recommended way of moving data from 
      one system to another. For details refer to the section
      <xref linkend="xml-export-import"/></para>
    </section>

    <section id="import">
      <title>Import data</title>

      <para>SQL Workbench/J can import tab separated text files into the current
      result set. This means, that you need to issue the approriate <literal>SELECT</literal> 
      statement first. The structure of the file has to match the structure of the result set, 
      otherwise an error will occur. To initiate the import select 
      <menuchoice><guimenu>Data</guimenu><guimenuitem>Import</guimenuitem></menuchoice></para>

      <para>When selecting the file, you can change some parameters for the
      import:</para>

      <informaltable frame="all" >
        <tgroup cols="2" align="left">
          <thead valign="top">
            <row>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody valign="top">
            <row>
              <entry><para>Header</para></entry>
              <entry><para>if this option this is checked, the first line of the import file will be ignored</para></entry>
            </row>
            <row>
              <entry><para>Delimiter</para></entry>
              <entry><para>the delimiter used to separate column values. Enter \t for the tab character</para></entry>
            </row>
            <row>
              <entry><para>Date Format</para></entry>
              <entry><para>The format in which date fields are specified. The
                format of this parameter is the same as the SimpleDateFormat class from
                the JDK.</para></entry>
            </row>
            <row>
               <entry><para>Number Format</para></entry>
               <entry><para>The format in which numeric values are specified.
      Most import if a comma or a point are used as the decimal separator. In
      the above example a point is used. Enter #,# if a comma is used.</para></entry>
            </row>
            <row>
              <entry><para>Quote char</para></entry>
              <entry><para>The character used to quote values with special
      characters. Make sure that each opening quote is followed by a
      closing quote in your text file.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para></para>
      <note><para>Using the <link linkend="command-import">IMPORT</link> command together
      with an XML file is the recommended way of importing data.</para></note>
    </section>

	  <section id="xml-export-import" xreflabel="XML Export and Import">
	      <title>XML Export and Import</title>
			 <para>You can use SQL Workbench/J's XML files to copy data from 
       one system to another.</para>
       <para>You need to create the XML file first, using the EXPORT (or SPOOL) command
       from within the workbench, beeing connected to the source system. Suppose your data
       is stored in the table <literal>PERSON</literal> on your source system
       and you want to only select the columns <literal>lastname, firstname, birthday</literal>
       to be transferred to your target system.
       </para>
       <para>To create the XML file the following command should be used:</para>  
          <programlisting>EXPORT -type=xml -file=&#34;c:/data/person.xml&#34; -table=contact;
SELECT lastname, firstname, birthday FROM person;</programlisting>
       <para>As the data should be imported into the table <literal>CONTACT</literal>
       the <literal>-table=contact</literal> parameter is passed to the <literal>EXPORT</literal>
       command. You can achieve the same, by editing the XML file afterwards and 
       change the contents of of the <literal>&gt;table-name&lt;</literal> tag.</para>
       <para>Once the XML file is generated, you can connet to your source system and 
       import the file with the following command:</para>
       <programlisting>IMPORT -type=xml -file=&#34;c:/data/person.xml&#34;;</programlisting>
       <para>SQL Workbench/J will read the XML file and insert every row into the table <literal>CONTACT</literal>
       of the database. AS the XML format generated by SQL Workbench/J includes the internal long value for date
       objects, it is not necessary to set the data or datetime format when importing the data.
       If you have a file with a lot of rows, you might want to set the parameter <literal>-commitevery=n</literal>.
       Some DBMS work faster if you commit more frequently instead of commit a huge number of inserts at the end.
       </para>
		</section>
  </section>

  
  <section id="dbexplorer">
    <title>Database Object Explorer</title>
    
    <para>The Database Object Explorer displays the available database objects
    such as Tables, Views, Triggers and Stored Procedures.</para>

    <para>At the top of the window, the current schema (for MS SQL Server this
    would be a database, for Oracle this is the user) can be selected.</para>

    <para>The first tab displays the structure of tables and views. The type
    of object displayed can be chosen from the drop down right above the table
    list. This list will be returned by the JDBC driver, so the available
    "Table types" can vary from DBMS to DBMS.</para>

    <para>As soon as either the Schema/Database or the Type is selected, the
    list will be refreshed.</para>

    <para>The Database Explorer can either be displayed as a separate window,
    or as a tab inside the main window. This behavior can be changed in the
    system options. To close the Db Explorer Tab, right click on the tab
    label, and choose <guimenuitem>Close Tab</guimenuitem>. If the Explorer tab is left 
    open when exiting the SQLWorkbench/J, the explorer tab will be restored the next
    time SQL Workbench/J is started. (the Explorer <emphasis role="strong">window</emphasis>
    will <emphasis role="strong">not</emphasis> be restored)</para>

    <section id="dbexplorer-tablelist">
      <title>Table tab</title>

      <section id="table-tab">
        <title>Tables</title>

        <para>When a table is selected, the right part of the window will
        display it&#39;s column definition, the SQL statement to create the
        table, any index defined on that table (only if the JDBC driver
        returns that information), other tables that are referenced by the
        currently selected table, any table that references the currently
        selected table and any trigger that is defined on that table.</para>

        <para>When an Oracle synonym is selected, the columns tab will display
        the column definition of the underlying table or view. The source tab
        will display the statement to re-create the synonym.</para>

        <para>The References/Referenced by tabs, also display the complete
        reference tree (any table referencing the tables referencing the
        currently selected one, and so on).</para>

        <para>The table list offers the following additional commands in the
        context menu:</para>

        <para><emphasis>Spool data</emphasis></para>

        <para>This will execute a <literal>SPOOL</literal> command for the currently selected
        table. Choosing this option is equivalent to do a <literal>SELECT * FROM table;</literal>
        and then executing <menuchoice><guimenu>SQL</guimenu><guimenuitem>Spool data</guimenuitem></menuchoice>
        from the SQL editor in the main window (or issuing a SPOOL command before the SELECT). 
        See the description of the <link linkend="command-spool">SPOOL command</link>
        for details.</para>

        <para><emphasis>Show table data</emphasis></para>

        <para>This will put a SELECT statement into the SQL editor to display
        all data for the selected table. You can choose into which editor tab
        the statement will be written. The currently selected editor tab is
        displayed in bold</para>
        
        <para><emphasis role="bold">Create SQL Script</emphasis></para>
        
        <para>With this command a script for multiple objects can be created. Select
        all the tables, views or other objects in the table list, that you want 
        to create a script for, then right click and select "Create SQL Script". 
        This will generate one script for all selected items in the list.</para>
        <para>When this command is selected, a new window will be shown. The window
        contains a statusbar which indicates the object that is currently processed. The
        complete script will be shown as soon as all objects have been processed</para>
        
      </section>

      <section id="data-tab">
        <title>Data tab</title>

        <para>The data tab will display the data from the currently selected
        table. There are several options to configure the display of this tab.
        The Autoload check box, controls the retrieval of the data. If this is
        checked, then the data will be retrieved from the database as soon as
        the table is selected in the table list (and the tab is visible).</para>

        <para>You can define a maximum number of rows which should be
        retrieved. If you enter 0 (zero) then all rows are retrieved. Limiting
        the number of rows is useful if you have tables with a lot of rows,
        where the entire table would not fit into memory.</para>

        <para>In addition to the max rows setting, another limit can be
        defined. If the total number of rows in the table exceeds this second
        limit, a warning is displayed, whether the data should be loaded.</para>

        <para>This is useful when the max rows parameter is set to zero and
        you accidently display a table with a large number of rows.</para>

        <para>If the automatic retrieval is activated, then the retrieve of
        the data can be prevented by holding down the Shift key while
        switching to the data tab.</para>

        <para>The data in the tab can be edited just like the data in the main
        window. To add or delete rows, you can either use the buttons on the
        toolbar in the upper part of the data display, or the popup menu. To
        edit a value in a field, simply double click that field, start typing
        while the field has focus (yellow border) or hit F2 while the field
        has focus.</para>
      </section>
    </section>

    <section id="procedure-tab">
      <title>Procedure tab</title>

      <para>The procedure tab will list all stored procedures and functions
      stored in the current schema. For procedures or functions returning a
      result set, the definition of the columns will be displayed as well.</para>

      <para>Functions in Oracle packages will be listed separately on the left
      side, but the source code will contain all functions/procedures from
      that package.</para>
    </section>

    <section id="search-tables">
      <title>Search tables</title>

      <para>This tab offers the ability to search for a value in all text
      columns of all tables which are selected. The results will be displayed
      on the right side of that tab. The result will always display the
      complete row where the search value was found. Any column that contains
      the entered value will be highlighted.</para>

      <para>The value will be used to create a <literal>LIKE &#60;value&#62;</literal>
      restriction for each text column on the selected tables. Therefore the
      value should contain a wildcard, otherwise the exact expression will be
      searched.</para>

      <para>You can apply a function to each column as well. This is useful if
      you want to to do a case insensitive search on Oracle (Oracles VARCHAR
      comparison is case sensitiv). In the entry field for the column the
      placeholder $col$ is replaced with the actual column name during the
      search. To do a case insensitive search in Oracle, you would enter
      lower($col$) in the column field and &#39;%test%&#39; in the value
      field.</para>

      <para>The expression in the column field is sent to the DBMS without
      changes, except the replacement of $col$ with the current column name.
      The above example would yield a lower(&#60;column_name&#62;) like
      &#39;%test%&#39; for each text column for the selected tables.</para>

      <para>The generated SQL statements are logged in the second tab, labelled
      SQL Statements</para>
			
			<para>In the resulting tables, SQL Workbench/J tries to highlight those columns
			which match the criteria. This might not always work, if you apply a funtion to the 
			column itself such as <literal>to_upper()</literal> SQL Workbench/J does not know 
			that this will result in a case-insesitive search on the database. SQL Workbench/J tries to 
			guess if the given function/value combination might result in a case insesitive search (especially
			on a DBMS which does a case sensitive search by default) but this might not work 
			in all the cases and for all DBMS</para>
			
    </section>
  </section>

  <section id="options">
    <title>Configuring SQL Workbench/J</title>

    <section id="options-explorer-as-tab">
      <title>DB Explorer as Tab</title>

      <para>The Database Explorer can either be displayed as a separate
      window, or inside the main window as a another tab. If this option is
      selected, the Db Explorer will be displayed inside the main window. If
      the option Retrieve DB Explorer is checked as well, the current database
      scheme will be retrieved upon starting SQL Workbench/J!</para>
    </section>

    <section id="options-retrieve-explorer" xreflabel="Retrieve DB Explorer">
      <title>Retrieve DB Explorer</title>

      <para>If this option is enabled, the contents of the database schema is
      retrieved when the DB Explorer is displayed. If this option is not
      checked, either the &#34;Refresh&#34; button or selecting a schema or
      table type will load the list.</para>
    </section>

    <section id="options-encrypt-password">
      <title>Encrypt passwords</title>

      <para>If this option is enabled, the password stored within a connection
      profile will be encrypted. Whether the password should be stored at all
      can be selected in the profile itself.</para>
    </section>

    <section id="options-confirm-update">
      <title>Confirm result set updates</title>

      <para>When this option is enabled, the statements which are sent to the
      database when saving changes to result set table, are displayed before
      execution. The update can be canceled at that point if the statements
      are not correct. The generated statements can also be saved to a file
      from that window.</para>

      <para>The displayed statements can not be changed!</para>
    </section>

    <section id="options-enable-out" xreflabel="Enabling DBMS_OUTPUT">
      <title>Enable DBMS_OUTPUT</title>

      <para>If this option is enabled, the <literal>DBMS_OUTPUT</literal> package is
      automatically enabled when connecting to an Oracle database. This option
      has no effect on other DBMS. If it is disabled, the <literal>DBMS_OUTPUT</literal> package
      can be enabled using the enableout command.</para>

      <para>If this option is not checked, you need to manually enable the <literal>DBMS_OUTPUT</literal> 
      with <xref linkend="command-enableout"/>.</para>
    </section>

    <section id="option-animated-icon" xreflabel="Enable animated icons">
      <title>Enable animated icons</title>
      <para>Enable or disable the use of an animated icons in the SQL editor to indicate a running
      SQL statement. It has been reported, that the animated icon does impact 
      performance on certain combinations of JDK/OS Version/Graphics driver. If you 
      experience a high CPU usage during the execution of SQL statements, try
      to turn off the usage of the animated icons.</para>
    </section>
    
    <section id="options-date-format">
      <title>Date format</title>

      <para>Define the date format for displaying date columns in the result
      set.</para>
    </section>

    <section id="options-alternate-delimiter" xreflabel="alternate delimiter">
      <title>Alternate Delimiter</title>

      <para>When last characters of the text in the editor match the character
      sequence in this input field, this character sequence is used to delimit
      individual statements in the editor.</para>

      <para>This is needed when creating stored procedures which themselves
      have a semicolon in the source code. Normally the SQL Workbench/J would
      stop parsing the command at the first semicolon and send that command to
      the database (which will produce an error message as the statement is
      not complete).</para>

      <para>In the case of a <literal>CREATE PROCEDURE</literal> statement this should be
      terminated with the character sequence entered in this input field. The
      terminator can have more than one character e.g. ./
      (a dot followed by a slash). 
      It should not be a sequence which is used inside a SQL statement.</para>

      <para>Using a slash as the terminator (as e.g. SQL*Plus does) might lead
      to problems when stored procedures are created that do calculations such
      as</para>

      <para><programlisting>SELECT sum(field)/count(*) FROM table;</programlisting></para>

      <para>This would lead to problems as the slash is recognized as the
      statement terminator. Thus the SQL Workbench/J would send everything up
      to sum(field) to the database and execute it.</para>
    </section>

    <section id="options-history-size">
      <title>History size</title>

      <para>The number of statements per tab which should be stored in the
      statement history. Remember that always the full text of the editor
      (together with the selection and cursor information) is stored in the
      history. If you have large amounts of text in the editor and set this
      number quite high, be aware of the memory consumption this might create.</para>
    </section>

    <section id="options-decimal-symbol">
      <title>Decimal symbol</title>

      <para>The character which is used as the decimal separator when
      displaying numbers.</para>
    </section>

    <section id="options-decimal-digits">
      <title>Decimal digits</title>

      <para>Define the maximum number of digits which will be displayed for
      numeric columns. This only affects the display of the number internally
      they are still stored as the DBMS returned them. To see the internal
      value, leave the mouse cursor over the cell. The tooltip which is
      displayed will contain the number as it was returned by the JDBC driver.
      When exporting data or copying it to the clipboard, the real value will
      be used.</para>
    </section>

    <section id="options-column-width">
      <title>Max column width</title>

      <para>When the initial display size of a column is calculated, the
      column width will not exceed this number. This is useful when displaying
      large character columns.</para>
    </section>

    <section id="options-filed-delimiter">
      <title>Field delimiter</title>

      <para>The default delimiter used when exporting data to a text file.
      This can be overridden in the file selection dialog when actually
      exporting the data.</para>
    </section>

    <section id="options-quote-character">
      <title>Quote character</title>

      <para>This character will be used to quote column data when exporting to
      a text file. When using a tab character (\t) as the field delimiter this
      is not really necessary. When using a comma as the field delimiter,
      quoting the data is necessary in case the data contains a a comma (or
      whatever character is used to delimit the columns). This will be the
      default for exporting data through the menu. If you use the <link
      linkend="command-spool"><literal>SPOOL</literal> command</link>, you can
      freely customize the output for each file you create.</para>
    </section>
    
    <section id="options-deftabletype">
    <title>Default Object Type</title>
      <para>This setting allows you to control the initial display of objects in the 
      <link linkend="dbexplorer">DbExplorer's</link> table panel. The value entered here
      will be used to set the default selection in the type drop down.</para>
      <para>The list in that dropdown is retrieved from the underlying DBMS through 
      a JDBC function call. So the value entered here should be something that is 
      available on all used DBMS. If the value entered in this property is not found
      in the list, the selection defaults to "*" which means all object types.</para>
      <note>
      <para>Don't forget to enable <xref linkend="options-retrieve-explorer"/> so 
      that the DbExplorer will be retrieved automatically with the desired object 
      type, when you open it.</para>
      </note>
 
    </section>

      <section id="manual-settings">
        <title>Settings not available through the GUI</title>
        
        <para>This section describes the additional options for SQL Workbench/J which 
        are not available in the options dialog.</para>
        
        <para>The name of the setting refers to the entry in the file <literal>workbench.settings</literal>
        which is located in the <link linkend="config-dir">configuration directoy</link>.
        </para>
        
        <informaltable frame="all">
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Description</entry>
                <entry>Default value</entry>
              </row>
            </thead>
            <tbody valign="top">
              <row>
                <entry><para>workbench.gui.showmnemonics</para></entry>
                <entry><para>Usually the mnemonic for a menu item is not shown under 
                       Windows 2000 or later. It will only be shown, when you press the 
                       ALT key. With this settings, this JDK behaviour can be controlled.</para></entry>
                <entry><para>true</para></entry>
              </row>
              <row>
                <entry><para>workbench.db.verifydriverurl</para></entry>
                <entry><para>Usually before connecting to the DBMS, SQL Workbench/J will 
                        call the acceptsUrl() method of the JDBC driver, to verify 
                        if the entered URL is correct and will be accepted by the
                        driver. Some drivers have been reported to indicate an error
                        in the URL even if they could connect successfully.</para>
                        <para>If you are seeing an error indicating that the URL is not
                        accepted by the drive, but you are sure that the driver accepts
                        the URL, then set this property to <literal>false</literal>
                        </para>
                </entry>
                <entry><para>true</para></entry>
              </row>
              <row>
                <entry><para>workbench.gui.showsplash</para></entry>
                <entry><para>Show a splash screen at startup</para></entry>
                <entry><para>false</para></entry>
              </row>
              <row>
                <entry><para>workbench.log.level</para></entry>
                <entry><para>Set the log level for the log file. Valid values are
                       <itemizedlist spacing="compact">
                          <listitem><para>DEBUG</para></listitem>
                          <listitem><para>INFO</para></listitem>
                          <listitem><para>WARN</para></listitem>
                          <listitem><para>ERROR</para></listitem>
                       </itemizedlist>
                       </para>
                </entry>
                <entry><para>INFO</para></entry>
              </row>
              <row>
                <entry><para>workbench.workspace.autosave</para></entry>
                <entry><para>If this is enabled, the current workspace will 
                be saved automatically, when a SQL statement is executed. This 
                setting was introduced with Build 61.</para>
                </entry>
                <entry><para>true</para></entry>
              </row>
              <row>
                <entry><para>workbench.dbmetadata.logsql</para></entry>
                <entry><para>If this is enabled, the SQL queries used to 
                retrieve DBMS specific meta data (such as view/procedure/trigger source,
								defined triggers/views) will be logged with level INFO.
								This can be used to debug customized SQL statements
								for DBMS's which are not (yet) preconfigured.</para>
                </entry>
                <entry><para>false</para></entry>
              </row>
              <row>
                <entry><para id="formatter-subselect-threshold">workbench.sql.formatter.subselect.maxlength</para></entry>
                <entry><para>When the SQL formatter hits a sub-SELECT while 
                parsing it will not reformat any statement which is shorter
                then the length specified through this property. I.e. any sub SELECT
                shorter then this value will be formatted as one single String without
                line breaks or indention. See <xref linkend="editor-reformat-sql"/> for 
								details on how the SQL formatting works.</para>
                </entry>
                <entry><para>60</para></entry>
              </row>
              <row>
                <entry><para id="manual-setting-snippet-no-newline">workbench.javacode.includenewline</para></entry>
                <entry><para>When creating a <link linkend="editor-copy-java-code-snippet">Java code snippet</link>,
								the newlines inside the editor are preserved by putting a <literal>\n</literal>
								character into the String declaration. Setting this property to false, will 
								tell SQL Workbench/J not put any <literal>\n</literal> characters into the Java string.</para>
                </entry>
                <entry><para>true</para></entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </section>
    </section>
</article>