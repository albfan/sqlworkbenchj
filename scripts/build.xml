<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="make-dev-jar" name="Workbench">

  <property name="root" value=".."/>
  <property name="doc" value="../doc"/>
  <property name="pdfwork" value="../build/pdfwork"/>
  <property name="src" value="../src"/>
  <property name="testsrc" value="../test"/>
  <property name="unittest" value="../test/junit"/>
  <property name="guitest" value="../test/jemmy"/>
  <property name="csrc" value="../launcher"/>
  <property name="junitdir" value="../junit"/>
  <property name="scriptsrc" value="."/>
  <property name="libdir" value="../libs"/>
  <property name="build_base" value="../build"/>
  <property name="build" value="../build/classes"/>
  <property name="build.test" value="../build/test"/>
  <property name="distdir" value="../dist"/>
  <property name="jarfile" value="sqlworkbench.jar"/>
  <property name="javadocdir" value="../javadoc"/>
  <property name="srczipname" value="WorkbenchSrc.zip"/>
  <property name="srczip" value="${root}/${srczipname}"/>
  <property name="doczip" value="${root}/release/html-manual.zip"/>
  <property name="html-stylesheet" value="html-publish.css"/>
  <property name="html-outdir" value="${distdir}/manual"/>
  <property name="html-resource-dir" value="./images"/>

  <!-- location of the docbook installation and the FOP installation -->
  <property name="docbook.root" value="../etc/docbook"/>
  <property name="docbook.dtd" value="../etc/dtd"/>
  <property name="fop.root" value="../etc/fop"/>

  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="xmltask-v1.15.jar"/>

  <target name="init">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>
    <tstamp>
      <format pattern="yyyy-MM-dd HH:mm" property="build_timestamp"/>
    </tstamp>
  </target>

  <path id="xalan.path">
    <fileset dir="${fop.root}/lib">
      <include name="xalan*.jar"/>
      <include name="serializer*.jar"/>
    </fileset>
    <fileset dir="${docbook.root}/extensions">
      <include name="xalan*.jar"/>
    </fileset>
  </path>

  <path id="fop.path">
    <fileset dir="${fop.root}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${fop.root}/build/fop.jar"/>
  </path>

  <target name="set-build-number" depends="prepare">
    <buildnumber file="build.number"/>
    <echo message="Build number is ${build.number}"/>

    <!-- Reset the sub-build number for dev-builds -->
    <propertyfile file="devbuild.number">
      <entry key="dev-build.number" type="int" operation="=" value="0"/>
    </propertyfile>
    <antcall target="replace-build-number"/>
  </target>

  <target name="replace-build-number">
    <replace dir="${build}/language" token="@BUILD_NUMBER@" value="${build.number}"/>
    <replace dir="${build}/language" token="@BUILD_DATE@" value="${build_timestamp}"/>
  </target>

  <target name="set-dev-build" depends="prepare">
    <propertyfile file="devbuild.number">
      <entry key="dev-build.number" type="int" operation="+" value="1"/>
    </propertyfile>

    <loadproperties srcFile="release.property"/>
    <loadproperties srcFile="devbuild.number"/>

    <property name="build.number" value="${release.build.number}.${dev-build.number}"/>
    <echo message="Build number is ${build.number}"/>
    <antcall target="replace-build-number"/>
  </target>

  <target name="get-dev-build" depends="prepare">
    <loadproperties srcFile="release.property"/>
    <loadproperties srcFile="devbuild.number"/>

    <property name="build.number" value="${release.build.number}.${dev-build.number}"/>
    <echo message="Build number is ${build.number}"/>
  </target>

  <target name="clean">
    <delete dir="${html-outdir}" failonerror="false"/>
    <delete dir="${build}" failonerror="false"/>
    <delete dir="${build.test}"/>
    <delete dir="${pdfwork}" failonerror="false"/>
    <delete failonerror="false">
      <fileset dir="${distdir}">
        <include name="WorkbenchSrc*.zip"/>
        <include name="Workbench-Build*.zip"/>
      </fileset>
    </delete>

  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${pdfwork}"/>
    <mkdir dir="${build}"/>
    <mkdir dir="${distdir}"/>
    <mkdir dir="${html-outdir}"/>
    <mkdir dir="${html-outdir}/images"/>
  </target>

  <target name="copy-resources" depends="init">
    <copy overwrite="true" todir="${build}">
      <fileset defaultexcludes="true" dir="${src}">
        <include name="**/*.*"/>
        <exclude name="**/*.html"/>
        <exclude name="**/*.java"/>
        <exclude name="**/*.form"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.flex"/>
      </fileset>
    </copy>
  </target>

  <target name="prepare-test" depends="prepare,copy-resources">
    <mkdir dir="${build.test}"/>
    <copy overwrite="true"  todir="${build.test}">
      <fileset defaultexcludes="true" dir="${testsrc}/junit">
        <include name="**/*.sql"/>
        <include name="**/*.xml"/>
        <include name="**/*.txt"/>
        <include name="**/*.properties"/>
      </fileset>
      <fileset defaultexcludes="true" dir="${testsrc}/jemmy">
        <include name="**/*.timeouts"/>
      </fileset>
    </copy>
  </target>

  <target name="compile" depends="prepare">

    <!-- compile the starter class with target=1.3 so that it can be loaded by
         older JVMs as well and is able to display the error message -->
    <javac debug="on"
          debuglevel="source,lines"
          destdir="${build}"
          srcdir="${src}"
          target="1.2"
          source="1.2"
          encoding="ISO-8859-1"
          includes="workbench/WbStarter.java"/>

    <!-- the rest of the application is compiled to the needed class file version -->
    <javac debug="on"
           debuglevel="source,lines"
           destdir="${build}"
           srcdir="${src}"
           target="1.6"
           source="1.6"
           encoding="ISO-8859-1">
      <exclude name="workbench/WbStarter.java"/>
      <classpath>
          <fileset dir="../etc/poi" includes="poi*.jar"/>
          <fileset dir="../etc/log4j" includes="log4j*.jar"/>
      </classpath>
    </javac>

  </target>

  <!-- Manual related tasks -->

  <!-- Create the FO file which will in turn be transformed
       into the PDF manual by the target "pdf" -->
  <target name="fop" depends="init, docbook-history">
    <!-- fop seems to require absolute pathnames... -->
    <dirname property="docdir" file="${docbook.root}/images/note.png"/>
    <dirname property="imgdir" file="${src}/workbench/resource/images/filter16.gif"/>
    <!--
    <echo message="${docdir}"/>
    <echo message="${imgdir}"/>
    -->
    <copy overwrite="true" todir="${pdfwork}">
      <fileset dir="${doc}/xml">
        <include name="*.xml"/>
      </fileset>

      <filterset begintoken="@" endtoken="@">
        <filter token="BUILD_NUMBER" value="${build.number}"/>
        <filter token="IMAGE_DIR" value="${imgdir}"/>
      </filterset>
    </copy>

    <copy file="docbook-history.xml" todir="${pdfwork}"/>

    <xslt classpathref="xalan.path"
          in="${pdfwork}/Manual.xml"
          out="${pdfwork}/manual.fo"
          style="${doc}/xsl/workbench-pdf.xsl">
      <xmlcatalog>
        <dtd publicId="-//OASIS//DTD DocBook XML V4.5//EN"
             location="${docbook.dtd}/docbookx.dtd"/>
      </xmlcatalog>
      <param name="text-indent" expression="0.2cm"/>
      <param name="paper.type" expression="A4"/>
      <param name="page.margin.bottom" expression="2cm"/>
      <param name="page.margin.top" expression="1.5cm"/>
      <param name="page.margin.outer" expression="2cm"/>
      <param name="page.margin.inner" expression="2cm"/>
      <param name="generate.section.toc.level" expression="3"/>
      <param name="default.image.width" expression="16"/>
      <param name="ignore.image.scaling" expression="0"/>
      <param name="admon.graphics" expression="1"/>
      <param name="admon.graphics.path" expression="${docdir}/"/>
      <param name="admon.graphics.extension" expression=".png"/>
      <param name="admon.graphic.width" expression="16p"/>
      <param name="admon.textlabel" expression="0"/>
      <param name="body.font.master" expression="10"/>
      <param name="toc.indent.width" expression="24"/>
      <param name="toc.max.depth" expression="3"/>
      <param name="toc.section.depth" expression="2"/>
      <param name="title.margin.left" expression="0pt"/>
      <param name="body.start.indent" expression="0pt"/>
      <param name="section.autolabel" expression="1"/>
      <param name="section.autolabel.max.depth" expression="3"/>
      <param name="alignment" expression="left"/>
      <param name="fop1.extensions" expression="1"/>
      <param name="use.extensions" expression="1"/>
      <param name="tablecolumns.extension" expression="0"/>
      <param name="menuchoice.separator" expression=" &#187; "/>
      <param name="menuchoice.menu.separator" expression=" &#187; "/>
      <param name="ulink.show" expression="0"/>
      <param name="ulink.footnotes" expression="0"/>
      <param name="insert.link.page.number" expression="no"/>
      <param name="insert.olink.page.number" expression="no"/>
      
      <param name="generate.index" expression="1"/>
      <param name="index.prefer.titleabbrev" expression="1"/>
      <param name="column.count.index" expression="2"/>

      <!-- <param name="axf.extensions" expression="1"/> -->
    </xslt>

  </target>

  <!-- Create the pdf version of the manual -->
  <target name="pdf" depends="fop">
    <property name="inputFile" location="${pdfwork}/manual.fo"/>
    <property name="outputFile" location="${distdir}/SQLWorkbench-Manual.pdf"/>

    <java failonerror="true"
          maxmemory="512m"
          fork="true"
          dir="${fop.root}" classname="org.apache.fop.cli.Main" classpathref="fop.path">
      <arg line="-q -fo ${inputFile} -pdf ${outputFile}"/>
      <sysproperty key="org.apache.fop.level" value="SEVERE"/>
    </java>
  </target>

  <target name="publish" depends="build-html"/>

  <target name="publish-dev" depends="get-dev-build, set-dev-prop, publish"/>

  <target name="publish-single" depends="get-dev-build, single-html, post-html"/>

  <target name="prepare-html" depends="prepare, docbook-history">

    <copy todir="${html-outdir}/${html-resource-dir}" flatten="true">
      <fileset dir="${src}/workbench/resource/images">
        <include name="colfilter16.gif"/>
        <include name="ExecuteSel16.gif"/>
        <include name="Remove16.gif"/>
        <include name="filter16.gif"/>
        <include name="NewProfile16.gif"/>
        <include name="NewFolder16.gif"/>
        <include name="Delete16.gif"/>
        <include name="CopyProfile16.gif"/>
        <include name="ExecuteSel16.gif"/>
      </fileset>
      <fileset dir="${docbook.root}/images">
        <include name="note.png"/>
        <include name="caution.png"/>
        <include name="important.png"/>
      </fileset>
    </copy>

    <echo message="Generating HTML in ${html-outdir}"/>

    <copy overwrite="true" todir="${html-outdir}">
      <fileset dir="${doc}/xml">
        <include name="*.xml"/>
      </fileset>

      <filterset begintoken="@" endtoken="@">
        <filter token="build_timestamp" value="${build_timestamp}"/>
        <filter token="BUILD_NUMBER" value="${build.number}"/>
        <filter token="IMAGE_DIR" value="${html-resource-dir}"/>
      </filterset>
    </copy>

    <copy file="docbook-history.xml" todir="${html-outdir}"/>

  </target>

  <target name="docbook-history" depends="set-history-build-date">
    <xslt in="history.xml"
          out="docbook-history.xml"
          includes="history.xml"
          style="history2docbook.xslt">
    </xslt>
  </target>

  <target name="html-history" depends="set-history-build-date">
    <xslt in="history.xml"
          out="history.html"
          style="history2html.xslt">
    </xslt>
  </target>

  <target name="build-html" depends="prepare-html">
    <antcall target="chunk-html"/>
    <antcall target="post-html"/>
  </target>

  <target name="chunk-html">

    <xslt classpathref="xalan.path"
          basedir="${html-outdir}"
          includes="Manual.xml"
          style="${docbook.root}/html/chunkfast.xsl"
          destdir="${html-outdir}">

      <xmlcatalog>
        <dtd publicId="-//OASIS//DTD DocBook XML V4.5//EN" location="${docbook.dtd}/docbookx.dtd"/>
      </xmlcatalog>

      <param name="use.extensions" expression="0"/>
      <param name="textinsert.extension" expression="1"/>
      <param name="root.filename" expression="workbench-manual"/>
      <param name="html.stylesheet" expression="${html-stylesheet}"/>
      <param name="html.extra.head.links" expression="1"/>
      <param name="admon.graphics.path" expression="${html-resource-dir}/"/>
      <param name="admon.graphics.extension" expression=".png"/>
      <param name="admon.graphics" expression="1"/>
      <param name="admon.textlabel" expression="0"/>
      
      <param name="generate.index" expression="1"/>
      <param name="index.prefer.titleabbrev" expression="1"/>

      <param name="index.method" expression="'default'"/>
      <param name="chunk.tocs.and.lots" expression="0"/>
      <param name="chunk.tocs.and.lots.has.title" expression="1"/>
      <param name="chunk.fast" expression="1"/>
      <param name="generate.id.attributes" expression="1"/>
      <param name="chunk.quietly" expression="1"/>
      <param name="chunk.first.sections" expression="1"/>
      <param name="chunker.output.indent" expression="no"/>
      <param name="use.id.as.filename" expression="1"/>
      <param name="section.autolabel" expression="1"/>
      <param name="chunker.output.indent" expression="yes"/>
      <param name="generate.section.toc.level" expression="1"/>
      <param name="toc.max.depth" expression="3"/>
      <param name="toc.section.depth" expression="2"/>

      <param name="table.borders.with.css" expression="1"/>
      <param name="table.cell.border.style" expression="solid"/>
      <param name="table.cell.border.thickness" expression="1px"/>
      <param name="table.frame.border.style" expression="solid"/>
      <param name="table.frame.border.thickness" expression="1px"/>
      <param name="make.valid.html" expression="1"/>
      <param name="html.cleanup" expression="1"/>
      <param name="navig.showtitles" expression="1"/>
      <param name="css.decoration" expression="1"/>
    </xslt>

    <delete>
      <fileset dir="${html-outdir}">
        <include name="Manual.html"/>
      </fileset>
    </delete>

  </target>

  <target name="single-html" depends="prepare-html">
    <antcall target="prepare-html"/>

    <dirname property="docdir" file="${docbook.root}/images/note.png"/>
    
    <xslt classpathref="xalan.path"
          in="${html-outdir}/Manual.xml"
          out="${html-outdir}/workbench-manual-single.html"
          style="${docbook.root}/html/docbook.xsl">

      <xmlcatalog>
        <dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN" location="${docbook.dtd}/docbookx.dtd"/>
      </xmlcatalog>
      <param name="use.extensions" expression="0"/>
      <param name="textinsert.extension" expression="1"/>
      <param name="html.stylesheet" expression="${html-stylesheet}"/>
      <param name="admon.graphics.path" expression="${docdir}/"/>
      <param name="admon.graphics.extension" expression=".gif"/>
      <param name="admon.graphics" expression="1"/>
      <param name="admon.textlabel" expression="0"/>
      <param name="generate.index" expression="0"/>
      <param name="index.method" expression="'default'"/>
      <param name="generate.id.attributes" expression="1"/>
      <param name="use.id.as.filename" expression="1"/>
      <param name="section.autolabel" expression="1"/>

      <param name="generate.section.toc.level" expression="1"/>
      <param name="toc.max.depth" expression="3"/>
      <param name="toc.section.depth" expression="2"/>

      <param name="table.borders.with.css" expression="1"/>
      <param name="table.cell.border.style" expression="solid"/>
      <param name="table.cell.border.thickness" expression="1px"/>
      <param name="table.frame.border.style" expression="solid"/>
      <param name="table.frame.border.thickness" expression="1px"/>
      <param name="make.valid.html" expression="1"/>
      <param name="html.cleanup" expression="1"/>
      <param name="navig.showtitles" expression="1"/>
      <param name="css.decoration" expression="1"/>

    </xslt>
  </target>

  <target name="post-html">
    <delete>
      <fileset dir="${html-outdir}">
        <include name="*.xml"/>
      </fileset>
    </delete>

    <copy overwrite="true" todir="${html-outdir}" file="${doc}/css/${html-stylesheet}"/>

    <replace dir="${html-outdir}" summary="true">
      <replacetoken><![CDATA[href="mailto:support@sql-workbench.net">support@sql-workbench.net</a>]]></replacetoken>
      <replacevalue><![CDATA[href=mailto:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#64;&#115;&#113;&#108;&#45;&#119;&#111;&#114;&#107;&#98;&#101;&#110;&#99;&#104;&#46;&#110;&#101;&#116;>&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#64;&#115;&#113;&#108;&#45;&#119;&#111;&#114;&#107;&#98;&#101;&#110;&#99;&#104;&#46;&#110;&#101;&#116;</a>]]></replacevalue>
    </replace>

  </target>

  <target name="make-jar" depends="prepare,compile">
    
    <jar compress="true" level="6" jarfile="${distdir}/${jarfile}">
      <manifest>
        <attribute name="Main-Class" value="workbench.WbStarter"/>
        <attribute name="Class-Path" value=". log4j.jar mail.jar poi.jar poi-ooxml.jar dom4j-1.6.1.jar geronimo-stax-api_1.0_spec-1.0.jar ooxml-schemas-1.0.jar xmlbeans-2.3.0.jar"/>
        <attribute name="Created-By" value="Thomas Kellerer (support@sql-workbench.net)"/>
        <attribute name="Implementation-Title" value="SQL Workbench/J"/>
        <attribute name="Implementation-URL" value="http://www.sql-workbench.net"/>
        <attribute name="WbBuild-Number" value="${build.number}"/>
        <attribute name="WbBuild-Date" value="${build_timestamp}"/>
      </manifest>
      <fileset dir="${build}">
        <exclude name="**/package.html"/>
      </fileset>
    </jar>

  </target>

  <!-- alias for make-src-zip -->
  <target name="src" depends="make-src-zip"/>

  <target name="make-src-zip">
    <delete file="${srczip}"/>

    <zip zipfile="${srczip}">
      <zipfileset dir="${src}" prefix="src">
        <include name="**/*.*"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.java~"/>
        <exclude name="**/workbench.settings"/>
        <exclude name="**/CVS/*"/>
        <exclude name="**/.cvsignore"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/tags"/>
        <exclude name="**/Test/*"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="${scriptsrc}" prefix="scripts">
        <exclude name="**/.nb*"/>
        <exclude name="**/.new"/>
        <exclude name="**/*test*"/>
        <exclude name="publish-dev.cmd"/>
        <exclude name="docbook-history.xml"/>
      </zipfileset>

      <zipfileset dir="${testsrc}" prefix="test">
        <exclude name="**/.nb*"/>
      </zipfileset>

      <zipfileset dir="${doc}" prefix="doc">
        <include name="**/*.*"/>
        <exclude name="**/.nb*"/>
        <exclude name="html/**/*.*"/>
        <exclude name="openoffice/**/*.*"/>
        <exclude name="documentation.project"/>
        <exclude name="*docbook*/**"/>
        <exclude name="manual/**/*.*"/>
        <exclude name="**/*pdf*/*.*"/>
        <exclude name="dtd/**/*.*"/>
      </zipfileset>

      <zipfileset dir="../website" prefix="website">
        <include name="**/*.*"/>
        <exclude name="*.html"/>
        <exclude name="test*.*"/>
        <exclude name="*.jar"/>
        <exclude name="*.png"/>
      </zipfileset>

    </zip>
  </target>

  <!-- build a full release -->
  <target name="release" depends="generate-lexer, clean, compile, test, set-build-number, set-history-release-number, set-history-build-date, make-jar, pdf, publish, publish-single, release-src-zip, release-package, mac-package">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <!-- reset the release property file -->
    <delete file="release.property"/>

    <propertyfile file="release.property">
      <entry key="release.build.number" value="${build.number}"/>
      <entry key="release.build.date" value="${today}"/>
    </propertyfile>

    <ant dir="..\website" inheritall="false" target="release"/>

    <mkdir dir="${root}/release/build${build.number}"/>

    <move todir="${root}/release/build${build.number}">
      <fileset dir="${distdir}">
        <include name="WorkbenchSrc-Build${build.number}.zip"/>
        <include name="Workbench-Build${build.number}.zip"/>
        <include name="Workbench-Build${build.number}-Mac.tgz"/>
      </fileset>
    </move>

  </target>

  <target name="set-dev-prop">
    <property name="dev-jar" value="1"/>
  </target>

  <target name="jar-only" depends="set-dev-prop, copy-resources, compile, get-dev-build, replace-build-number, make-jar"/>
  
  <target name="make-dev-jar" depends="set-dev-prop, clean, copy-resources, compile, test, get-dev-build, replace-build-number, make-jar"/>

  <!-- build a development release -->
  <target name="dev-release" depends="clean, compile, test, set-dev-build, set-history-build-date, make-jar, pdf, publish, publish-single, release-package, release-src-zip">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <propertyfile file="release.property">
      <entry key="dev.build.date" value="${today}"/>
      <entry key="dev.build.number" value="${build.number}"/>
    </propertyfile>
    <ant dir="../website" inheritall="false" target="dev-release"/>
  </target>

  <target name="set-history-release-number" depends="set-build-number">
    <xmltask source="history.xml" dest="history.xml">
      <attr path="/history/release[1]" attr="build" value="${build.number}"/>
    </xmltask>
  </target>

  <target name="set-history-build-date" depends="init" unless="dev-jar">

    <xmltask source="history.xml" dest="history.xml">
      <attr path="/history/release[1]" attr="date" value="${today}"/>
    </xmltask>

  </target>

  <target name="website">
    <ant antfile="../website/build.xml" inheritall="false" target="release"/>
  </target>

  <target name="mac-package" depends="init">
    <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="../etc/jarbundler/jarbundler-2.1.0.jar"/>

    <property name="bundledir" value="${distdir}/mac"/>
    <delete dir="${bundledir}" failonerror="false"/>
    <mkdir dir="${bundledir}"/>

    <jarbundler dir="${bundledir}"
      name="SQLWorkbenchJ"
      mainclass="workbench.WbStarter"
      jar="${distdir}/${jarfile}"
      jvmversion="1.6+"
      version="${build.number}"
      shortname="SQL Workbench"
      infostring="SQL Workbench/J"
      signature="sqwb"
      icon="Workbench.icns"
      vmoptions="-Xmx256m"
      stubfile="../etc/jarbundler/SQLWorkbench">

      <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
      <javaproperty name="com.apple.mrj.application.growbox.intrudes" value="false"/>
      <javaproperty name="apple.awt.showGrowBox" value="true"/>
      <javaproperty name="apple.awt.rendering" value="speed"/>
      <javaproperty name="apple.awt.antialiasing" value="true"/>
      <javaproperty name="apple.awt.textantialiasing" value="true"/>
    </jarbundler>

    <tar compression="gzip" destfile="${distdir}/Workbench-Build${build.number}-Mac.tgz">
      <tarfileset dir="${distdir}" prefix="SQLWorkbenchJ.app/Contents/Resources/Java">
        <include name="SQLWorkbench-Manual.pdf"/>
      </tarfileset>
      <tarfileset dir="${bundledir}">
        <include name="**/*"/>
        <exclude name="**/SQLWorkbench"/>
      </tarfileset>
      <tarfileset mode="555" dir="${bundledir}">
        <include name="**/SQLWorkbench"/>
      </tarfileset>
      <tarfileset dir="${distdir}/manual" prefix="SQLWorkbenchJ.app/Contents/Resources/Java/manual">
        <include name="**/*.*"/>
      </tarfileset>
      <tarfileset dir="${scriptsrc}" prefix="SQLWorkbenchJ.app/Contents/Resources/Java">
        <include name="history.html"/>
      </tarfileset>
      <zipfileset dir="${scriptsrc}" prefix="xslt">
        <include name="wbdiff2derby.xslt"/>
        <include name="wbdiff2mssql.xslt"/>
        <include name="wbdiff2oracle.xslt"/>
        <include name="wbdiff2pg.xslt"/>
        <include name="liquibase_createtable.xslt.xslt"/>
        <include name="wbdiff2liquibase.xslt"/>
        <include name="wbreport2liquibase.xslt"/>
        <include name="wbreport2html.xslt"/>
        <include name="wbreport2oracle.xslt"/>
        <include name="wbreport2proc.xslt"/>
        <include name="wbreport2wiki.xslt"/>
      </zipfileset>
    </tar>
  </target>

  <target name="release-package" depends="fixshellscripts,html-history">
    <zip zipfile="${distdir}/Workbench-Build${build.number}.zip">
      <zipfileset dir="${distdir}">
        <include name="${jarfile}"/>
        <include name="SQLWorkbench-Manual.pdf"/>
        <include name="SQLWorkbench.exe"/>
        <include name="DataPumper.exe"/>
        <include name="DataPumper.exe"/>
        <include name="sqlwbconsole.exe"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}">
        <include name="log4j.xml"/>
        <include name="sqlworkbench.cmd"/>
        <include name="sqlwbconsole.cmd"/>
        <include name="sqlworkbench.sh"/>
        <include name="datapumper.sh"/>
        <include name="dbexplorer.sh"/>
        <include name="sqlwbconsole.sh"/>
        <include name="history.html"/>
        <include name="SQLWorkbench.desktop"/>
      </zipfileset>
      <zipfileset dir="${distdir}/manual" prefix="manual">
        <include name="**/*.*"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}" prefix="xslt">
        <include name="wbdiff2derby.xslt"/>
        <include name="wbdiff2mssql.xslt"/>
        <include name="wbdiff2oracle.xslt"/>
        <include name="wbdiff2pg.xslt"/>
        <include name="wbreport2ctl.xslt"/>
        <include name="wbreport2html.xslt"/>
        <include name="wbreport2oracle.xslt"/>
        <include name="wbreport2pg.xslt"/>
        <include name="wbreport2proc.xslt"/>
        <include name="wbreport2wiki.xslt"/>
      </zipfileset>
    </zip>
    <delete file="docbook-history.xml" failonerror="false"/>
  </target>

  <target name="release-src-zip" depends="init,fixshellscripts">

    <zip zipfile="${distdir}/WorkbenchSrc-Build${build.number}.zip">
      <zipfileset dir="${src}" prefix="src">
        <include name="**/*.*"/>
        <exclude name="**/workbench.settings"/>
        <exclude name="**/CVS/*"/>
        <exclude name="**/.cvsignore"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/*.dfPackage"/>
        <exclude name="**/tags"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="${testsrc}" prefix="test">
        <include name="**/*.*"/>
      </zipfileset>

      <zipfileset dir="${scriptsrc}" prefix="scripts">
        <include name="build.xml"/>
        <include name="log4j.xml"/>
        <include name="devbuild.number"/>
        <include name="build.number"/>
        <include name="release.property"/>
        <include name="history.xml"/>
        <include name="sqlworkbench.cmd"/>
        <include name="sqlwbconsole.cmd"/>
        <include name="sqlworkbench.sh"/>
        <include name="datapumper.sh"/>
        <include name="dbexplorer.sh"/>
        <include name="sqlwb.sh"/>
        <include name="*.xslt"/>
        <exclude name="**/*test*"/>
      </zipfileset>

      <zipfileset dir="${doc}" prefix="doc">
        <include name="css/*.*"/>
        <include name="xml/*.*"/>
        <include name="xsl/*.*"/>
        <exclude name="**/CVS/*"/>
        <exclude name="**/.cvsignore"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/tags"/>
        <exclude name="**/*.tws"/>
      </zipfileset>
    </zip>
  </target>

  <target name="generate-lexer">
    <java classname="JFlex.Main" classpath="../etc/JFlex.jar" fork="true">
      <jvmarg value="-Xmx256m"/>
      <arg value="-q"/>
      <arg value="../src/workbench/sql/formatter/SQLLexer.flex"/>
    </java>
  </target>

  <path id="junit.path">
    <fileset dir="${junitdir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="compile-tests" depends="prepare-test,compile">
    <javac debug="on" destdir="${build.test}" optimize="on" srcdir="${unittest}" target="1.5" source="1.5" encoding="ISO-8859-1">
      <classpath>
        <pathelement location="${build}"/>
        <path refid="junit.path"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="compile-tests">
    <delete failonerror="false">
      <fileset dir="${junitdir}" includes="*.txt"/>
    </delete>

    <junit fork="true" forkmode="perBatch" showoutput="false" haltonerror="true" haltonfailure="true" printsummary="true" includeantruntime="true">
      <classpath>
        <pathelement location="${build}"/>
        <pathelement location="${build.test}"/>
        <path refid="junit.path"/>
      </classpath>

      <batchtest todir="../junit">
        <formatter type="plain"/>
          <fileset dir="${unittest}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="compile-gui-tests" depends="prepare-test,compile-tests">
    <javac debug="on" destdir="${build.test}" optimize="off" srcdir="${unittest}:${guitest}" target="1.5" source="1.5" encoding="ISO-8859-1">
      <classpath>
        <pathelement location="${build}"/>
        <path refid="junit.path"/>
      </classpath>
    </javac>
  </target>

  <target name="gui-test" depends="compile-gui-tests">
    <delete failonerror="false">
      <fileset dir="${junitdir}" includes="*.txt"/>
    </delete>

    <junit fork="true" forkmode="perBatch" showoutput="false" haltonerror="true" haltonfailure="true" printsummary="false" includeantruntime="true">
      <classpath>
        <pathelement location="${build}"/>
        <pathelement location="${build.test}"/>
        <path refid="junit.path"/>
      </classpath>

      <batchtest todir="../junit">
        <formatter type="plain"/>
          <fileset dir="${guitest}">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="javadoc">
    <javadoc destdir="${javadocdir}" notree="true" sourcepath="${src}" packagenames="workbench.*"/>
  </target>

  <target name="fixshellscripts">
    <fixcrlf srcdir="${scriptsrc}"
       eol="lf"
       eof="remove"
       includes="**/*.sh"
    />
    <fixcrlf srcdir="${scriptsrc}"
       eol="crlf"
       eof="remove"
       includes="**/*.cmd"
    />
    
  </target>

</project>