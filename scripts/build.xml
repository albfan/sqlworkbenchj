<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="make-dev-jar" name="Workbench">

  <property name="root" value=".."/>
  <property name="doc" value="../doc"/>
  <property name="src" value="../src"/>
  <property name="testsrc" value="../test"/>
  <property name="csrc" value="../launcher"/>
	<property name="junitdir" value="../junit"/>
  <property name="scriptsrc" value="."/>
  <property name="libdir" value="../libs"/>
  <property name="build_base" value="../build"/>
  <property name="build" value="../build/classes"/>
	<property name="build_test" value="../build/test"/>
  <property name="distdir" value="../dist"/>
  <property name="jarfile" value="Workbench.jar"/>
  <property name="javadocdir" value="../javadoc"/>
  <property name="srczipname" value="WorkbenchSrc.zip"/>
  <property name="srczip" value="${root}/${srczipname}"/>
  <property name="doczip" value="${root}/release/html-manual.zip"/>

  <!-- location of the docbook installation and the FOP installation -->
  <property name="docbook.root" value="${doc}/docbook"/>
  <property name="fop.root" value="../etc/fop"/>

  <taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" classpath="../etc/jarbundler/jarbundler-1.9.jar"/>
	
  <target name="init">
    <tstamp>
      <format pattern="yyyy-MM-dd HH:mm" property="build_date"/>
    </tstamp>
    <tstamp>
      <format pattern="dd.MM.yyyy" property="formatted_build_date"/>
    </tstamp>
  </target>

  <path id="xalan.path">
		<fileset dir="${fop.root}/lib">
			<include name="xalan*.jar"/>
			<include name="serializer*.jar"/>
		</fileset>
	</path>

  <path id="fop.path">
    <fileset dir="${fop.root}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${fop.root}/build/fop.jar"/>
  </path>

	<target name="set-build-number" depends="prepare">
		<property name="release-src-dir" value="release"/>
		<buildnumber file="build.number"/>
		<echo message="Build number is ${build.number}"/>

		<!-- Reset the sub-build number for dev-builds -->
		<propertyfile file="devbuild.number">
			<entry key="dev-build.number" type="int" operation="=" value="0"/>
		</propertyfile>
		<antcall target="replace-build-number"/>
	</target>

	<target name="replace-build-number">
		<replace dir="${build}/language" token="@BUILD_NUMBER@" value="${build.number}"/>
		<replace dir="${build}/language" token="@BUILD_DATE@" value="${build_date}"/>
	</target>
	
	<target name="set-dev-build" depends="prepare">
		<property name="release-src-dir" value="dist"/>
		<propertyfile file="devbuild.number">
			<entry key="dev-build.number" type="int" operation="+" value="1"/>
		</propertyfile>
		
		<loadproperties srcFile="release.property"/>
		<loadproperties srcFile="devbuild.number"/>
		
		<property name="build.number" value="${release.build.number}.${dev-build.number}"/>
		<echo message="Build number is ${build.number}"/>
		<antcall target="replace-build-number"/>
	</target>

	<target name="get-dev-build" depends="prepare">
		<loadproperties srcFile="release.property"/>
		<loadproperties srcFile="devbuild.number"/>

		<property name="build.number" value="${release.build.number}.${dev-build.number}"/>
		<echo message="Build number is ${build.number}"/>
		<antcall target="replace-build-number"/>
	</target>

	<target name="clean">
		<delete dir="${build}/workbench" failonerror="false"/>
		<delete dir="${build}/language" failonerror="false"/>
		<delete dir="${build}/help" failonerror="false"/>
		<delete file="${scriptsrc}/history.new" failonerror="false" />
		<delete dir="${build_test}"/>
		<mkdir dir="${build_test}"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${distdir}"/>
		<delete failonerror="false">
			<fileset dir="${distdir}">
				<include name="WorkbenchSrc*.zip"/>
				<include name="Workbench-Build*.zip"/>
			</fileset>
		</delete>
		
	</target>

	<target name="prepare" depends="init">
		
		<copy overwrite="true"  todir="${build}">
			<fileset defaultexcludes="true" dir="${src}">
				<include name="**/*.*"/>
				<exclude name="**/*.java"/>
				<exclude name="**/*.form"/>
				<exclude name="**/*.class"/>
				<exclude name="**/*.flex"/>
			</fileset>
		</copy>	

	</target>

	<target name="compile" depends="prepare">
		
		<!-- compile the starter class with target=1.3 so that it can actually be loaded by
		     older JVMs as well and is able to display the error message -->
		<javac debug="on" 
					debuglevel="source,lines" 
					destdir="${build}" 
					optimize="on" 
					srcdir="${src}" 
					target="1.2" 
					source="1.2" 
					encoding="ISO-8859-1" 
					includes="workbench/WbStarter.java"/>
		
		<!-- the rest of the application is compiled to the needed class file version -->
		<javac debug="on" 
		       debuglevel="source,lines" 
					 destdir="${build}" 
					 optimize="on" 
					 srcdir="${src}" 
					 target="1.5" 
					 source="1.5" 
					 encoding="ISO-8859-1">
						 
			<exclude name="workbench/test/**"/>
			<exclude name="workbench/WbStarter.java"/>
		</javac>
		
	</target>
	
  <!-- Manual related tasks -->

  <!-- Create the FO file which will in turn be transformed
       into the PDF manual by the target "pdf" -->
  <target name="fop" depends="init">
    <copy overwrite="true" todir="${doc}/pdf">
      <fileset dir="${doc}/xml">
        <include name="*.xml"/>
      </fileset>

      <filterset begintoken="@" endtoken="@">
        <filter token="BUILD_DATE" value="${build_date}"/>
        <filter token="BUILD_NUMBER" value="${build.number}"/>
        <filter token="IMAGE_DIR" value="${src}/workbench/resource/images"/>
      </filterset>
    </copy>

    <xslt classpathref="xalan.path" in="${doc}/pdf/Manual.xml" out="${doc}/pdf/manual.fo" style="${doc}/xsl/workbench-pdf.xsl">
      <xmlcatalog>
        <dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN"
             location="${doc}/dtd/docbookx.dtd"/>
      </xmlcatalog>
      <param name="text-indent" expression="0.5cm"/>
      <param name="paper.type" expression="A4"/>
      <param name="margin.bottom" expression="1.5cm"/>
      <param name="margin.top" expression="1.5cm"/>
      <param name="margin.left" expression="1.2cm"/>
      <param name="margin.right" expression="1.2cm"/>
      <param name="generate.section.toc.level" expression="3"/>
      <param name="toc.indent.width" expression="24"/>
      <param name="toc.max.depth" expression="3"/>
      <param name="toc.section.depth" expression="2"/>
      <param name="title.margin.left" expression="0pt"/>
      <param name="body.start.indent" expression="0pt"/>
      <param name="section.autolabel" expression="1"/>
      <param name="section.autolabel.max.depth" expression="3"/>
      <param name="alignment" expression="left"/>
      <param name="use.extensions" expression="0"/>
      <param name="menuchoice.separator" expression=" &#187; "/>
      <param name="menuchoice.menu.separator" expression=" &#187; "/>
    </xslt>

    <delete>
      <fileset dir="${doc}/pdf">
        <include name="*.xml"/>
      </fileset>
    </delete>

  </target>

  <!-- Create the pdf version of the manual -->
  <target name="pdf" depends="fop">
		
		<property name="inputFile" location="${doc}/pdf/manual.fo"/>
		<property name="outputFile" location="${distdir}/SQLWorkbench-Manual.pdf"/>
		
    <java failonerror="true" fork="true" dir="${fop.root}" classname="org.apache.fop.cli.Main" classpathref="fop.path">
			<arg line="-fo ${inputFile} -pdf ${outputFile}"/>
    </java>
		
    <delete file="${doc}/pdf/manual.fo"/>

		
  </target>

  <!-- Create the html help files for putting them into the
       distribution jar
  -->
	<target name="build-help" depends="prepare">
		<delete dir="${build}/help" failonerror="false"/>
		<mkdir dir="${build}/help"/>
		<echo message="Generating HTML Help"/>
		
		<copy overwrite="true" todir="${build}/help">
			<fileset dir="${doc}/xml">
				<include name="*.xml"/>
			</fileset>
			
			<filterset begintoken="@" endtoken="@">
				<filter token="BUILD_DATE" value="${build_date}"/>
				<filter token="BUILD_NUMBER" value="${build.number}"/>
				<filter token="IMAGE_DIR" value="../workbench/resource/images"/>
			</filterset>
		</copy>
		
		<xslt classpathref="xalan.path" basedir="${build}/help" includes="Manual.xml" style="${doc}/docbook/html/chunk.xsl" destdir="${build}/help">
			<xmlcatalog>
				<dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN" location="${doc}/dtd/docbookx.dtd"/>
			</xmlcatalog>
			
			<param name="root.filename" expression="workbench-manual"/>
			<param name="html.stylesheet" expression="html-internal.css"/>
			<!--
			<param name="admon.graphics.path" expression="../workbench/resource/images/"/>
			<param name="admon.graphics.extension" expression=".gif"/>
			<param name="admon.graphics" expression="1"/>
			-->
			<param name="chunk.first.sections" expression="1"/>
			<param name="chunker.output.indent" expression="yes"/>
			<param name="chunk.quietly" expression="1"/>
			<param name="admon.textlabel" expression="1"/>
			<param name="generate.index" expression="0"/>
			<param name="index.method" expression="'default'"/>
			<param name="chunk.fast" expression="1"/>
			<param name="generate.section.toc.level" expression="1"/>
			<param name="toc.section.depth" expression="2"/>
			<param name="use.id.as.filename" expression="1"/>
			<param name="section.autolabel" expression="1"/>
			<param name="table.borders.with.css" expression="0"/>
			<param name="table.cell.border.style" expression="solid"/>
			<param name="table.cell.border.thickness" expression="1px"/>
			<param name="table.frame.border.style" expression="solid"/>
			<param name="table.frame.border.thickness" expression="1px"/>
			<param name="make.valid.html" expression="1"/>
			<param name="html.cleanup" expression="1"/>
			<param name="navig.showtitles" expression="1"/>
			<param name="css.decoration" expression="1"/>
		</xslt>

		<delete file="${build}/help/Manual.html"/>
		<delete>
			<fileset dir="${build}/help">
				<include name="*.xml"/>
			</fileset>
		</delete>
		
		<copy overwrite="true" todir="${build}/help" file="${doc}/css/html-internal.css"/>
	</target>
	
	<target name="init-help">
		<property name="html-stylesheet" value="html-internal.css"/>
		<property name="html-outdir" value="${build}/help"/>
		<property name="html-resource-dir" value="../workbench/resource/images"/>
		<property name="index-file-name" value="index"/>
		<property name="html-css-tables" value="0"/>
	</target>
	
	<!-- Create the HTML files suitable for publishing on the website -->
	<target name="publish" depends="copy-history,init-publish,build-html">
	</target>
	
	<target name="init-publish">
		<property name="html-stylesheet" value="html-publish.css"/>
		<property name="html-outdir" value="${distdir}/manual"/>
		<property name="html-resource-dir" value="./images"/>
		<property name="index-file-name" value="workbench-manual"/>
		<property name="html-css-tables" value="1"/>
		
		<delete dir="${html-outdir}" failonerror="false"/>
		<mkdir dir="${html-outdir}"/>
		<mkdir dir="${html-outdir}/images"/>
		
		<copy todir="${html-outdir}/${html-resource-dir}" flatten="true">
			<fileset dir="${src}/workbench/resource/images">
				<include name="colfilter16.gif"/>
				<include name="ExecuteSel16.gif"/>
				<include name="Remove16.gif"/>
				<include name="filter16.gif"/>
				<include name="NewProfile16.gif"/>
				<include name="NewFolder16.gif"/>
				<include name="Delete16.gif"/>
				<include name="CopyProfile16.gif"/>
				<include name="ExecuteSel16.gif"/>
				<include name="note.gif"/>
			</fileset>
		</copy>
	</target>

	<target name="build-html" depends="prepare">
		
		<echo message="Generating HTML in ${html-outdir}"/>
		<!-- copy overwrite="true" todir="${html-outdir}" file="${doc}/xml/docbookx.dtd"/ -->
		
		<copy overwrite="true" todir="${html-outdir}">
			<fileset dir="${doc}/xml">
				<include name="*.xml"/>
			</fileset>
			
			<filterset begintoken="@" endtoken="@">
				<filter token="BUILD_DATE" value="${build_date}"/>
				<filter token="BUILD_NUMBER" value="${build.number}"/>
				<filter token="IMAGE_DIR" value="${html-resource-dir}"/>
			</filterset>
		</copy>
		
		<copy overwrite="true" tofile="${html-outdir}/history.txt" file="${scriptsrc}/history.new"/>
		

		<xslt classpathref="xalan.path"
          basedir="${html-outdir}" 
          includes="Manual.xml" 
          style="${doc}/docbook/html/chunk.xsl" 
          destdir="${html-outdir}">
			
      <xmlcatalog>
				<dtd publicId="-//OASIS//DTD DocBook XML V4.2//EN" location="${doc}/dtd/docbookx.dtd"/>
			</xmlcatalog>
			
			<param name="use.extensions" expression="0"/>
			<param name="textinsert.extension" expression="1"/>
			<param name="root.filename" expression="${index-file-name}"/>
			<param name="html.stylesheet" expression="${html-stylesheet}"/>
			<param name="admon.graphics.path" expression="${html-resource-dir}/"/>
			<param name="admon.graphics.extension" expression=".gif"/>
			<param name="admon.graphics" expression="1"/>
			<param name="admon.textlabel" expression="0"/>
			<param name="generate.index" expression="0"/>
			<param name="index.method" expression="'default'"/>
			<param name="chunk.quietly" expression="1"/>
			<param name="chunk.fast" expression="1"/>
			<param name="chunk.first.sections" expression="0"/>
			<param name="chunker.output.indent" expression="yes"/>
			<param name="use.id.as.filename" expression="1"/>
			<param name="section.autolabel" expression="1"/>

      <param name="generate.section.toc.level" expression="3"/>
      <param name="toc.max.depth" expression="2"/>
      <param name="toc.section.depth" expression="2"/>
			
			<param name="table.borders.with.css" expression="${html-css-tables}"/>
			<param name="table.cell.border.style" expression="solid"/>
			<param name="table.cell.border.thickness" expression="1px"/>
			<param name="table.frame.border.style" expression="solid"/>
			<param name="table.frame.border.thickness" expression="1px"/>
			<param name="make.valid.html" expression="1"/>
			<param name="html.cleanup" expression="1"/>
			<param name="navig.showtitles" expression="1"/>
			<param name="css.decoration" expression="1"/>
		</xslt>
		
		<delete>
			<fileset dir="${html-outdir}">
				<include name="*.xml"/>
			</fileset>
		</delete>
		
		<delete file="${html-outdir}/Manual.xml"/>
		<delete file="${html-outdir}/Manual.html"/>
		<copy overwrite="true" todir="${html-outdir}" file="${doc}/css/${html-stylesheet}"/>
		<replace dir="${distdir}/manual" summary="true">
			<replacetoken><![CDATA[<a href="mailto:support@sql-workbench.net">support@sql-workbench.net</a>]]></replacetoken> 
			<replacevalue><![CDATA[<a href=mailto:&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#64;&#115;&#113;&#108;&#45;&#119;&#111;&#114;&#107;&#98;&#101;&#110;&#99;&#104;&#46;&#110;&#101;&#116;>&#115;&#117;&#112;&#112;&#111;&#114;&#116;&#64;&#115;&#113;&#108;&#45;&#119;&#111;&#114;&#107;&#98;&#101;&#110;&#99;&#104;&#46;&#110;&#101;&#116;</a>]]></replacevalue>
		</replace>
	</target>

  <!-- End Manual related tasks -->

	<target name="make-jar" depends="prepare">
		<copy failonerror="false" overwrite="true" file="${scriptsrc}/history.new" tofile="${build}/help/history.txt" />
		<copy failonerror="false" overwrite="true" file="${scriptsrc}/history.new" tofile="${distdir}/history.txt" />
		
		<jar compress="true" jarfile="${distdir}/${jarfile}">
			<manifest>
				<attribute name="Main-Class" value="workbench.WbStarter"/>
				<attribute name="Class-Path" value="."/>
				<attribute name="Created-By" value="Thomas Kellerer (support@sql-workbench.net)"/>
				<attribute name="WbBuild-Number" value="${build.number}"/>
				<attribute name="WbBuild-Date" value="${build_date}"/>
			</manifest>
			<fileset dir="${build}">
				<exclude name="**/package.html"/>
			</fileset>
		</jar>
		
	</target>
	
	<target name="publish-dev" depends="get-dev-build, copy-history, publish, clean-history">
	</target>

  <target name="make-src-zip">
    <delete file="${srczip}"/>

    <zip zipfile="${srczip}">
      <zipfileset dir="${src}" prefix="src">
        <include name="**/*.*"/>
        <exclude name="**/*.class"/>
        <exclude name="**/*.java~"/>
        <exclude name="**/workbench.settings"/>
        <exclude name="**/CVS/*"/>
        <exclude name="**/.cvsignore"/>
        <exclude name="**/.nb*"/>
        <exclude name="**/tags"/>
        <exclude name="help/*.*"/>
        <exclude name="**/Test/*"/>
        <exclude name="**/*.tws"/>
      </zipfileset>

      <zipfileset dir="${scriptsrc}" prefix="scripts">
        <exclude name="**/.nb*"/>
        <exclude name="**/.new"/>
        <exclude name="**/*test*"/>
        <exclude name="publish-dev.cmd"/>
      </zipfileset>
      
      <zipfileset dir="${testsrc}" prefix="test">
        <exclude name="**/.nb*"/>
      </zipfileset>

      <zipfileset dir="${doc}" prefix="doc">
        <include name="**/*.*"/>
        <exclude name="**/.nb*"/>
        <exclude name="html/**/*.*"/>
        <exclude name="openoffice/**/*.*"/>
        <exclude name="documentation.project"/>
        <exclude name="*docbook*/**"/>
        <exclude name="manual/**/*.*"/>
        <exclude name="jhelp/**/*.*"/>
        <exclude name="**/*pdf*/*.*"/>
        <exclude name="dtd/**/*.*"/>
      </zipfileset>

      <zipfileset dir="..\website" prefix="website">
        <include name="*.xml"/>
        <include name="*.xslt"/>
        <include name="wb.css"/>
      </zipfileset>

    </zip>
  </target>

  <!-- build a full relase with documentation and source distribution -->
  <target name="release" depends="clean, compile, test, set-build-number, copy-history, build-help, make-jar, pdf, publish, release-src-zip, release-package, mac-package, restart-history, clean-history">
    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <!-- reset the release property file -->
    <delete file="release.property"/>

    <propertyfile file="release.property">
      <entry key="release.build.number" value="${build.number}"/>
      <entry key="release.build.date" value="${today}"/>
    </propertyfile>
    <ant dir="..\website" inheritall="false" target="release">
    </ant>
  </target>

	<target name="website">
    <ant antfile="../website/build.xml" inheritall="false" target="release">
    </ant>
	</target>
	
  <target name="make-dev-jar" depends="clean, compile, test, get-dev-build, copy-history, make-jar, clean-history">
  </target>

  <!-- build a development release -->
  <target name="dev-release" depends="clean, compile, test, set-dev-build, copy-history, build-help, pdf, make-jar, release-src-zip, clean-history, fixshellscripts">
  
    <zip zipfile="${distdir}/Workbench-Build${build.number}.zip">
      <zipfileset dir="${distdir}">
        <include name="Workbench.jar"/>
        <include name="history.txt"/>
        <include name="JWorkbench.exe"/>
        <include name="DataPumper.exe"/>
        <include name="DbExplorer.exe"/>
        <include name="SQLWorkbench-Manual.pdf"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}">
        <include name="jworkbench.sh"/>
        <include name="datapumper.sh"/>
        <include name="dbexplorer.sh"/>
      </zipfileset>			
    </zip>

    <tstamp>
      <format pattern="yyyy-MM-dd" property="today"/>
    </tstamp>

    <propertyfile file="release.property">
        <entry key="dev.build.date" value="${today}"/>
        <entry key="dev.build.number" value="${build.number}"/>
    </propertyfile>

    <ant dir="..\website" inheritall="false" target="dev-release">
    </ant>
  </target>


  <target name="copy-history">
    <copy file="${scriptsrc}/history.txt" overwrite="true" tofile="${scriptsrc}/history.new">
      <filterset begintoken="@" endtoken="@">
        <filter token="BUILD_DATE" value="${formatted_build_date}"/>
        <filter token="BUILD_NUMBER" value="${build.number}"/>
      </filterset>
    </copy>
  </target>

  <target name="restart-history">
    <concat destfile="${scriptsrc}/history.txt">
      <filelist dir="${scriptsrc}" files="history.header,history.new"/>
    </concat>
  </target>
  
  <target name="clean-history">
    <delete file="${scriptsrc}/history.new" failonerror="false"/>
  </target>

	<target name="prepare-release-dir" depends="init">
    <copy file="${scriptsrc}/history.new" overwrite="true" failonerror="false" tofile="${root}/release/history.txt"/>

    <delete dir="${root}/release/manual" failonerror="false"/>
    <mkdir dir="${root}/release/manual"/>

    <copy todir="${root}/release/manual">
        <fileset dir="${html-outdir}"/>
    </copy>

    <delete>
      <fileset dir="${root}/release">
        <include name="Workbench-Build*.zip"/>
        <include name="Workbench-Build*.tar.gz"/>
      </fileset>
    </delete>
		
	</target>

	
	<target name="mac-package" depends="init,init-publish,prepare-release-dir">
		<property name="bundledir" value="${distdir}/mac"/>
		<delete dir="${bundledir}" failonerror="false"/>
		<mkdir dir="${bundledir}"/>

		<jarbundler dir="${bundledir}"
			name="SQLWorkbenchJ"
			mainclass="workbench.WbStarter" 
			jar="${distdir}/${jarfile}" 
			jvmversion="1.5+"
			version="${build.number}"
			shortname="SQL Workbench"
			infostring="SQL Workbench/J"
      antialiasedgraphics="true"
			antialiasedtext="true"
      liveresize="true"
			signature="sqwb"
			icon="Workbench.icns"
			vmoptions="-Xmx256m"
			stubfile="../etc/jarbundler/JavaApplicationStub">

			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javaproperty name="apple.awt.showGrowBox" value="true"/>
		</jarbundler>
		
    <tar compression="gzip" destfile="${root}/release/Workbench-Build${build.number}-Mac.tgz">
      <tarfileset dir="${distdir}">
        <include name="history.txt"/>
				<include name="SQLWorkbench-Manual.pdf"/>
      </tarfileset>
			<tarfileset dir="${bundledir}">
				<include name="**/*"/>
				<exclude name="**/JavaApplicationStub"/>
			</tarfileset>
			<tarfileset mode="555" dir="${bundledir}">
				<include name="**/JavaApplicationStub"/>
			</tarfileset>
      <tarfileset dir="${root}/release/manual" prefix="manual">
        <include name="**/*.*"/>
      </tarfileset>
      <tarfileset dir="${scriptsrc}" prefix="xslt">
        <include name="**/*.xslt"/>
        <exclude name="**/*test*"/>
      </tarfileset>
    </tar>
	</target>
	
	
  <target name="release-package" depends="prepare-release-dir,fixshellscripts">
    <zip zipfile="${root}/release/Workbench-Build${build.number}.zip">
      <zipfileset dir="${distdir}">
        <include name="Workbench.jar"/>
        <include name="history.txt"/>
				<include name="SQLWorkbench-Manual.pdf"/>
        <include name="JWorkbench.exe"/>
        <include name="DataPumper.exe"/>
        <include name="DbExplorer.exe"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}">
        <include name="jworkbench.sh"/>
        <include name="datapumper.sh"/>
        <include name="dbexplorer.sh"/>
      </zipfileset>
      <zipfileset dir="${root}/release/manual" prefix="manual">
        <include name="**/*.*"/>
      </zipfileset>
      <zipfileset dir="${scriptsrc}" prefix="xslt">
        <include name="**/*.xslt"/>
        <exclude name="**/*test*"/>
      </zipfileset>
    </zip>
  </target>

	<target name="release-src-zip" depends="init,fixshellscripts">
		
		<zip zipfile="${root}/${release-src-dir}/WorkbenchSrc-Build${build.number}.zip">
			<zipfileset dir="${src}" prefix="src">
				<include name="**/*.*"/>
				<exclude name="**/workbench.settings"/>
				<exclude name="**/test/*"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.cvsignore"/>
				<exclude name="**/.nb*"/>
				<exclude name="**/*.dfPackage"/>
				<exclude name="**/tags"/>
				<exclude name="help/*.*"/>
				<exclude name="**/*.tws"/>
			</zipfileset>
			
			<zipfileset dir="${testsrc}" prefix="test">
				<include name="**/*.*"/>
			</zipfileset>
			
			<zipfileset dir="${scriptsrc}" prefix="scripts">
				<include name="build.xml"/>
				<include name="history.txt"/>
				<include name="devbuild.number"/>
				<include name="build.number"/>
				<include name="release.property"/>
				<include name="history.header"/>
				<include name="jworkbench.sh"/>
				<include name="datapumper.sh"/>
				<include name="dbexplorer.sh"/>
				<include name="*.xslt"/>
        <exclude name="**/*test*"/>
			</zipfileset>
			
			<zipfileset dir="${doc}" prefix="doc">
				<include name="css/*.*"/>
				<include name="xml/*.*"/>
				<include name="xsl/*.*"/>
				<exclude name="**/CVS/*"/>
				<exclude name="**/.cvsignore"/>
				<exclude name="**/.nb*"/>
				<exclude name="**/tags"/>
				<exclude name="help/*.*"/>
				<exclude name="**/*.tws"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="src" depends="make-src-zip"/>
	
	<target name="generate-lexer">
		<java classname="JFlex.Main" classpath="../etc/JFlex.jar" fork="true">
			<jvmarg value="-Xmx256m"/>
			<arg value="-q"/>
			<arg value="../src/workbench/sql/formatter/SQLLexer.flex"/>
		</java>
	</target>
	
  <path id="junit.path">
		<fileset dir="${junitdir}"/>
  </path>
	 
	<target name="compile-tests" depends="compile">
		<javac debug="on" destdir="${build_test}" optimize="on" srcdir="${testsrc}" target="1.5" source="1.5" encoding="ISO-8859-1">
			<classpath>
				<pathelement location="${build}"/>
				<path refid="junit.path"/>
			</classpath>
		</javac>
	</target>

	<target name="test" depends="compile-tests">
		<delete failonerror="false">
			<fileset dir="${junitdir}" includes="*.txt"/>
		</delete>
		
		<junit fork="true" forkmode="perBatch" showoutput="false" haltonerror="true" haltonfailure="true" printsummary="false" includeantruntime="true">
			<classpath>
				<pathelement location="${build}"/>
				<pathelement location="${build_test}"/>
				<path refid="junit.path"/>
			</classpath>			
			
			<batchtest todir="../junit">
				<formatter type="plain"/>
					<fileset dir="${testsrc}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>			
			
		</junit>
	</target>
	
	<target name="javadoc">
		<javadoc destdir="${javadocdir}" notree="true" sourcepath="${src}" packagenames="workbench.*"/>
	</target>

  <target name="fixshellscripts">
    <fixcrlf srcdir="${scriptsrc}"
       eol="lf" 
       eof="remove"
       includes="**/*.sh"
    />
  </target>
	
</project>