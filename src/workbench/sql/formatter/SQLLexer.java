/* The following code was generated by JFlex 1.3.5 on 06.09.03 16:51 */

/* SQLLexer.java is a generated file.  You probably want to
 * edit SQLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate SQLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main SQLLexer.lex</code><br>
 * You will then have a file called SQLLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package workbench.sql.formatter;

import java.io.*;

/**
 * SQLLexer is a SQL language lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  SQLLexer shredder = new SQLLexer(System.in);
 *  SQLToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 *
 * @see SQLToken
 */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 06.09.03 16:51 from the specification file
 * <tt>file:/D:/projects/jworkbench/src/workbench/sql/lexer/SQLLexer.lex</tt>
 */
public class SQLLexer
{

	/** This character denotes the end of file */
	final public static int YYEOF = -1;

	/** initial size of the lookahead buffer */
	final private static int YY_BUFFERSIZE = 16384;

	/** lexical states */
	final public static int YYINITIAL = 0;
	final public static int COMMENT = 1;

	/**
	 * Translates characters to character classes
	 */
	final private static char [] yycmap =
	{
		0,  0,  0,  0,  0,  0,  0,  0,  0, 29, 37,  0, 29, 37,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		29, 34, 31, 34, 32, 34, 34, 36, 33, 33, 35, 41, 33, 25, 40, 42,
		39, 39, 30, 30, 30, 30, 30, 30, 30, 30, 33, 33, 34, 34, 34, 34,
		34,  1,  2, 10, 13,  9, 15, 16, 20, 11, 28, 21,  7, 14, 12,  3,
		24, 27,  4,  6,  5,  8, 19, 22, 26, 17, 18, 33, 38, 33, 34, 23,
		34,  1,  2, 10, 13,  9, 15, 16, 20, 11, 28, 21,  7, 14, 12,  3,
		24, 27,  4,  6,  5,  8, 19, 22, 26, 17, 18,  0, 34,  0, 34,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	};

	/**
	 * Translates a state to a row index in the transition table
	 */
	final private static int yy_rowMap [] =
	{
		0,    43,    86,   129,   172,   215,   258,   301,   344,   387,
		430,   473,   516,   559,   602,   645,   688,   731,   774,   817,
		860,   903,   946,   989,  1032,  1075,  1118,  1161,  1204,  1247,
		1290,  1333,  1075,  1075,  1376,  1419,  1462,  1505,  1548,  1591,
		1634,  1677,  1720,  1763,  1806,  1849,  1892,  1935,  1978,  2021,
		2064,  2107,  2150,  2193,  2236,  2279,  2322,  2365,    86,  2408,
		2451,  2494,  2537,  2580,  2623,  2666,  2709,  2752,  2795,  2838,
		2881,  2924,  2967,  3010,  3053,  3096,  3139,  3182,  3225,  3268,
		3311,  3354,  3397,  3440,  3483,  3526,  3569,  3612,  3655,  3698,
		3741,  3784,  3827,  3870,  3913,  3956,  3999,  4042,  4085,  4128,
		4171,  4214,  4257,  4300,  4343,  4386,  4429,  4472,  4515,  4558,
		4601,  4644,  4687,  4730,  4773,  4816,  4859,  4902,  4945,  4988,
		5031,  5074,  5117,  5160,  5203,  5246,  5289,  5332,  5375,  5418,
		5461,  5504,  5547,  5590,  5633,  5676,  5719,  5762,  5805,  5848,
		5891,  5934,  5977,  6020,  6063,  6106,  6149,  6192,  6235,  6278,
		6321,  6364,  6407,  6450,  6493,  6536,  6579,  6622,  6665,  6708,
		6751,  6794,  6837,  6880,  6923,  6966,  7009,  7052,  7095,  7138,
		7181,  7224,  1333,  1376,  1075,  1075,  7267,  1075,  7310,  7353,
		1548,  1075,  1075,  7396,  7439,  7482,  7525,  7568,  7611,  7654,
		7697,  7740,  7783,  7826,  7869,  7912,  7955,  7998,  8041,  8084,
		8127,  8170,  8213,  8256,  8299,  8342,  8385,  8428,  8471,  1075,
		8514,  8557,  8600,  8643,  8686,  8729,  8772,  8815,  8858,  8901,
		8944,  8987,  9030,  9073,  9116,  9159,  9202,  9245,  9288,  9331,
		9374,  9417,  9460,  9503,  9546,  9589,  9632,  9675,  9718,  9761,
		9804,  9847,  9890,  9933,  9976, 10019, 10062, 10105, 10148, 10191,
		10234, 10277, 10320, 10363, 10406, 10449, 10492, 10535, 10578, 10621,
		10664, 10707, 10750, 10793, 10836, 10879, 10922, 10965, 11008, 11051,
		11094, 11137, 11180, 11223, 11266, 11309, 11352, 11395, 11438, 11481,
		11524, 11567, 11610, 11653, 11696, 11739, 11782, 11825, 11868, 11911,
		11954, 11997, 12040, 12083, 12126, 12169, 12212, 12255, 12298, 12341,
		12384, 12427, 12470, 12513, 12556, 12599, 12642, 12685, 12728, 12771,
		12814, 12857, 12900, 12943, 12986, 13029, 13072, 13115, 13158, 13201,
		13244, 13287, 13330, 13373, 13416, 13459, 13502, 13545, 13588, 13631,
		13674, 13717, 13760, 13803, 13846, 13889, 13932, 13975, 14018, 14061,
		14104, 14147, 14190, 14233, 14276, 14319, 14362, 14405, 14448, 14491,
		14534, 14577, 14620, 14663, 14706, 14749, 14792, 14835, 14878, 14921,
		14964, 15007, 15050, 15093, 15136, 15179, 15222, 15265, 15308, 15351,
		15394, 15437, 15480, 15523, 15566, 15609, 15652, 15695, 15738, 15781,
		15824, 15867, 15910, 15953, 15996, 16039, 16082, 16125, 16168, 16211,
		16254, 16297, 16340, 16383, 16426, 16469, 16512, 16555, 16598, 16641,
		1376, 16684, 16727, 16770, 16813, 16856, 16899, 16942, 16985, 17028,
		17071, 17114, 17157, 17200, 17243, 17286,  8471,  8428,  1075, 17329,
		17372, 17415, 17458, 17501, 17544, 17587, 17630, 17673, 17716, 17759,
		8772, 17802, 17845, 17888, 17931, 17974, 18017, 18060, 18103, 18146,
		18189, 18232, 18275, 18318, 18361, 18404, 18447, 18490, 18533, 18576,
		18619, 18662, 18705, 18748, 18791, 18834, 18877, 18920, 18963, 19006,
		19049, 19092, 19135, 19178, 19221, 19264, 19307, 19350, 19393, 19436,
		19479, 19522, 19565, 19608, 19651, 19694, 19737, 19780, 19823, 19866,
		19909, 19952, 19995, 20038, 20081, 20124, 20167, 20210, 20253, 20296,
		20339, 20382, 20425, 20468, 20511, 20554, 20597, 20640, 20683, 20726,
		20769, 20812, 20855, 20898, 20941, 20984, 21027, 21070, 21113, 21156,
		21199, 21242, 21285, 21328, 21371, 21414, 21457, 21500, 21543, 21586,
		21629, 21672, 21715, 21758, 21801, 21844, 21887, 21930, 21973, 22016,
		22059, 22102, 22145, 22188, 22231, 22274, 22317, 22360, 22403, 22446,
		22489, 22532, 22575, 22618, 22661, 22704, 22747, 22790, 22833, 22876,
		22919, 22962, 23005, 23048, 23091, 23134, 23177, 23220, 23263, 23306,
		23349, 23392, 23435, 23478, 23521, 23564, 23607, 23650, 23693, 23736,
		23779, 23822, 23865, 23908, 23951, 23994, 24037, 24080, 24123, 24166,
		24209, 24252, 16641, 20296, 24295, 24338, 24381, 24424, 24467, 24510,
		24553, 24596, 24639, 24682, 24725, 24768, 24811, 24854, 24897, 24940,
		24983, 25026, 25069, 25112, 25155, 25198, 25241, 25284, 25327, 20640,
		25370, 25413, 25456, 25499, 25542, 25585, 25628, 25671, 25714, 25757,
		25800, 25843, 25886, 25929, 25972, 26015, 26058, 26101, 26144, 26187,
		26230, 26273, 26316, 26359, 26402, 26445, 26488, 26531, 26574, 26617,
		26660, 26703, 26746, 26789, 26832, 26875, 26918, 26961, 27004, 27047,
		27090, 27133, 27176, 27219, 27262, 27305, 27348, 27391, 27434, 27477,
		27520, 27563, 27606, 27649, 27692, 27735, 27778, 27821, 27864, 27907,
		27950, 25628, 27993, 28036, 28079, 28122, 28165, 28208, 28251, 28294,
		7740, 28337, 28380, 28423, 28466, 28509, 28552, 28595, 28638, 28681,
		28724, 28767, 28810, 28853, 28896, 28939, 28982, 15996, 29025, 29068,
		29111, 29154, 29197, 29240, 29283, 29326, 29369, 29412, 29455, 29498,
		29541, 29584, 29627, 29670, 29713, 29756, 29799, 29842, 29885, 29928,
		29971, 30014, 30057, 30100, 30143, 30186, 30229, 30272, 30315, 30358,
		30401, 30444, 25284, 30487, 30530, 30573, 30616, 30659, 30702, 30745,
		30788, 30831, 30874, 30917, 30960,  7869, 31003, 31046, 31089, 31132,
		31175, 31218, 31261, 31304, 31347, 18361, 31390, 31433, 31476, 31519,
		31562, 31605, 31648, 31691, 31734, 31777, 31820, 31863, 31906, 31949,
		31992, 32035, 32078, 32121, 32164, 32207, 32250, 32293, 32336, 32379,
		32422, 32465, 32508, 32551, 32594, 32637, 32680, 32723, 32766, 32809,
		32852, 32895, 32938, 32981, 33024, 33067, 33110, 33153, 33196, 33239,
		33282, 33325, 33368, 33411, 33454,  2537, 33497, 33540, 33583, 33626,
		33669, 33712, 33755, 33798, 33841, 33884, 33927, 33970, 34013, 34056,
		34099, 34142, 34185, 33712, 34228, 34271, 34314, 34357, 34400, 34443,
		34486, 34529, 34572, 34615, 34658, 34701, 34744, 34787, 27649, 34830,
		34873, 34916,  1075, 34959, 35002, 35045, 35088, 35131, 35174, 35217,
		35260, 35303, 23263, 35346, 31390, 35389, 35432, 35475, 35518, 35561,
		35604, 35647, 35690, 35733, 35776, 35819, 35862, 35905, 35948, 35991,
		36034, 36077, 36120, 36163, 36206, 36249, 36292, 36335, 36378, 36421,
		36464, 36507, 36550, 36593, 36636, 36679, 36722, 36765, 36808, 36851,
		36894, 36937, 36980, 37023, 37066, 37109, 37152, 37195, 37238, 37281,
		37324, 37367, 37410, 37453, 37496, 37539, 37582, 37625, 37668, 37711,
		37754, 37797, 37840, 37883, 37926, 37969, 38012, 38055, 38098, 38141,
		38184, 38227, 38270, 38313, 38356, 32680, 38399, 38442, 38485, 38528,
		38571, 38614, 38657, 38700, 38743, 38786, 38829, 38872, 38915, 38958,
		39001, 39044, 39087, 39130, 39173, 39216, 39259, 39302, 39345, 39388,
		39431, 39474, 39517, 39560, 39603, 39646, 39689, 39732, 39775, 39818,
		39861, 39904, 39947
	};

	/**
	 * The packed transition table of the DFA (part 0)
	 */
	final private static String yy_packed0 =
	"\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
	"\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
	"\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
	"\1\33\1\34\2\3\1\35\1\36\1\37\1\32\1\40"+
	"\1\41\1\42\1\41\1\43\1\36\1\3\1\37\1\44"+
	"\1\42\1\45\43\46\1\47\6\46\1\50\31\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\2\3\1\51"+
	"\1\3\1\52\1\53\1\54\1\55\1\56\1\3\1\57"+
	"\1\3\1\60\1\61\1\3\1\62\1\63\2\3\1\64"+
	"\5\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\65\1\3\1\66\1\67\2\3\1\70\1\3"+
	"\1\71\1\3\1\72\5\3\1\73\7\3\1\0\3\3"+
	"\1\0\1\3\5\0\1\74\1\0\2\3\3\0\2\3"+
	"\1\75\1\3\1\76\2\3\1\77\1\100\1\3\1\101"+
	"\1\102\1\103\2\3\1\104\3\3\1\105\2\3\1\106"+
	"\1\3\1\107\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\3\3\1\110\4\3\1\111\1\112\1\3\1\113"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\114\1\3\1\115\1\116\4\3\1\117\1\3"+
	"\1\120\5\3\1\121\2\3\1\122\4\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\123\1\3"+
	"\1\124\1\3\1\125\2\3\1\126\1\127\1\130\1\131"+
	"\2\3\1\132\2\3\1\133\2\3\1\134\3\3\1\135"+
	"\1\0\1\3\1\136\1\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\137\1\3\1\140\5\3\1\141\1\3"+
	"\1\142\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\143\5\3\1\144\13\3\1\145\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\146"+
	"\4\3\1\147\1\150\4\3\1\151\6\3\1\152\5\3"+
	"\1\0\1\153\1\154\1\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\155\1\3\1\156\1\157\2\3\1\160"+
	"\1\161\10\3\1\162\2\3\1\163\4\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\164\1\165"+
	"\1\166\4\3\1\167\1\170\1\171\1\3\1\172\10\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\173\1\3\1\174\4\3\1\175\1\176\1\177\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\200\1\3\1\201\1\202\4\3\1\203\1\3\1\204"+
	"\5\3\1\205\7\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\206\1\3\1\207\4\3\1\210"+
	"\1\211\1\3\1\212\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\213\1\3\1\214\1\215"+
	"\2\3\1\216\1\217\1\220\1\3\1\221\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\222"+
	"\1\223\2\3\1\224\1\3\1\225\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\226\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\227\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\230\7\3\1\231\1\3\1\232\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\233\1\3\1\234\7\3\1\235\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\236\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\237\1\240\6\3\1\241\10\3\1\242\4\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\56\0\1\3\1\243"+
	"\1\3\1\244\1\245\2\3\1\246\1\247\1\250\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\34\0\1\251"+
	"\21\0\3\3\1\252\25\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\40\0\1\36\7\0\1\36\16\0\1\253"+
	"\24\0\1\37\10\0\1\37\1\254\40\0\1\255\10\0"+
	"\1\255\3\0\44\256\1\257\1\260\1\261\4\256\36\0"+
	"\1\254\10\0\1\254\46\0\1\262\7\0\43\46\1\263"+
	"\6\46\1\264\43\46\1\265\6\46\1\266\43\46\1\267"+
	"\6\46\1\264\3\3\1\270\2\3\1\271\22\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\272"+
	"\4\3\1\73\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\273\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\6\3\1\274\2\3\1\275"+
	"\1\73\6\3\1\276\7\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\277\1\3\1\300\3\3"+
	"\1\301\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\302\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\303\4\3\1\304\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\305\13\3\1\73\3\3\1\73\7\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\73\13\3"+
	"\1\73\1\252\12\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\277\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\20\3\1\306\10\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\20\3\1\73"+
	"\10\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\12\3\1\307\16\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\310\1\3\1\311\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\312"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\313\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\314\11\3\1\315\1\252\10\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\316\6\3\1\317\14\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\44\320\1\321\1\322\1\323\1\324"+
	"\3\320\31\3\1\0\2\3\1\325\1\0\1\3\7\0"+
	"\2\3\3\0\15\3\1\326\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\15\3\1\73\13\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\327"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\330\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\15\3\1\331\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\332\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\17\3\1\333"+
	"\11\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\334\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\277\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\335\3\3\1\336"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\337\1\340\15\3\1\341\2\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\7\3\1\342\21\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\343\3\3\1\344\1\345\1\346\2\3\1\347\1\350"+
	"\1\351\2\3\1\352\3\3\1\353\4\3\1\354\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\20\3\1\355"+
	"\10\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\2\3\1\356\26\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\357\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\360\6\3\1\361"+
	"\1\362\1\3\1\363\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\364\11\3\1\365\12\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\366\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\30\3\1\342\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\367\7\3\1\367\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\23\3\1\370"+
	"\5\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\10\3\1\371\5\3\1\342\12\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\372\2\3\1\373"+
	"\10\3\1\374\3\3\1\111\7\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\2\3\1\375\13\3\1\73"+
	"\12\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\376\2\3\1\377\1\u0100\1\u0101\1\u0102\2\3"+
	"\1\u0103\1\3\1\u0104\14\3\1\0\1\3\1\u0105\1\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\111\1\3"+
	"\1\121\1\u0106\17\3\1\u0107\4\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u0108\3\3\1\342"+
	"\6\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u0109\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\u010a\7\3\1\u010b\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u010c"+
	"\1\3\1\u010d\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u010e\7\3\1\u010f\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u0110"+
	"\21\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0111\1\u0112\1\u0113\5\3\1\u0114\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\77"+
	"\10\3\1\u0115\13\3\1\277\2\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u0116\4\3\1\331"+
	"\5\3\1\u0117\2\3\1\u0113\3\3\1\u0118\5\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u0119"+
	"\7\3\1\u011a\6\3\1\342\3\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u0111\7\3\1\u011b"+
	"\1\3\1\u011c\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u011d\1\3\1\u011e\1\3\1\u011f"+
	"\1\u0120\1\u0121\1\u0122\1\277\7\3\1\u0123\3\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\15\3\1\u0124"+
	"\12\3\1\277\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\12\3\1\311\16\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\12\3\1\u0125\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\6\3\1\342\22\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\12\3"+
	"\1\u0126\2\3\1\u0127\13\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0128\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u0129\3\3"+
	"\1\u012a\1\u012b\1\u012c\14\3\1\u012d\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u012e\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u012f"+
	"\1\u0130\1\u0131\1\u0132\2\3\1\u0133\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u0134\1\u0135"+
	"\1\3\1\u0136\2\3\1\u0137\1\u0138\3\3\1\u0139\1\3"+
	"\1\u013a\11\3\1\332\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u013b\5\3\1\u013c\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u013d"+
	"\1\3\1\u013e\4\3\1\u013f\20\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\2\3\1\342\1\3\1\u0140"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\12\3\1\111\16\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u0141\7\3\1\u0142\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0143"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0144\10\3\1\u0145\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u0146\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u0147"+
	"\1\3\1\u0148\1\u0149\3\3\1\u014a\1\u014b\1\277\1\u014c"+
	"\1\3\1\u014d\3\3\1\u014e\1\u014f\3\3\1\u0147\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0150"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\16\3\1\u0151\11\3\1\u0152\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\14\3\1\315\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u0153\10\3"+
	"\1\u0154\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0155\4\3\1\u0156\1\3\1\342\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u0157\6\3\1\u0158\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\26\3\1\73\2\3\1\0\1\u0113"+
	"\2\3\1\0\1\3\7\0\2\3\3\0\7\3\1\70"+
	"\14\3\1\226\4\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u0159\13\3\1\73\7\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u015a"+
	"\5\3\1\u015b\12\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u015c\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u015d\2\3\1\u015e"+
	"\1\u015f\1\u0160\1\u0161\2\3\1\u0162\4\3\1\u0163\10\3"+
	"\1\u0164\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u0165\4\3\1\u0166\3\3\1\u0167\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u0168"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\146\22\3\1\73\1\0\1\u0169\2\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\342\7\3\1\u0164"+
	"\1\u016a\5\3\1\342\5\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\16\3\1\u016b\12\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u016c\1\u016d"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u016e\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\7\3\1\150\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\u016f\3\3\1\u0170"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0171\5\3\1\u0172\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\362\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u0173"+
	"\4\3\1\u0174\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\146\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\357\7\3\1\u0175"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u0176\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u0177\1\3\1\u0178\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u0179"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\73\6\3\1\u017a\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u017b\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\342"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u017c\2\3\1\u017d\2\3\1\u017e\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u017f"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u010d\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0180\6\3\1\u0181\5\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u0113"+
	"\1\77\1\u017b\20\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u0182\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\21\3\1\u0183\7\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u0184"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u0185\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u0186\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u0187\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u0188"+
	"\1\311\1\u0189\6\3\1\73\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\6\3\1\u018a\22\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u018b"+
	"\5\3\1\u018c\1\3\1\u018d\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\73\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\2\3\1\u018e"+
	"\26\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u018f\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\45\251\1\0\5\251\13\3\1\367\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\34\0\1\u0190"+
	"\17\0\1\u0190\12\0\1\253\24\0\1\254\10\0\1\254"+
	"\3\0\44\256\1\u0191\1\260\1\261\4\256\43\46\1\263"+
	"\6\46\1\0\43\46\1\0\6\46\1\264\4\3\1\u0113"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0192\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\332\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u0193\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0194"+
	"\1\3\1\u0195\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0104\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u010b\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u017b"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0196\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\331\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\24\3\1\u0197\4\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0198"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u013b\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\7\3\1\u0199\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\u019a\24\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\25\3\1\u019b"+
	"\3\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\u019c\21\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\24\3\1\73\4\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u019d\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\2\3\1\73"+
	"\26\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\26\3\1\u019e\2\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u010c\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\23\3\1\226\3\3\1\u019f"+
	"\1\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u0128\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\44\320\1\321\1\322\1\323\1\u01a0\3\320"+
	"\44\u01a1\1\321\1\0\1\u01a1\1\0\3\u01a1\44\320\1\u01a2"+
	"\1\322\1\323\1\u01a0\3\320\44\u01a0\1\u01a3\1\322\1\u01a4"+
	"\1\324\3\u01a0\11\3\1\u01a5\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u017b\1\3\1\u01a6"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u017b\16\3\1\u0147\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u01a7\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\6\3\1\73\22\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\21\3"+
	"\1\73\7\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u01a8\22\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\u01a9\24\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u01aa\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\4\3"+
	"\1\u01ab\7\3\1\73\14\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\u01ac\1\3\1\73\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u01ad\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\73\20\3\1\u01ae\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\73\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\73\5\3\1\u01af\13\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\10\3\1\u01b0\20\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u01b1\2\3"+
	"\1\u01b2\1\u0113\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u01b3\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u01b4\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u01b5"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u01b6\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u01b7\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u0146\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u01b8"+
	"\1\3\1\u01b9\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\24\3\1\u0113\4\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u01ba\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u0113"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u01bb\1\u01bc\14\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u01bd\2\3\1\73\2\3"+
	"\1\u0196\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u0113\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\16\3\1\73\1\3\1\u01be\10\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u01bf\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\30\3\1\u01c0\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u01c1\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\73\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u01c2"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u010e\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0113\1\u01c3\23\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\10\3\1\u01c4\20\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u0147\7\3\1\367\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u01c5\1\u01c6\2\3\1\u01c7"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\146\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u01c8\7\3\1\u01c9\5\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u01ca"+
	"\2\3\1\73\22\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\u01cb\22\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u01a5\5\3\1\73"+
	"\11\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0170\1\3\1\303\2\3\1\u01cc\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u01cd"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\10\3\1\u01ce\20\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u01cf\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u01d0\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u01d1"+
	"\14\3\1\111\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\7\3\1\u01d2\21\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\u01d3\5\3\1\77\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u01d4\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\342\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\26\3\1\73\2\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\342\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\12\3"+
	"\1\u01d5\16\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u01d6\2\3\1\u01d7\1\u01d8\13\3\1\u01d9"+
	"\2\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\20\3\1\342\10\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u01da\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\73\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u01db"+
	"\5\3\1\u01dc\10\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u01dd\23\3\1\73\3\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\15\3\1\u0181"+
	"\13\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\20\3\1\u0164\10\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u0173\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u01de\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0113"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u01df\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\64\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u0173\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u01e0"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u01e1\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u01e2\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\367\25\3\1\0"+
	"\1\3\1\u01e3\1\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u01e4\7\3\1\357\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u01e5\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u0185"+
	"\27\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\121\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u0116\1\u01e6\24\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\31\3\1\u01e7\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\332\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\4\3"+
	"\1\u01e8\4\3\1\u01e9\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\12\3\1\u01ea\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\7\3\1\u01eb\1\3"+
	"\1\u01ec\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u01ed\22\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\u015b\21\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u01ee\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\15\3"+
	"\1\u01ef\13\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u01f0\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\73\3\3\1\73\1\u01f1"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\u01f2\21\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\24\3\1\342\4\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u01f3\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u0173"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u01f4\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\7\3\1\u01f5\1\u01f6\20\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\u0113\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u01f7\1\u01f8\5\3\1\u01f9\1\u01fa\5\3\1\u01fb\5\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u01fc\11\3\1\u01fd\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\331\22\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u01fe\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u01ff"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\2\3\1\73\3\3\1\342\22\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\6\3\1\62\22\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u0200"+
	"\1\3\1\u0201\22\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0202\6\3\1\367\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u0203"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0124\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\7\3\1\u0204\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u01cf\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\25\3\1\342"+
	"\3\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\10\3\1\u0113\20\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\73\5\3\1\u0205\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u0206"+
	"\3\3\1\u0207\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0208\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u0209\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u020a"+
	"\1\3\1\u020b\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u020a\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u020c\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u020d"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u020e\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u020f\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u0210\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u01da"+
	"\2\3\1\u0211\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u01af\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u0212\1\u0145\7\3"+
	"\1\u0181\4\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u0213\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\u0214\21\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\2\3\1\277\6\3"+
	"\1\u0215\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u0216\7\3\1\u0217\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\2\3\1\111\26\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\252\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\30\3\1\73\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\7\3\1\u0218\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u01ca\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0219"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u021a\4\3\1\u021b\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u0185\1\3\1\u021c"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\u021d\3\3\1\u021e\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u021f\7\3\1\u0220"+
	"\1\3\1\u0221\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\311\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\20\3\1\u0222\10\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u0223"+
	"\4\3\1\u0224\15\3\1\u0225\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\u0226\23\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u0227\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\23\3"+
	"\1\u0228\5\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\10\3\1\111\1\73\1\3\1\u0229\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\30\3\1\331"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\24\3"+
	"\1\u022a\4\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u022b\22\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\10\3\1\u0185\12\3\1\u0228\5\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u022c\3\3\1\u022d\1\342\13\3\1\u022e\2\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\77"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\16\3\1\73\12\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u022f\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\73\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u0230"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u0173\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\73\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u0231\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u0232"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\2\3\1\u0175\26\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u0233\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\73\24\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u0234"+
	"\1\u0235\5\3\1\u0181\7\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\10\3\1\u0154\2\3\1\77\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\10\3"+
	"\1\u0236\20\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\2\3\1\u0237\3\3\1\303\22\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\15\3\1\u0238\13\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u011c\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u0239\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\27\3\1\u023a\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\25\3\1\73\3\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\342\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\24\3\1\u023b\4\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\342\7\3\1\u023c\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u023d\3\3\1\u023e\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u023f\3\3\1\u0175\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u0240\5\3\1\u0230\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\12\3\1\u0241\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u0242\2\3"+
	"\1\u0243\3\3\1\u0244\4\3\1\u014d\10\3\1\u021d\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u017b"+
	"\12\3\1\317\4\3\1\u0245\5\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u0193\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\15\3\1\u0246"+
	"\13\3\1\0\3\3\1\0\1\3\7\0\2\3\41\0"+
	"\1\u0247\10\0\1\u0247\3\0\7\3\1\u0248\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0249"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0230\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\20\3\1\u024a\10\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\12\3\1\u0124\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u024b"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\367\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\21\3\1\u024c\7\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u024d\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\26\3\1\u022e"+
	"\2\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u024e\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\15\3\1\u0164\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u01de\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u024f"+
	"\21\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\44\u01a0\1\0\1\322\1\u01a4\51\u01a0\1\322\1\u01a4\4\u01a0"+
	"\12\3\1\u0113\16\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0250\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u0251\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0113"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0252\2\3\1\u0253\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u0254\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u0255"+
	"\27\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\2\3\1\u0256\5\3\1\u015c\20\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u0257\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u0258"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0259\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u025a\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u0113\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u025b"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u025c\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\15\3\1\u025d\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\342\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u025e"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u010e\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u025f\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u0260\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u0181"+
	"\21\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\6\3\1\u0261\22\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u0262\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\20\3\1\u0263\10\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0264"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0265\3\3\1\u0124\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\6\3\1\u0266\13\3\1\u0267"+
	"\6\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\30\3\1\u0268\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u0269\1\3\1\u026a\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\u026b\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u026c\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\357\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\u026d\21\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u026e\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u026f\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\17\3\1\73\11\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u0270\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\u0271\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u01b3\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u0272\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\u0173\21\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\16\3\1\u0273\12\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\226\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\7\3\1\u0274\21\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0275\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u0276\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u0277\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0124\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\u0278\24\3\1\0\1\u0279"+
	"\2\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u027a"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u027b\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0175\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u027c\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u027d"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u027e\1\3\1\u027f\21\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\367\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\27\3\1\u0280"+
	"\1\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\6\3\1\u0119\22\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\12\3\1\u0281\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u0282\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\342"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\16\3\1\u0262\12\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u0283\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\21\3\1\u0284\7\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\14\0\1\u0285\41\0"+
	"\1\3\1\u01a5\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0286\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u0185\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u025c"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\30\3\1\u0287\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0288\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\7\3\1\331\21\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u01a6\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u0289\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u028a\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\77\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u028b\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u028c\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u028d\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\16\3\1\u028e\12\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u028f\11\3"+
	"\1\u0290\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0291\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0292\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0293\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\270\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u0294\7\3\1\u0138\1\3\1\u0295\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u0296\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0297\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u0298\22\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u0299\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u029a\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u029b\25\3\1\u019f\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\25\3\1\u029c\3\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u0230\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u029d\13\3\1\277\10\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u029e\7\3"+
	"\1\u029f\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u0113\7\3\1\u0104\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u02a0\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u02a1\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\31\3\1\0\1\73\2\3\1\0\1\3\7\0"+
	"\2\3\3\0\12\3\1\u02a2\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\25\3\1\277\3\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u02a3"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u0271\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\15\3\1\u02a4\13\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u02a5\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u0286"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\17\3\1\332\11\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u02a6\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u015a\11\3\1\u01ca"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0193\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\2\3\1\u02a7\26\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u02a8\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\7\3\1\u02a9"+
	"\21\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u02aa\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u02ab\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\4\3\1\u02ac\24\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\16\3\1\u02ad"+
	"\12\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u010c\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\16\3\1\u0175\12\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u01b2\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u02ae"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u02af\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u02b0\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u02b1\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u02b2"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\220\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u02b3\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u02b4\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u02b5"+
	"\27\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\17\3\1\u02b6\11\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\77\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u02b7\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u024e"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u02b8\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u02b9\27\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\22\3\1\342\6\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\303"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u01f2\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\30\3\1\u02ba\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\u02bb\24\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\24\3\1\226\4\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u015a\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\10\3\1\u0171\20\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\3\3\1\150\25\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\7\3\1\277\21\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u02bc\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u02bd\10\3\1\u02be\12\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u0147\25\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u02bf\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\16\3\1\u02c0\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u0175\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\26\3\1\u02c1\2\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\17\3"+
	"\1\u014d\11\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u02c2\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\u02c3\24\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u02c4\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u02c5\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u02c6\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u0138\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\73\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u02a0\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u02c7\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\342\13\3\1\342\6\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\20\3"+
	"\1\u0124\10\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\367\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u02c8\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u02c9\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\27\3"+
	"\1\u019f\1\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u0116\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u02ca\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\u01af\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u027e\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u02cb\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\14\3\1\u02cc\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u02cd\25\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u02ce\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u01a5\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u02cf\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\6\3\1\u025b\22\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u020a\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u02d0\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\u0235\23\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\27\3\1\u02d1\1\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u02d2\5\3\1\u02d3\7\3\1\u02d4\11\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u02d5\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u0124\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\317\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\u02d6\23\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u02d7\25\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u0274\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\16\3\1\u02d8\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u02d9\3\3\1\73\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u02da\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u0181\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u02db\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\7\3\1\u02dc\21\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\4\3"+
	"\1\u02dd\24\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\3\3\1\u02de\25\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u02df\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\u010e\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u0260\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u0138\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\16\3\1\u02e0\12\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u0215\23\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\17\3"+
	"\1\u02e1\11\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u02e2\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\12\3\1\u02e3\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\15\3\1\342\13\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\4\3"+
	"\1\u02e4\24\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\16\3\1\u02e5\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u0111\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u017b\7\3"+
	"\1\u0198\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u02e6\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\15\3\1\u02e7\13\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\u01e6\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u02e8\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\26\3\1\367\2\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\30\3\1\u01bd\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\35\0\1\u02e9\20\0\14\3\1\u0175"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u02ea\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\73\4\3\1\u011c\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\u02eb"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\15\3\1\u02ec\13\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\u010e\22\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\6\3\1\u02ed\22\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u02ee"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u0260\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u02ef\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u01e3\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u02f0"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\12\3\1\u02f1\16\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u02f2\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u02f3\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u02f4"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u0230\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u02f5\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\27\3\1\u02f6\1\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u02f7"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0260\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\12\3\1\u02f8\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\77\16\3\1\u0268"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\6\3"+
	"\1\325\14\3\1\u0175\5\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\14\3\1\u02f9\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\77\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\1\3"+
	"\1\u02fa\27\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u02fb\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u02fc\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0124\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u02fd\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u02fe\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\150\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u02ff\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\16\3"+
	"\1\u0300\12\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\3\3\1\332\4\3\1\u0301\20\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0302\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\13\3"+
	"\1\u0303\15\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\u0304\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0305\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\3\3\1\u0306\25\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u01a5\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\14\3\1\u0307\14\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\3\3\1\u0308\25\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0309\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u01e3\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u030a\5\3\1\73\7\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\20\3\1\u030b\10\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\20\3"+
	"\1\367\10\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\4\3\1\77\24\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u030c\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\u030d\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\21\3"+
	"\1\121\7\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u030e\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\23\3\1\277\5\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\11\3\1\u030f\17\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u02b9\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\15\3\1\u0310\13\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\15\3\1\277\13\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\u02cf\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\6\3"+
	"\1\303\22\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\7\3\1\u0311\21\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\13\3\1\u0312\15\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\u0117\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u0271\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\21\3\1\73\6\3\1\331\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\12\3\1\u0184\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0313"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\10\3\1\u0138\20\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\73\2\3\1\u0314\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\23\3\1\342"+
	"\5\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u0315\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\351\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\12\3\1\u0316\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u0317"+
	"\27\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u0318\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u0313\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u0319\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u031a"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u0138\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u031b\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\10\3\1\u010c\20\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\u031c"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u031d\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u02e0\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\332\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\27\3\1\u031e"+
	"\1\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u031f\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u017b\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u0320\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u0181"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\30\3\1\u0321\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u0322\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0323\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0324\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\14\0\1\u0325"+
	"\41\0\20\3\1\u0260\10\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0326\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\30\3\1\u0327\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\73"+
	"\1\3\1\u0328\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\331\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\u0329\6\3\1\u0301"+
	"\20\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u032a\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u032b\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\15\3\1\u032c\13\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\10\3\1\u032d"+
	"\4\3\1\313\13\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u032e\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u032f\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u0330"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u0331\4\3\1\342\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u0332\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u02e2"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\331\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u0333\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u0334\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\16\3\1\u0335"+
	"\12\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u0336\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\12\3\1\u02fb\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\2\3\1\342\25\3\1\u02fb"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u0337\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u015a\7\3\1\77\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\73\10\3"+
	"\1\73\13\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u02d9\22\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\14\3\1\325\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\317\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\12\3"+
	"\1\u0338\16\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\331\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0339\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u0262\1\3"+
	"\1\73\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\12\3\1\u033a\16\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\16\3\1\u033b\12\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u033c\23\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\10\3"+
	"\1\u033d\20\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u033e\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\22\3\1\u0204\6\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\27\3\1\u033f\1\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\15\3"+
	"\1\u0340\13\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\12\3\1\u0341\16\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\5\3\1\u0342\23\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\5\3\1\u0343\23\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\4\3"+
	"\1\u0344\24\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\16\3\1\u015c\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u0345\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0346\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\6\3"+
	"\1\u0347\22\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\22\3\1\u0235\6\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\10\3\1\u032d\20\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\u0348\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\30\3"+
	"\1\u0230\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u0238\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\16\3\1\u0349\12\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\17\3\1\u034a\11\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u01bd"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\15\0"+
	"\1\u034b\40\0\3\3\1\u034c\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u034d\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u034e"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u034f\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u0350\25\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\27\3\1\u0351\1\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\6\3\1\277"+
	"\22\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0352\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\27\3\1\u0353\1\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u0354\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0235"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\332\3\3\1\u0355\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u0356\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0357"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\u0358\17\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0359\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u035a\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\27\3\1\u035b"+
	"\1\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\24\3\1\332\4\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\2\3\1\277\26\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\11\3\1\u035c\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\4\3\1\u035d"+
	"\24\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\20\3\1\u030a\10\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\u035e\3\3\1\u035f\1\3\1\351"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\27\3\1\u0360\1\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\331\1\3\1\u011c\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0361"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\11\3\1\73\1\3\1\u0198\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\16\3\1\u01af\12\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\27\3\1\u0362"+
	"\1\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\12\3\1\331\16\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u02bd\21\3\1\u02d1\1\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u0363"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u0364\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0116\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\14\3\1\u0313\14\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u0365"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u028e\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\14\3\1\u0366\14\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\17\3\1\u0367\11\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u0368"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0369\1\u02e6\2\3\1\u032d\4\3\1\u0124\12\3"+
	"\1\u036a\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u036b\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u0204\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\27\3\1\u036c\1\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\13\3\1\u036d"+
	"\15\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u01af\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u036e\1\3\1\u036f\1\3\1\u024f"+
	"\21\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u0370\24\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\1\3\1\u0173\7\3\1\73\17\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u0371"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\1\3\1\u0372\27\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\3\3\1\u036e\2\3\1\u0373\1\u024f\21\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u0374\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\16\3\1\u0375\5\3\1\u0376\4\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\6\3\1\u0266\22\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u0377\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0378\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\27\3\1\u0379\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\10\3\1\u037a\20\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\20\3"+
	"\1\252\10\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\3\3\1\111\25\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u0164\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0306\13\3"+
	"\1\u037b\1\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u037c\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u037d\22\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\101\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u037e\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\73\20\3\1\u037f\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\24\3\1\u0380\4\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\5\3"+
	"\1\u0381\23\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\31\3\1\0\1\3\1\u0382\1\3\1\0\1\3"+
	"\7\0\2\3\3\0\14\3\1\u0383\14\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\13\3\1\u0384\15\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u0385\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u0386\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\73\20\3\1\u033f\1\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u0387\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\14\3\1\u0388\14\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\6\3\1\u0389\1\u024f\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\14\3\1\u038a"+
	"\14\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\5\3\1\u0193\23\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\31\3\1\0\1\u0113\2\3\1\0\1\3"+
	"\7\0\2\3\3\0\3\3\1\u038b\2\3\1\u038c\5\3"+
	"\1\351\1\3\1\u01d8\12\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u038d\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\1\3\1\u038e\27\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u038f\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\6\3\1\u0390\20\3\1\u0391\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\14\3\1\u0248\14\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\10\3"+
	"\1\u017b\20\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\15\3\1\u0392\13\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\10\3\1\u030e\20\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\u0393\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\11\3"+
	"\1\u0394\17\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\5\3\1\u0395\23\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\4\3\1\u0396\24\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\30\3\1\u0397\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\16\3\1\u0398"+
	"\12\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\7\3\1\u0399\21\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\6\3\1\u01d6\22\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\27\3\1\u039a\1\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\1\3\1\u039b"+
	"\27\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\27\3\1\u039c\1\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\5\3\1\u039d\23\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\5\3\1\u039e\23\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\11\3\1\u039f"+
	"\17\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\15\3\1\u03a0\13\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\11\3\1\u03a1\17\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\1\3\1\73\27\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\3\3\1\64"+
	"\25\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\4\3\1\u03a2\5\3\1\u0120\16\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\12\3\1\u01b3\16\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\5\3\1\u03a3"+
	"\23\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\13\3\1\u03a4\15\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\4\3\1\u03a5\24\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\13\3\1\u03a6\15\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\12\3\1\u03a7"+
	"\16\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\3\3\1\u03a8\25\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\21\3\1\u03a9\7\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\3\3\1\u03aa\25\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\23\3\1\u03ab"+
	"\5\3\1\0\3\3\1\0\1\3\7\0\2\3\3\0"+
	"\14\3\1\u03ac\14\3\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\13\3\1\u03ad\15\3\1\0\3\3\1\0"+
	"\1\3\7\0\2\3\3\0\7\3\1\u03ae\21\3\1\0"+
	"\3\3\1\0\1\3\7\0\2\3\3\0\30\3\1\u03af"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\14\3"+
	"\1\u03b0\14\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\1\3\1\u03b1\27\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\1\3\1\u03b2\27\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\17\3\1\u03b3\11\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u03b4\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\11\3\1\u039e\17\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\27\3\1\u03b5\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\7\3\1\u03b6\21\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\7\3"+
	"\1\u03b7\21\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u03b8\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u03b9\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\12\3\1\u01d8\16\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\27\3"+
	"\1\u03ba\1\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\27\3\1\u03bb\1\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\12\3\1\u039e\16\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\15\3\1\u03bc\13\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\12\3"+
	"\1\u01d8\15\3\1\u03bd\1\0\3\3\1\0\1\3\7\0"+
	"\2\3\3\0\30\3\1\u03be\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\27\3\1\u03bf\1\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\4\3\1\u03c0\24\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\3\3"+
	"\1\u03c1\25\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\2\3\1\u0256\26\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0\11\3\1\u03c2\17\3\1\0\3\3"+
	"\1\0\1\3\7\0\2\3\3\0\6\3\1\u03c3\22\3"+
	"\1\0\3\3\1\0\1\3\7\0\2\3\3\0\12\3"+
	"\1\u0244\16\3\1\0\3\3\1\0\1\3\7\0\2\3"+
	"\3\0\13\3\1\u0230\15\3\1\0\3\3\1\0\1\3"+
	"\7\0\2\3\3\0";

	/**
	 * The transition table of the DFA
	 */
	final private static int yytrans [] = yy_unpack();


	/* error codes */
	final private static int YY_UNKNOWN_ERROR = 0;
	final private static int YY_ILLEGAL_STATE = 1;
	final private static int YY_NO_MATCH = 2;
	final private static int YY_PUSHBACK_2BIG = 3;

	/* error messages for the codes above */
	final private static String YY_ERROR_MSG[] =
	{
		"Unkown internal scanner error",
		"Internal error: unknown state",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private final static byte YY_ATTRIBUTE[] =
	{
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,
		9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  9,  9,
		0,  9,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,
		1,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,
		0,  1,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
		1,  1,  1
	};

	/** the input device */
	private java.io.Reader yy_reader;

	/** the current state of the DFA */
	private int yy_state;

	/** the current lexical state */
	private int yy_lexical_state = YYINITIAL;

	/** this buffer contains the current text to be matched and is
	 * the source of the yytext() string */
	private char yy_buffer[] = new char[YY_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int yy_markedPos;

	/** the textposition at the last state to be included in yytext */
	private int yy_pushbackPos;

	/** the current text position in the buffer */
	private int yy_currentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int yy_startRead;

	/** endRead marks the last character in the buffer, that has been read
	 * from input */
	private int yy_endRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * yy_atBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean yy_atBOL = true;

	/** yy_atEOF == true <=> the scanner is at the EOF */
	private boolean yy_atEOF;

	/* user code: */
	private int lastToken;
	private int nextState=YYINITIAL;
	private StringBuffer commentBuffer = new StringBuffer();
	private int commentNestCount = 0;
	private int commentStartLine = 0;
	private int commentStartChar = 0;

	/**
	 * next Token method that allows you to control if whitespace and comments are
	 * returned as tokens.
	 */
	public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException
	{
		Token t = getNextToken();
		while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment())))
		{
			t = getNextToken();
		}
		return (t);
	}

	/**
	 * Prints out tokens from a file or System.in.
	 * If no arguments are given, System.in will be used for input.
	 * If more arguments are given, the first argument will be used as
	 * the name of the file to use as input
	 *
	 * @param args program arguments, of which the first is a filename
	 */
	public static void main(String[] args)
	{
		InputStream in;
		try
		{
			if (args.length > 0)
			{
				File f = new File(args[0]);
				if (f.exists())
				{
					if (f.canRead())
					{
						in = new FileInputStream(f);
					} else
					{
						throw new IOException("Could not open " + args[0]);
					}
				} else
				{
					throw new IOException("Could not find " + args[0]);
				}
			} else
			{
				in = System.in;
			}
			SQLLexer shredder = new SQLLexer(in);
			Token t;
			while ((t = shredder.getNextToken()) != null)
			{
				if (t.getID() != SQLToken.WHITE_SPACE)
				{
					System.out.println(t);
				}
			}
		} catch (IOException e)
		{
			System.out.println(e.getMessage());
		}
	}

	/**
	 * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
	 * Subsequent tokens read from the lexer will start with the line, char, and column
	 * values given here.
	 *
	 * @param reader The new input.
	 * @param yyline The line number of the first token.
	 * @param yychar The position (relative to the start of the stream) of the first token.
	 * @param yycolumn The position (relative to the line) of the first token.
	 * @throws IOException if an IOExecption occurs while switching readers.
	 */
	public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException
	{
		yyreset(reader);
		this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


	/**
	 * Creates a new scanner
	 * There is also a java.io.InputStream version of this constructor.
	 *
	 * @param   in  the java.io.Reader to read input from.
	 */
	public SQLLexer(java.io.Reader in)
	{
		this.yy_reader = in;
	}

	/**
	 * Creates a new scanner.
	 * There is also java.io.Reader version of this constructor.
	 *
	 * @param   in  the java.io.Inputstream to read input from.
	 */
	public SQLLexer(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the split, compressed DFA transition table.
	 *
	 * @return the unpacked transition table
	 */
	private static int [] yy_unpack()
	{
		int [] trans = new int[39990];
		int offset = 0;
		offset = yy_unpack(yy_packed0, offset, trans);
		return trans;
	}

	/**
	 * Unpacks the compressed DFA transition table.
	 *
	 * @param packed   the packed transition table
	 * @return         the index of the last entry
	 */
	private static int yy_unpack(String packed, int offset, int [] trans)
	{
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do trans[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>false</code>, iff there was new input.
	 *
	 * @exception   IOException  if any I/O-Error occurs
	 */
	private boolean yy_refill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (yy_startRead > 0)
		{
			System.arraycopy(yy_buffer, yy_startRead,
			yy_buffer, 0,
			yy_endRead-yy_startRead);

			/* translate stored positions */
			yy_endRead-= yy_startRead;
			yy_currentPos-= yy_startRead;
			yy_markedPos-= yy_startRead;
			yy_pushbackPos-= yy_startRead;
			yy_startRead = 0;
		}

		/* is the buffer big enough? */
		if (yy_currentPos >= yy_buffer.length)
		{
			/* if not: blow it up */
			char newBuffer[] = new char[yy_currentPos*2];
			System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
			yy_buffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = yy_reader.read(yy_buffer, yy_endRead,
		yy_buffer.length-yy_endRead);

		if (numRead < 0)
		{
			return true;
		}
		else
		{
			yy_endRead+= numRead;
			return false;
		}
	}


	/**
	 * Closes the input stream.
	 */
	final public void yyclose() throws java.io.IOException
	{
		yy_atEOF = true;            /* indicate end of file */
		yy_endRead = yy_startRead;  /* invalidate buffer    */

		if (yy_reader != null)
			yy_reader.close();
	}


	/**
	 * Closes the current stream, and resets the
	 * scanner to read from a new input stream.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	final public void yyreset(java.io.Reader reader) throws java.io.IOException
	{
		yyclose();
		yy_reader = reader;
		yy_atBOL  = true;
		yy_atEOF  = false;
		yy_endRead = yy_startRead = 0;
		yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		yy_lexical_state = YYINITIAL;
	}


	/**
	 * Returns the current lexical state.
	 */
	final public int yystate()
	{
		return yy_lexical_state;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	final public void yybegin(int newState)
	{
		yy_lexical_state = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	final public String yytext()
	{
		return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 *
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 *
	 * @return the character at position pos
	 */
	final public char yycharat(int pos)
	{
		return yy_buffer[yy_startRead+pos];
	}


	/**
	 * Returns the length of the matched text region.
	 */
	final public int yylength()
	{
		return yy_markedPos-yy_startRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param   errorCode  the code of the errormessage to display
	 */
	private void yy_ScanError(int errorCode)
	{
		String message;
		try
		{
			message = YY_ERROR_MSG[errorCode];
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number  the number of characters to be read again.
	 *                This number must not be greater than yylength()!
	 */
	private void yypushback(int number)
	{
		if ( number > yylength() )
			yy_ScanError(YY_PUSHBACK_2BIG);

		yy_markedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return      the next token
	 * @exception   IOException  if any I/O-Error occurs
	 */
	public Token getNextToken() throws java.io.IOException
	{
		int yy_input;
		int yy_action;

		// cached fields:
		int yy_currentPos_l;
		int yy_startRead_l;
		int yy_markedPos_l;
		int yy_endRead_l = yy_endRead;
		char [] yy_buffer_l = yy_buffer;
		char [] yycmap_l = yycmap;

		int [] yytrans_l = yytrans;
		int [] yy_rowMap_l = yy_rowMap;
		byte [] yy_attr_l = YY_ATTRIBUTE;

		while (true)
		{
			yy_markedPos_l = yy_markedPos;

			yychar+= yy_markedPos_l-yy_startRead;

			boolean yy_r = false;
			for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
			yy_currentPos_l++)
			{
				switch (yy_buffer_l[yy_currentPos_l])
				{
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yy_r = false;
						break;
					case '\r':
						yyline++;
						yy_r = true;
						break;
					case '\n':
						if (yy_r)
							yy_r = false;
						else
						{
							yyline++;
						}
						break;
					default:
						yy_r = false;
				}
			}

			if (yy_r)
			{
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean yy_peek;
				if (yy_markedPos_l < yy_endRead_l)
					yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
				else if (yy_atEOF)
					yy_peek = false;
				else
				{
					boolean eof = yy_refill();
					yy_markedPos_l = yy_markedPos;
					yy_buffer_l = yy_buffer;
					if (eof)
						yy_peek = false;
					else
						yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
				}
				if (yy_peek) yyline--;
			}
			yy_action = -1;

			yy_startRead_l = yy_currentPos_l = yy_currentPos =
			yy_startRead = yy_markedPos_l;

			yy_state = yy_lexical_state;


			yy_forAction:
			{
				while (true)
				{

					if (yy_currentPos_l < yy_endRead_l)
						yy_input = yy_buffer_l[yy_currentPos_l++];
					else if (yy_atEOF)
					{
						yy_input = YYEOF;
						break yy_forAction;
					}
					else
					{
						// store back cached positions
						yy_currentPos  = yy_currentPos_l;
						yy_markedPos   = yy_markedPos_l;
						boolean eof = yy_refill();
						// get translated positions and possibly new buffer
						yy_currentPos_l  = yy_currentPos;
						yy_markedPos_l   = yy_markedPos;
						yy_buffer_l      = yy_buffer;
						yy_endRead_l     = yy_endRead;
						if (eof)
						{
							yy_input = YYEOF;
							break yy_forAction;
						}
						else
						{
							yy_input = yy_buffer_l[yy_currentPos_l++];
						}
					}
					int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
					if (yy_next == -1) break yy_forAction;
					yy_state = yy_next;

					int yy_attributes = yy_attr_l[yy_state];
					if ( (yy_attributes & 1) == 1 )
					{
						yy_action = yy_state;
						yy_markedPos_l = yy_currentPos_l;
						if ( (yy_attributes & 8) == 8 ) break yy_forAction;
					}

				}
			}

			// store back cached position
			yy_markedPos = yy_markedPos_l;

			switch (yy_action)
			{

				case 25:
				case 34:
				case 38:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.ERROR;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 964: break;
				case 418:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.LITERAL_BIT_STRING;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 965: break;
				case 27:
				case 31:
				case 33:
				case 36:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.OPERATOR;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 966: break;
				case 39:
				case 181:
				{
					commentNestCount--;
					commentBuffer.append(yytext());
					if (commentNestCount == 0)
					{
						nextState = YYINITIAL;
						lastToken = SQLToken.COMMENT_TRADITIONAL;
						SQLToken t = (new SQLToken(lastToken,commentBuffer.toString(),commentStartLine,commentStartChar,commentStartChar+commentBuffer.length(),nextState));
						yybegin(nextState);
						return(t);
					}
				}
				case 967: break;
				case 175:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.ERROR_UNCLOSED_STRING;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 968: break;
				case 208:
				case 417:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.ERROR_UNCLOSED_BIT_STRING;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 969: break;
				case 182:
				{
					nextState = COMMENT;
					commentBuffer.append(yytext());
					commentNestCount++;
					yybegin(nextState);
				}
				case 970: break;
				case 32:
				case 35:
				case 172:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.SEPARATOR;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 971: break;
				case 2:
				case 3:
				case 4:
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:
				case 10:
				case 11:
				case 13:
				case 14:
				case 15:
				case 17:
				case 19:
				case 20:
				case 21:
				case 22:
				case 24:
				case 26:
				case 28:
				case 40:
				case 41:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 60:
				case 62:
				case 63:
				case 64:
				case 65:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 93:
				case 94:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 117:
				case 119:
				case 120:
				case 121:
				case 122:
				case 124:
				case 125:
				case 126:
				case 127:
				case 129:
				case 130:
				case 131:
				case 132:
				case 133:
				case 134:
				case 135:
				case 136:
				case 137:
				case 138:
				case 139:
				case 140:
				case 141:
				case 142:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 149:
				case 150:
				case 151:
				case 152:
				case 153:
				case 154:
				case 155:
				case 156:
				case 157:
				case 158:
				case 159:
				case 160:
				case 161:
				case 162:
				case 163:
				case 164:
				case 165:
				case 166:
				case 167:
				case 169:
				case 183:
				case 185:
				case 186:
				case 187:
				case 188:
				case 189:
				case 190:
				case 192:
				case 193:
				case 194:
				case 195:
				case 196:
				case 197:
				case 198:
				case 199:
				case 200:
				case 201:
				case 202:
				case 203:
				case 204:
				case 206:
				case 212:
				case 213:
				case 215:
				case 216:
				case 217:
				case 219:
				case 220:
				case 221:
				case 222:
				case 223:
				case 225:
				case 226:
				case 227:
				case 228:
				case 229:
				case 230:
				case 231:
				case 232:
				case 234:
				case 235:
				case 236:
				case 237:
				case 238:
				case 239:
				case 240:
				case 241:
				case 242:
				case 243:
				case 244:
				case 245:
				case 246:
				case 247:
				case 248:
				case 249:
				case 250:
				case 251:
				case 252:
				case 253:
				case 254:
				case 256:
				case 257:
				case 258:
				case 259:
				case 260:
				case 261:
				case 262:
				case 263:
				case 264:
				case 265:
				case 266:
				case 267:
				case 268:
				case 269:
				case 270:
				case 272:
				case 273:
				case 274:
				case 275:
				case 276:
				case 277:
				case 278:
				case 279:
				case 280:
				case 281:
				case 282:
				case 283:
				case 284:
				case 285:
				case 286:
				case 287:
				case 288:
				case 289:
				case 290:
				case 291:
				case 292:
				case 293:
				case 295:
				case 296:
				case 297:
				case 298:
				case 299:
				case 300:
				case 301:
				case 302:
				case 303:
				case 304:
				case 305:
				case 306:
				case 307:
				case 308:
				case 309:
				case 310:
				case 311:
				case 312:
				case 313:
				case 314:
				case 315:
				case 316:
				case 317:
				case 318:
				case 319:
				case 320:
				case 321:
				case 322:
				case 323:
				case 324:
				case 325:
				case 326:
				case 328:
				case 329:
				case 330:
				case 331:
				case 332:
				case 333:
				case 334:
				case 335:
				case 336:
				case 337:
				case 338:
				case 339:
				case 341:
				case 342:
				case 343:
				case 344:
				case 345:
				case 346:
				case 347:
				case 348:
				case 349:
				case 350:
				case 351:
				case 352:
				case 354:
				case 355:
				case 356:
				case 357:
				case 358:
				case 359:
				case 362:
				case 363:
				case 364:
				case 367:
				case 368:
				case 369:
				case 370:
				case 371:
				case 372:
				case 373:
				case 374:
				case 375:
				case 376:
				case 377:
				case 378:
				case 379:
				case 380:
				case 381:
				case 382:
				case 383:
				case 384:
				case 385:
				case 387:
				case 388:
				case 389:
				case 390:
				case 391:
				case 392:
				case 393:
				case 394:
				case 395:
				case 396:
				case 397:
				case 398:
				case 401:
				case 402:
				case 403:
				case 404:
				case 405:
				case 406:
				case 407:
				case 408:
				case 409:
				case 410:
				case 411:
				case 412:
				case 413:
				case 414:
				case 420:
				case 421:
				case 422:
				case 423:
				case 424:
				case 425:
				case 426:
				case 427:
				case 428:
				case 429:
				case 431:
				case 432:
				case 433:
				case 434:
				case 435:
				case 436:
				case 437:
				case 438:
				case 439:
				case 440:
				case 441:
				case 442:
				case 443:
				case 444:
				case 445:
				case 446:
				case 449:
				case 450:
				case 451:
				case 452:
				case 453:
				case 454:
				case 455:
				case 456:
				case 457:
				case 458:
				case 459:
				case 460:
				case 461:
				case 462:
				case 463:
				case 464:
				case 465:
				case 466:
				case 467:
				case 468:
				case 469:
				case 470:
				case 471:
				case 472:
				case 473:
				case 474:
				case 475:
				case 476:
				case 477:
				case 479:
				case 480:
				case 481:
				case 482:
				case 483:
				case 484:
				case 485:
				case 487:
				case 488:
				case 490:
				case 491:
				case 492:
				case 493:
				case 494:
				case 495:
				case 496:
				case 498:
				case 499:
				case 500:
				case 501:
				case 502:
				case 503:
				case 504:
				case 505:
				case 506:
				case 507:
				case 508:
				case 509:
				case 510:
				case 511:
				case 512:
				case 514:
				case 515:
				case 516:
				case 517:
				case 518:
				case 519:
				case 520:
				case 521:
				case 522:
				case 523:
				case 524:
				case 525:
				case 526:
				case 527:
				case 528:
				case 529:
				case 530:
				case 532:
				case 535:
				case 536:
				case 537:
				case 539:
				case 540:
				case 541:
				case 542:
				case 543:
				case 544:
				case 545:
				case 546:
				case 547:
				case 548:
				case 549:
				case 550:
				case 551:
				case 552:
				case 553:
				case 554:
				case 555:
				case 556:
				case 557:
				case 559:
				case 560:
				case 561:
				case 562:
				case 563:
				case 564:
				case 565:
				case 566:
				case 567:
				case 568:
				case 569:
				case 572:
				case 573:
				case 574:
				case 575:
				case 576:
				case 577:
				case 578:
				case 579:
				case 580:
				case 581:
				case 583:
				case 584:
				case 585:
				case 586:
				case 587:
				case 588:
				case 589:
				case 590:
				case 591:
				case 592:
				case 593:
				case 594:
				case 595:
				case 596:
				case 597:
				case 598:
				case 599:
				case 600:
				case 601:
				case 602:
				case 603:
				case 604:
				case 605:
				case 606:
				case 608:
				case 609:
				case 610:
				case 611:
				case 612:
				case 613:
				case 614:
				case 615:
				case 617:
				case 618:
				case 619:
				case 620:
				case 621:
				case 622:
				case 623:
				case 624:
				case 625:
				case 626:
				case 627:
				case 628:
				case 629:
				case 630:
				case 631:
				case 632:
				case 633:
				case 634:
				case 635:
				case 636:
				case 637:
				case 639:
				case 640:
				case 641:
				case 642:
				case 643:
				case 645:
				case 646:
				case 647:
				case 648:
				case 649:
				case 650:
				case 651:
				case 652:
				case 653:
				case 654:
				case 655:
				case 656:
				case 657:
				case 658:
				case 659:
				case 660:
				case 661:
				case 662:
				case 664:
				case 665:
				case 666:
				case 668:
				case 669:
				case 670:
				case 671:
				case 672:
				case 673:
				case 674:
				case 675:
				case 676:
				case 677:
				case 678:
				case 679:
				case 680:
				case 681:
				case 682:
				case 683:
				case 684:
				case 685:
				case 686:
				case 687:
				case 688:
				case 689:
				case 690:
				case 691:
				case 692:
				case 693:
				case 694:
				case 695:
				case 696:
				case 698:
				case 699:
				case 700:
				case 701:
				case 702:
				case 703:
				case 704:
				case 705:
				case 706:
				case 707:
				case 708:
				case 709:
				case 710:
				case 711:
				case 712:
				case 713:
				case 714:
				case 715:
				case 716:
				case 718:
				case 719:
				case 720:
				case 721:
				case 722:
				case 723:
				case 724:
				case 725:
				case 726:
				case 727:
				case 728:
				case 729:
				case 730:
				case 731:
				case 732:
				case 733:
				case 734:
				case 736:
				case 737:
				case 738:
				case 739:
				case 740:
				case 741:
				case 742:
				case 743:
				case 746:
				case 747:
				case 748:
				case 749:
				case 750:
				case 751:
				case 752:
				case 753:
				case 754:
				case 757:
				case 758:
				case 759:
				case 760:
				case 761:
				case 762:
				case 763:
				case 764:
				case 765:
				case 766:
				case 767:
				case 768:
				case 769:
				case 770:
				case 771:
				case 772:
				case 773:
				case 774:
				case 775:
				case 776:
				case 777:
				case 778:
				case 779:
				case 780:
				case 781:
				case 782:
				case 783:
				case 784:
				case 785:
				case 787:
				case 788:
				case 789:
				case 790:
				case 791:
				case 792:
				case 793:
				case 794:
				case 795:
				case 796:
				case 797:
				case 798:
				case 799:
				case 800:
				case 801:
				case 802:
				case 803:
				case 806:
				case 807:
				case 808:
				case 810:
				case 811:
				case 812:
				case 813:
				case 815:
				case 816:
				case 817:
				case 818:
				case 819:
				case 820:
				case 821:
				case 822:
				case 824:
				case 825:
				case 826:
				case 827:
				case 828:
				case 829:
				case 830:
				case 831:
				case 832:
				case 833:
				case 834:
				case 835:
				case 836:
				case 837:
				case 838:
				case 840:
				case 841:
				case 843:
				case 844:
				case 845:
				case 846:
				case 847:
				case 848:
				case 849:
				case 850:
				case 851:
				case 852:
				case 853:
				case 854:
				case 855:
				case 856:
				case 857:
				case 858:
				case 859:
				case 860:
				case 861:
				case 862:
				case 863:
				case 864:
				case 865:
				case 867:
				case 868:
				case 869:
				case 870:
				case 871:
				case 872:
				case 873:
				case 875:
				case 876:
				case 877:
				case 878:
				case 880:
				case 881:
				case 882:
				case 883:
				case 884:
				case 885:
				case 886:
				case 888:
				case 889:
				case 890:
				case 891:
				case 892:
				case 893:
				case 894:
				case 895:
				case 896:
				case 897:
				case 899:
				case 900:
				case 901:
				case 902:
				case 903:
				case 904:
				case 905:
				case 906:
				case 907:
				case 908:
				case 909:
				case 910:
				case 911:
				case 912:
				case 913:
				case 914:
				case 915:
				case 916:
				case 917:
				case 918:
				case 919:
				case 920:
				case 921:
				case 922:
				case 923:
				case 924:
				case 925:
				case 926:
				case 927:
				case 928:
				case 929:
				case 930:
				case 931:
				case 932:
				case 933:
				case 934:
				case 935:
				case 936:
				case 937:
				case 938:
				case 939:
				case 940:
				case 941:
				case 942:
				case 944:
				case 945:
				case 946:
				case 947:
				case 948:
				case 949:
				case 950:
				case 951:
				case 952:
				case 953:
				case 954:
				case 955:
				case 956:
				case 957:
				case 958:
				case 959:
				case 960:
				case 961:
				case 962:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.IDENTIFIER;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 972: break;
				case 12:
				case 16:
				case 18:
				case 23:
				case 42:
				case 43:
				case 58:
				case 61:
				case 66:
				case 67:
				case 76:
				case 116:
				case 118:
				case 123:
				case 128:
				case 145:
				case 184:
				case 191:
				case 205:
				case 214:
				case 218:
				case 224:
				case 233:
				case 255:
				case 271:
				case 294:
				case 327:
				case 340:
				case 353:
				case 360:
				case 361:
				case 365:
				case 366:
				case 386:
				case 430:
				case 447:
				case 448:
				case 478:
				case 489:
				case 497:
				case 513:
				case 531:
				case 533:
				case 534:
				case 538:
				case 558:
				case 570:
				case 571:
				case 607:
				case 616:
				case 638:
				case 663:
				case 667:
				case 697:
				case 717:
				case 735:
				case 745:
				case 755:
				case 756:
				case 786:
				case 805:
				case 809:
				case 814:
				case 823:
				case 839:
				case 842:
				case 866:
				case 874:
				case 879:
				case 887:
				case 898:
				case 943:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.RESERVED_WORD;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 973: break;
				case 171:
				case 582:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.LITERAL_FLOAT;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 974: break;
				case 174:
				case 400:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.LITERAL_STRING;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 975: break;
				case 177:
				{
					nextState = COMMENT;
					commentBuffer.setLength(0);
					commentBuffer.append(yytext());
					commentNestCount = 1;
					commentStartLine = yyline;
					commentStartChar = yychar;
					yybegin(nextState);
				}
				case 976: break;
				case 168:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.COMMENT_END_OF_LINE;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 977: break;
				case 209:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.ERROR_BAD_BIT_STRING;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 978: break;
				case 1:
				case 37:
				{
					nextState = COMMENT;
					commentBuffer.append(yytext());
					yybegin(nextState);
				}
				case 979: break;
				case 0:
				case 29:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.WHITE_SPACE;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 980: break;
				case 30:
				{
					nextState = YYINITIAL;
					lastToken = SQLToken.LITERAL_INTEGER;
					String text = yytext();
					SQLToken t = (new SQLToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
					yybegin(nextState);
					return(t);
				}
				case 981: break;
				default:
					if (yy_input == YYEOF && yy_startRead == yy_currentPos)
					{
						yy_atEOF = true;
						switch (yy_lexical_state)
						{
							case COMMENT:
							{
								nextState = YYINITIAL;
								lastToken = SQLToken.ERROR_UNCLOSED_COMMENT;
								SQLToken t = (new SQLToken(lastToken,commentBuffer.toString(),commentStartLine,commentStartChar,commentStartChar+commentBuffer.length(),nextState));
								yybegin(nextState);
								return(t);
							}
							case 964: break;
							default:
								return null;
						}
					}
					else
					{
						yy_ScanError(YY_NO_MATCH);
					}
			}
		}
	}


}
