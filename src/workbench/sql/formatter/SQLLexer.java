/* The following code was generated by JFlex 1.3.5 on 18.10.11 20:58 */

/* SQLLexer.java is a generated file.  You probably want to
 * edit SQLLexer.lex to make changes.  Use JFlex to generate it.
 * To generate SQLLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main SQLLexer.lex</code><br>
 * You will then have a file called SQLLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package workbench.sql.formatter;

import java.io.*;
import workbench.util.CharSequenceReader;

/**
 * SQLLexer is a SQL language lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  SQLLexer shredder = new SQLLexer(System.in);
 *  SQLToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 *
 * @see SQLToken
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 18.10.11 20:58 from the specification file
 * <tt>file:/C:/Projects/sqlworkbench/scripts/../src/workbench/sql/formatter/SQLLexer.flex</tt>
 */
public class SQLLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\51\1\66\1\0\1\51\1\66\22\0\1\1\1\57\1\50"+
    "\1\46\1\37\1\47\1\41\1\52\1\62\1\64\1\54\1\63\1\53"+
    "\1\71\1\70\1\72\2\65\1\36\1\42\1\34\3\42\1\34\1\42"+
    "\2\53\1\61\1\60\1\55\1\41\1\0\1\2\1\14\1\13\1\24"+
    "\1\5\1\21\1\22\1\25\1\10\1\31\1\20\1\3\1\17\1\12"+
    "\1\11\1\16\1\35\1\6\1\7\1\4\1\23\1\26\1\30\1\32"+
    "\1\15\1\27\1\40\1\67\1\43\1\47\1\33\1\0\1\2\1\14"+
    "\1\13\1\24\1\5\1\21\1\22\1\25\1\10\1\31\1\20\1\3"+
    "\1\17\1\12\1\11\1\16\1\35\1\6\1\7\1\4\1\23\1\26"+
    "\1\30\1\32\1\15\1\27\1\44\1\56\1\45\1\47\uff81\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    59,   118,   177,   236,   295,   354,   413,   472,   531, 
      590,   649,   708,   767,   826,   885,   944,  1003,  1062,  1121, 
     1180,  1239,  1298,  1357,  1416,  1475,  1534,  1593,  1652,  1711, 
      118,  1770,  1770,  1770,  1829,  1888,  1947,  1947,  2006,  2065, 
     2124,  2183,  2242,  2301,  2360,  2419,  2478,  2537,  2596,  2655, 
     2714,  2773,  2832,  2891,  2950,  3009,  3068,  3127,  3186,  3245, 
     3304,  3363,   118,  3422,  3481,  3540,  3599,  3658,  3717,  3776, 
     3835,  3894,  3953,  4012,  4071,  4130,  4189,  4248,  4307,  4366, 
     4425,  4484,  4543,  4602,  4661,  4720,  4779,  4838,  4897,  4956, 
     5015,  5074,  5133,  5192,  5251,  5310,  5369,  5428,  5487,  5546, 
     5605,  5664,  5723,  5782,  5841,  5900,  5959,  6018,  6077,  6136, 
     6195,  6254,  6313,  6372,  6431,  6490,  6549,  6608,  6667,  6726, 
     6785,  6844,  6903,  6962,  7021,  7080,  7139,  7198,  7257,  7316, 
     7375,  7434,  7493,  7552,  7611,  7670,  7729,  7788,  7847,  7906, 
     7965,  8024,  8083,  8142,  8201,  8260,  8319,  8378,  8437,  8496, 
     8555,  8614,  8673,  8732,  8791,  8850,  1829,  1770,  1888,  1770, 
     8909,  8968,   118,  9027,  9086,  1770,  9145,  9204,  2478,  1770, 
     1770,  9263,  9322,  9381,  9440,  9499,  9558,  9617,  9676,  9735, 
     9794,  9853,  9912,  9971, 10030, 10089, 10148, 10207, 10266, 10325, 
    10384, 10443, 10502, 10561, 10620, 10679, 10738, 10797, 10856, 10915, 
    10974, 11033, 11092, 11151, 11210, 11269, 11328, 11387, 11446, 11505, 
    11564,  9853, 11623, 11682, 11741, 11800, 11859, 11918, 11977, 12036, 
    12095, 12154, 12213, 12272, 12331, 12390, 12449, 12508, 12567, 12626, 
    12685, 12744, 12803, 12862, 12921, 12980, 13039, 13098, 13157, 13216, 
    13275, 13334, 13393, 13452, 13511, 13570, 13629, 13688, 13747, 13806, 
    13865, 13924, 13983, 14042, 14101, 14160, 14219, 14278, 14337, 14396, 
    14455, 14514, 14573, 14632, 14691, 14750, 14809, 14868, 14927, 14986, 
    15045, 15104, 15163, 15222,  1770, 15281, 15340, 15399, 15458, 15517, 
    15576, 15635, 15694, 15753, 15812, 15871, 15930, 15989, 16048, 16107, 
    16166, 16225, 16284, 16343, 16402, 16461, 16520, 16579, 16638, 16697, 
    16756, 16815, 16874, 16933, 16992, 17051, 17110, 17169, 17228, 17287, 
    17346, 17405, 17464, 17523, 17582, 17641, 17700, 17759, 17818, 17877, 
    17936, 17995, 18054, 18113, 18172, 18231, 18290, 18349, 18408, 18467, 
    18526, 18585, 18644, 18703,  8909, 18762, 18821, 18880, 18939, 18998, 
    19057, 19116, 19175, 19234, 19293, 19352, 19411, 19470, 19529, 19588, 
    19647, 19706, 19765, 19824, 19883, 19942, 20001, 20060, 20119, 20178, 
    20237, 20296, 20355, 20414, 20473, 20532, 20591, 20650, 20709, 20768, 
    20827, 20886, 20945, 21004, 21063, 21122, 21181, 21240, 21299, 21358, 
    21417, 21476, 21535, 21594, 21653, 21712, 21771, 21830, 21889, 21948, 
    22007, 22066, 22125, 22184, 22243, 22302, 22361, 22420, 22479, 22538, 
    22597, 22656, 22715, 22774, 22833, 22892, 22951, 23010, 23069, 23128, 
    23187, 23246, 23305, 23364, 23423, 23482, 23541, 23600, 23659, 23718, 
    23777, 15163,  1770, 23836, 15104, 23895, 23954, 24013, 24072, 24131, 
    24190, 24249, 24308, 24367, 24426, 24485, 24544, 24603, 24662, 24721, 
    19116, 24780, 24839, 24898, 24957, 25016, 25075, 25134, 25193, 25252, 
    25311, 25370, 25429, 25488, 25547, 25606, 25665, 25724, 25783, 25842, 
    25901, 25960, 26019, 26078, 26137, 26196, 26255, 26314, 26373, 26432, 
    26491, 26550, 26609, 26668, 26727, 26786, 18467,  1770,   118, 26845, 
    18762,  1770, 26904, 26963, 27022, 27081, 27140, 27199, 27258, 27317, 
    27376, 27435, 27494, 27553, 27612, 27671, 27730, 27789, 27848, 27907, 
    27966, 28025, 28084, 28143, 28202, 28261, 28320, 28379, 28438, 28497, 
    28556, 28615, 28674, 28733, 28792, 28851, 28910, 28969, 29028, 29087, 
    29146, 29205, 29264, 29323, 29382, 29441, 29500, 29559, 29618, 29677, 
    29736, 28910, 29795, 29854, 29913, 29972, 30031, 30090, 30149, 30208, 
    30267, 20532, 30326, 30385, 30444, 30503, 30562, 30621, 30680, 30739, 
     2714, 30798, 30857, 30916, 30975, 31034, 31093, 31152, 31211, 31270, 
    31329, 31388, 31447, 31506, 31565, 31624, 31683, 31742, 31801, 31860, 
    31919, 31978, 32037, 32096, 32155, 32214, 32273, 32332, 32391, 32450, 
    32509, 32568, 32627, 32686, 32745, 32804, 32863, 32922, 32981, 33040, 
    33099, 33158, 33217, 33276, 33335, 33394, 33453, 33512, 33571, 33630, 
    33689, 33748, 33807, 33866, 33925, 33984, 34043, 34102, 34161, 34220, 
    34279, 34338, 34397, 34456, 34515, 34574, 34633, 34692, 34751, 34810, 
    34869, 34928, 34987, 35046, 35105, 35164, 35223, 35282, 35341, 35400, 
    35459, 35518, 35577, 35636, 35695, 35754, 35813, 35872, 35931, 35990, 
    36049, 36108, 36167, 36226, 36285, 36344, 36403, 36462, 36521, 36580, 
    36639, 36698, 36757, 36816, 36875, 36934, 36993, 37052, 37111, 37170, 
    37229, 19470, 37288,  1770,  5133, 37347, 37406, 37465, 37524, 37583, 
    37642, 37701, 37760, 37819, 37878, 37937, 37996, 38055, 38114, 38173, 
    38232, 38291, 38350, 38409, 38468, 38527, 38586, 38645, 38704, 38763, 
    38822, 38881, 38940, 38999, 39058, 39117, 39176, 39235, 39294, 39353, 
    39412, 39471, 39530, 39589, 39648, 39707, 39766, 39825, 39884, 39943, 
    40002, 40061, 40120, 40179, 40238, 40297, 40356, 40415, 40474, 40533, 
    40592, 40651, 40710, 40769, 40828, 40887, 40946, 41005, 41064, 41123, 
    41182, 41241, 41300, 41359, 41418, 41477, 41536, 41595, 41654, 41713, 
    41772, 41831, 41890, 41949, 42008, 42067, 42126, 42185, 42244, 42303, 
    42362, 42421, 42480, 42539, 42598, 42657, 42716, 42775, 42834, 42893, 
    42952, 43011, 43070, 43129, 43188, 43247, 43306, 43365, 43424, 43483, 
    43542, 43601, 43660, 43719, 43778, 43837, 43896, 43955, 44014, 44073, 
    44132, 44191, 44250, 44309, 44368, 44427, 44486, 44545, 44604, 44663, 
    44722, 44781, 44840, 44899, 44958
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\3\1\35\1\3\1\35\1\36\1\37"+
    "\1\40\1\35\1\41\2\3\1\42\1\40\1\43\1\4"+
    "\1\44\1\41\1\45\1\46\1\47\1\46\1\50\1\51"+
    "\1\52\1\40\1\41\1\35\1\4\1\3\1\53\1\54"+
    "\1\55\54\56\1\57\15\56\1\60\1\3\1\0\36\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\3\0\1\4\47\0\1\4\14\0\1\4\4\0\1\3"+
    "\1\0\1\3\1\61\2\3\1\62\1\63\2\3\1\64"+
    "\6\3\1\65\1\66\15\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\67"+
    "\2\3\1\70\2\3\1\71\1\72\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\73\2\3\1\74\1\75\1\3\1\76\1\77"+
    "\3\3\1\100\7\3\1\101\12\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\3\1\102\3\3\1\103\2\3\1\104\13\3\1\105"+
    "\3\3\1\106\5\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\107"+
    "\2\3\1\110\1\111\11\3\1\112\14\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\113\1\3\1\114\1\115\2\3\1\116\1\3"+
    "\1\117\1\120\1\3\1\121\1\3\1\122\3\3\1\123"+
    "\1\3\1\124\12\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\125"+
    "\2\3\1\126\2\3\1\127\4\3\1\130\1\3\1\131"+
    "\1\132\1\3\1\133\13\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\134\3\3\1\135\1\3\1\136\1\3\1\137\2\3"+
    "\1\77\1\3\1\140\2\3\1\141\1\3\1\142\7\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\143\2\3\1\144\3\3\1\145"+
    "\1\3\1\146\7\3\1\147\2\3\1\150\11\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\151\1\152\2\3\1\153\2\3\1\154"+
    "\3\3\1\155\5\3\1\156\1\3\1\157\12\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\160\1\3\1\161\2\3\1\162"+
    "\1\163\26\3\2\0\5\3\3\0\1\164\3\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\165\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\166\3\3\1\167"+
    "\14\3\1\170\14\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\171\2\3"+
    "\1\172\2\3\1\173\1\174\26\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\175\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\176\1\177"+
    "\2\3\1\200\1\3\1\201\1\202\11\3\1\203\14\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\204\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\5\3\1\205\2\3\1\206\3\3\1\207\21\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\210\2\3\1\211\1\212\1\3"+
    "\1\213\1\214\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\215\6\3"+
    "\1\216\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\217\2\3\1\220"+
    "\2\3\1\221\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\7\3\1\222"+
    "\26\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\223\1\3\1\224"+
    "\1\225\2\3\1\226\10\3\1\227\12\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\230\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\7\0\1\231\26\0\1\35"+
    "\1\0\1\35\3\0\1\35\22\0\1\35\2\0\1\232"+
    "\2\0\1\3\1\0\36\3\1\233\1\0\2\3\1\234"+
    "\2\3\7\0\1\3\6\0\1\3\1\0\2\3\75\0"+
    "\50\235\1\236\2\0\1\235\2\0\3\235\1\0\4\235"+
    "\1\0\4\235\52\237\1\240\13\237\1\241\1\242\3\237"+
    "\60\0\1\40\12\0\1\3\1\0\36\3\2\0\5\3"+
    "\7\0\1\243\6\0\1\3\1\0\2\3\56\0\1\40"+
    "\73\0\1\40\2\0\1\40\75\0\1\244\43\0\1\232"+
    "\1\0\1\232\3\0\1\232\22\0\1\232\76\0\1\245"+
    "\55\0\1\246\16\0\54\56\1\247\15\56\1\250\54\56"+
    "\1\251\15\56\1\252\54\56\1\253\15\56\1\250\1\3"+
    "\1\0\1\3\1\77\1\254\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\255\31\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\11\3\1\77"+
    "\24\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\256\12\3\1\77\6\3"+
    "\1\77\13\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\257\33\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\20\3\1\260\15\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\261\1\3\1\262\1\263\2\3\1\264"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\265\4\3\1\266\2\3"+
    "\1\267\6\3\1\270\16\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\15\3"+
    "\1\271\1\272\17\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\273\10\3"+
    "\1\274\14\3\1\257\7\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\12\3"+
    "\1\112\23\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\15\3\1\275\20\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\276\5\3\1\277\12\3\1\300"+
    "\14\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\15\3\1\301\20\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\14\3\1\302\21\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\303\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\5\3\1\272"+
    "\30\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\11\3\1\304\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\11\3\1\305\10\3\1\77\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\3\3\1\306\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\2\3\1\307\3\3\1\310\2\3\1\311\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\312\1\3\1\313\2\3\1\314\2\3"+
    "\1\315\1\316\2\3\1\317\2\3\1\320\4\3\1\321"+
    "\11\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\20\3\1\322\15\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\323\24\3\1\324\7\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\272\34\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\24\3\1\325\11\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\326\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\327\1\330\1\77\1\3\1\331"+
    "\1\332\3\3\1\333\21\3\1\334\2\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\15\3\1\335\20\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\336"+
    "\35\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\337\16\3\1\340"+
    "\12\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\5\3\1\341\2\3\1\342"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\343\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\12\3\1\344\2\3\1\77\20\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\345\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\346"+
    "\32\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\347\7\3\1\350\26\3\2\0"+
    "\5\3\2\0\1\347\4\0\1\3\6\0\1\3\1\347"+
    "\2\3\2\0\1\3\1\0\2\3\1\351\2\3\1\352"+
    "\1\353\1\3\1\354\3\3\1\355\5\3\1\356\13\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\15\3\1\357\20\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\360\36\3\2\0\5\3\2\0\1\360\4\0\1\3"+
    "\6\0\1\3\1\360\2\3\2\0\1\3\1\0\10\3"+
    "\1\361\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\362\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\22\3\1\363\13\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\3\1\175\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\27\3"+
    "\1\330\6\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\364\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\365\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\366\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\257\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\367\12\3"+
    "\1\370\20\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\30\3\1\263\5\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\77\5\3\1\272\15\3"+
    "\1\77\7\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\160\21\3"+
    "\1\165\12\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\371\13\3"+
    "\1\372\20\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\373\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\374\1\375\30\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\376\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\377\3\3\1\u0100\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\u0101"+
    "\1\u0102\2\3\1\u0103\3\3\1\u0104\4\3\1\u0105\3\3"+
    "\1\u0106\14\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\11\3\1\112\24\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\u0107\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u0108\2\3\1\u0109\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\7\3\1\u010a\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u010b"+
    "\14\3\1\361\16\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u010c"+
    "\5\3\1\u010d\7\3\1\u010e\15\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\7\3\1\u010f\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\52\u0110\1\u0111\12\u0110\1\u0112"+
    "\1\u0113\1\u0114\3\u0110\1\3\1\0\1\u0115\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u0116\4\3\1\u0117\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\6\3\1\u0118\1\u0119\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\12\3\1\u011a\23\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\2\3"+
    "\1\u011b\11\3\1\77\13\3\1\u011c\5\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\262\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\u011d\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\10\3\1\u011e\11\3"+
    "\1\u011f\13\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\13\3\1\77\22\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\102\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u0120\6\3\1\u0121\26\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\7\3\1\u0122\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u0123"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u0124\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\u0125\6\3\1\u0126\25\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u0106\6\3\1\u0127\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\262\2\3\1\u0115\2\3\1\u0128\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u0129\3\3\1\u012a\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\14\3\1\257\5\3\1\u012b\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u012c\10\3\1\77\22\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\3\1\u012d\3\3\1\u012e\2\3\1\u012f"+
    "\1\u0130\2\3\1\u011e\2\3\1\u0131\16\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\u0132\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\5\3"+
    "\1\u0133\30\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\15\3\1\u0134\3\3"+
    "\1\73\14\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\24\3\1\u0135\11\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\21\3\1\u0115\14\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\3\1\u0136\2\3\1\u0137\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\u0138\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u0139\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\10\3\1\272\25\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u013a\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u013b\5\3\1\u013c\25\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\u013d\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\3"+
    "\1\u013e\1\3\1\u013f\1\u0140\1\u0141\1\u0142\2\3\1\u0143"+
    "\5\3\1\u0144\1\u0145\1\3\1\u0146\1\3\1\u0147\3\3"+
    "\1\u0148\5\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0149\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\303\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\65\0\1\u014a"+
    "\5\0\1\u014a\6\0\1\231\26\0\1\232\1\0\1\232"+
    "\3\0\1\232\22\0\1\232\7\0\35\u014b\2\0\1\u014c"+
    "\1\u014b\22\0\1\u014b\5\0\1\3\1\0\35\u014d\1\3"+
    "\1\0\1\u014e\1\u014d\4\3\7\0\1\3\6\0\1\u014d"+
    "\1\0\2\3\2\0\52\u014f\1\240\20\u014f\52\237\1\u0150"+
    "\13\237\1\241\1\242\3\237\64\0\1\40\6\0\66\245"+
    "\1\0\4\245\54\56\1\247\15\56\1\0\54\56\1\0"+
    "\15\56\1\250\1\3\1\0\3\3\1\u0151\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\175\35\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\3"+
    "\1\u0152\34\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0115\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\u0153\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0154\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\20\3"+
    "\1\272\15\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\77\33\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\20\3\1\u0155\15\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\22\3\1\u0135\13\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\5\3"+
    "\1\77\30\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\20\3\1\u011e\15\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\u0156\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\6\3\1\263\27\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\77\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\22\3\1\77\13\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u0157\15\3\1\77\17\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\14\3\1\u0158\21\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\10\3\1\u0159\25\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\15\3\1\77"+
    "\2\3\1\u015a\15\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\77"+
    "\4\3\1\u015b\25\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\u015c"+
    "\32\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\3\3\1\u015d\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\10\3\1\77\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\u015e\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\u015f\2\3"+
    "\1\265\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\175\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\u0160\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\5\3\1\u0161\30\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u0162\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\77\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\21\3\1\u0163\14\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u0164\1\263\15\3\1\u0165\14\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u0166\35\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u0167\14\3\1\u0168\14\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\3"+
    "\1\u0169\1\3\1\u016a\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u016b\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\7\3\1\u016c\26\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\23\3\1\270\12\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\3\1\u016d\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u016e\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\u016f\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\u0170\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0171\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u0172\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\5\3\1\u0173\30\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\7\3\1\u0174\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\21\3\1\u0175\14\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u0176\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\14\3\1\u0177\21\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\7\3\1\u0178\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0179\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\2\3"+
    "\1\u017a\17\3\1\u012b\13\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\7\3"+
    "\1\u017b\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\u017c\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\5\3\1\u017d\30\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\272\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u012b\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\3\0\1\347\10\0\1\u017e\36\0\1\347"+
    "\14\0\1\347\4\0\1\3\1\0\1\3\1\u017f\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u0180\3\3\1\77\22\3"+
    "\1\77\3\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0181\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\u0182\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0183\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\21\3"+
    "\1\263\14\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0184\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u0185\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\3\0\1\360"+
    "\3\0\1\u0186\4\0\1\u0187\36\0\1\360\14\0\1\360"+
    "\4\0\1\3\1\0\7\3\1\345\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\10\3\1\u0188\25\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u0189\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\u018a\3\3"+
    "\1\77\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0183\10\3"+
    "\1\355\21\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\u018b\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u018c\12\3\1\u018d\14\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\266\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\3\1\u018e\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\u018f\6\3\1\257\23\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u0190\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\22\3\1\u0191\13\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\2\77\5\3\1\u0192\24\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\5\3\1\272\4\3\1\77\23\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u0193\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\5\3\1\u0194\30\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\3\1\u0195"+
    "\34\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\u0196\17\3\1\u0197"+
    "\14\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u0198\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u0199\2\3\1\u019a\2\3\1\u019b"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\15\3\1\u019c\20\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\10\3\1\263\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\u019d\1\u019e\30\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u019f\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\11\3\1\u01a0\24\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\12\3\1\77\23\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\26\3\1\u01a1\7\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\15\3"+
    "\1\u01a2\6\3\1\165\4\3\1\u01a3\4\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\306\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\6\3\1\u0106"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\u01a4\34\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\52\u0110\1\u0111\12\u0110\1\u01a5\1\u0113\1\u0114\3\u0110\52\u01a6"+
    "\1\u0111\12\u01a6\2\0\4\u01a6\52\u01a5\1\u01a7\12\u01a5\1\u0112"+
    "\1\u0113\1\u01a8\3\u01a5\52\u0110\1\u01a9\12\u0110\1\u01a5\1\u0113"+
    "\1\u0114\3\u0110\1\3\1\0\4\3\1\77\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u01aa\1\3\1\u01ab\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\16\3\1\u01ac\17\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\15\3"+
    "\1\u01ad\6\3\1\u01ae\11\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\11\3"+
    "\1\u01af\24\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\u01b0\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u01b1\5\3\1\u01b2\24\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\24\3\1\u01b3\11\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\21\3\1\u01b4\2\3\1\u01b3\11\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u01b2\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\3\3"+
    "\1\77\2\3\1\u01b5\12\3\1\112\14\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\5\3\1\u01b6\30\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\263"+
    "\35\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\15\3\1\77\20\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\5\3\1\263\30\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u01b7\22\3\1\u01b8\7\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\3\1\u01b9\34\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\11\3\1\u01ba"+
    "\24\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\21\3\1\u01bb\14\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\10\3\1\u01bc\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\6\3\1\312\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\7\3\1\u01bd"+
    "\23\3\1\u01be\2\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u013a\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u01bf\2\3\1\77\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\3\3\1\u013a\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\11\3\1\u01c0\24\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\5\3\1\u01c1"+
    "\30\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\124\4\3\1\u01c2"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u01c3\2\3\1\u01c4\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\14\3\1\77\21\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u01c5\6\3\1\u01c6\24\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\230\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\6\3\1\u0128"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\273\12\3\1\370"+
    "\14\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\u01c7\2\3\1\u01c8"+
    "\24\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\5\3\1\u01c9\4\3\1\u01ca"+
    "\23\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\26\3\1\77\7\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\272\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\23\3\1\u01cb\12\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\22\3\1\u01cc"+
    "\13\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\16\3\1\77\17\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\6\3\1\u01cd\1\u01ce\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\10\3\1\u01cf\17\3\1\u01d0\5\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u01d1\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\2\3"+
    "\1\u01d2\1\u01d3\5\3\1\u01d4\24\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\10\3\1\u01d5\4\3\1\u01d1\20\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\7\3\1\u01d6\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\u01d7"+
    "\32\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u01d8\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u01d9\2\3\1\u01da\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u01db\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\5\3\1\u0165"+
    "\30\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\272\3\3\1\u01dc"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\36\0\1\u01dd\1\0\1\u01dd\3\0\1\u01dd\22\0"+
    "\1\u01dd\7\0\35\u014b\3\0\1\u014b\1\u01de\21\0\1\u014b"+
    "\7\0\35\u014b\3\0\1\u014b\22\0\1\u014b\5\0\1\3"+
    "\1\0\35\u014d\1\3\2\0\1\u014d\2\3\1\u01df\1\3"+
    "\7\0\1\3\6\0\1\u014d\1\0\2\3\4\0\35\u01e0"+
    "\3\0\1\u01e0\22\0\1\u01e0\5\0\52\u01e1\1\0\13\u01e1"+
    "\1\u01e2\1\u01e3\3\u01e1\1\3\1\0\4\3\1\u01e4\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\13\3\1\u01e5\22\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u01e6\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u01e7\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\21\3\1\u01e8\14\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\u01e9\36\3\2\0\5\3\2\0\1\u01e9"+
    "\4\0\1\3\6\0\1\3\1\u01e9\2\3\2\0\1\3"+
    "\1\0\1\3\1\u01ea\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\7\3"+
    "\1\u01eb\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\5\3\1\u01ec\30\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\20\3\1\257\15\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\11\3\1\u012b\24\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\5\3"+
    "\1\u01ed\30\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\u01ee\36\3\2\0\5\3"+
    "\2\0\1\u01ee\4\0\1\3\6\0\1\3\1\u01ee\2\3"+
    "\2\0\1\3\1\0\14\3\1\272\21\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\13\3\1\u01ef\22\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\u0171"+
    "\35\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\2\3\1\266\33\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\14\3\1\263\21\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\u01f0\31\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u01f1"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\263\34\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\15\3\1\272\20\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u012b\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u01f2"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u01f3\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u01f4\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u01f5"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\16\3\1\272\17\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\12\3\1\u01f6\23\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\14\3\1\u01f7\21\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u01f8"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\11\3\1\u01b2\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\11\3\1\263\24\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\u01f9\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\6\3\1\u01fa\27\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\10\3\1\273\25\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u01fb\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\3"+
    "\1\165\34\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\5\3\1\u01fc\30\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\312\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\15\3\1\u01fd\20\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u01fe\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\10\3\1\u01ff\25\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\u010e\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u0200\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\13\0\1\u0201\11\0\1\u0202"+
    "\47\0\1\3\1\0\1\u01ba\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\u0203\13\3\1\257\15\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\263\31\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\6\3\1\u0204"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u0205\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\30\3\1\77\5\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\22\3\1\u0206\13\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\34\0\1\u0207\51\0\1\u0208\61\0"+
    "\1\3\1\0\2\3\1\u0209\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\u020a\31\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u020b\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\u020c\2\3\1\u020d\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\7\3\1\u020e\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\u020f\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\73"+
    "\4\3\1\77\30\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u01b0"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\11\3\1\u0210\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\6\3\1\u0211\27\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\u0212\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\u0213\33\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\5\3\1\u0214\30\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0215\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\u0216"+
    "\35\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\15\3\1\303\20\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\3\3\1\u0217\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\u0218\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\u0219\33\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u021a\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u0106\2\3\1\263\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\3\3\1\u021b\32\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\7\3"+
    "\1\u021c\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\u021d\30\3\1\u01a3"+
    "\4\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\16\3\1\u021e\17\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\3\3\1\101\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\u0132\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\u021f\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u0220\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\52\u01a5"+
    "\1\0\13\u01a5\1\u0113\1\u01a8\71\u01a5\1\u0113\1\u01a8\3\u01a5"+
    "\1\3\1\0\15\3\1\u0221\20\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\6\3\1\u0222\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u0223\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u0224\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\6\3\1\u0225\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\3\3\1\u0226"+
    "\32\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\u0227\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u0228\31\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\23\3\1\77\12\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u0229\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\272\2\3\1\77\30\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\17\3\1\u022a\16\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\23\3\1\u022b\12\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u022c\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\u022d\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u01c9\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\14\3\1\u022e\21\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\20\3\1\77"+
    "\15\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\10\3\1\u022f\25\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\21\3\1\272\14\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\12\3\1\u0230\23\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u0231"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\3\3\1\u0232\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\15\3\1\u01e7\20\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\21\3\1\u0165\14\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u0233"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\u0234\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\7\3\1\u0235\26\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\73\35\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\23\3\1\u0236\12\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u0237\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\102\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\7\3"+
    "\1\355\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\7\3\1\u0139\26\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\5\3\1\u0238\30\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u0239\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u023a\21\3"+
    "\1\u023b\13\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0227\10\3"+
    "\1\u023c\21\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\14\3\1\u023c\21\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u023d\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\3\1\u023e\34\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\23\3\1\u023f"+
    "\12\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\11\3\1\u0240\24\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\10\3\1\u0241\3\3\1\175\21\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\3\3\1\u0242\32\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u0243\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u0244"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\17\3\1\u0245\16\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u0246\31\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u0247\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\4\0\35\u01e0\3\0\1\u01e0\2\0"+
    "\1\u01de\17\0\1\u01e0\5\0\66\u01e1\1\u01e2\1\u01e3\3\u01e1"+
    "\1\3\1\u0248\36\3\2\0\5\3\2\0\1\u0248\4\0"+
    "\1\3\6\0\1\3\1\u0248\2\3\2\0\1\3\1\0"+
    "\25\3\1\272\10\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\20\3\1\u012b"+
    "\15\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\312\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\262\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\3\0\1\u01e9\7\0\1\u0249\17\0"+
    "\1\u024a\17\0\1\u01e9\14\0\1\u01e9\4\0\1\3\1\0"+
    "\2\3\1\u024b\33\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u010d"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u0126\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u024c\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\3\0\1\u01ee\12\0\1\u024d"+
    "\34\0\1\u01ee\14\0\1\u01ee\4\0\1\3\1\0\14\3"+
    "\1\u024e\21\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\10\3\1\324\25\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u0171\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\5\3\1\u024f\30\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\11\3"+
    "\1\272\24\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\2\3\1\u01c7\33\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u0250\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u0251\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\7\3\1\u010e"+
    "\26\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\u0252\36\3\2\0\5\3\2\0"+
    "\1\u0252\4\0\1\3\6\0\1\3\1\u0252\2\3\2\0"+
    "\1\3\1\0\1\3\1\u0253\34\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\7\3\1\u0254\26\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\10\3\1\u01f3"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\23\3\1\u0255\12\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\77\35\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\15\3"+
    "\1\u0256\20\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\13\3\1\u0122\22\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\4\3\1\u0135\31\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\6\0\1\u0257"+
    "\71\0\1\u0258\67\0\1\3\1\0\5\3\1\330\16\3"+
    "\1\u01e7\11\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\u0259\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\u025a\36\3\2\0\5\3\2\0\1\u025a\4\0"+
    "\1\3\6\0\1\3\1\u025a\2\3\2\0\1\3\1\0"+
    "\6\3\1\u012b\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\12\0\1\u025b\66\0\1\u025c\66\0"+
    "\1\3\1\0\6\3\1\u025d\27\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\u025e"+
    "\36\3\2\0\5\3\2\0\1\u025e\4\0\1\3\6\0"+
    "\1\3\1\u025e\2\3\2\0\1\3\1\0\2\3\1\u025f"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u0260\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\6\3\1\265\27\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\u01e7\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\u0261\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\23\3\1\165\12\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\10\3\1\u0262\25\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\22\3\1\272"+
    "\13\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\3\3\1\u0263\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\5\3\1\u01f3\30\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\2\3\1\u0264\33\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\5\3\1\u0265"+
    "\30\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\u0266\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u0267\31\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\11\3\1\u0268\24\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\10\3\1\u0269"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u026a\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\11\3\1\u026b\24\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u026c\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\303\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u026d\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u026e\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\20\3"+
    "\1\302\15\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\4\3\1\u026f\31\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\u0270\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\22\3\1\u0271\13\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u0272\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\3\1\u01be\34\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\370\4\3\1\77\22\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\12\3\1\u0273\23\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\20\3\1\u0274\15\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\273\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\u025e\6\3\1\u0128\27\3"+
    "\2\0\5\3\2\0\1\u025e\4\0\1\3\6\0\1\3"+
    "\1\u025e\2\3\2\0\1\3\1\u0275\36\3\2\0\5\3"+
    "\2\0\1\u0275\4\0\1\3\6\0\1\3\1\u0275\2\3"+
    "\2\0\1\3\1\0\1\102\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\6\3\1\u0276\27\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\31\3\1\u0277"+
    "\4\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\4\3\1\u0278\31\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\10\3\1\u0279\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\10\3\1\u027a\25\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u027b\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\7\3\1\303\26\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u027c\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\22\3"+
    "\1\u027d\13\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\12\3\1\u027e\23\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\12\3\1\u027f\23\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\u0181\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\4\3"+
    "\1\u0280\31\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0281\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u0282\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\3\1\u0283\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\17\3"+
    "\1\u0284\16\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\22\3\1\u016d\13\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\14\3\1\u0285\21\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u0286\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\6\3\1\u0287"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\u0288\20\3\1\u0289"+
    "\13\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\24\3\1\257\11\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\3\0"+
    "\1\u0248\5\0\1\u028a\41\0\1\u0248\14\0\1\u0248\27\0"+
    "\1\u028b\60\0\1\u028c\61\0\1\3\1\0\6\3\1\76"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u028d\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\13\0\1\u028e"+
    "\61\0\1\3\1\0\2\3\1\u028f\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\6\3\1\u0290\27\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\u0291\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\11\3\1\u013d\24\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\3\0\1\u0252\26\0\1\u0292\20\0\1\u0252\14\0\1\u0252"+
    "\4\0\1\3\1\0\6\3\1\u0293\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\10\3\1\u0294\25\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\7\3"+
    "\1\u0295\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u0296\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\3\0\1\u0297\47\0\1\u0297\14\0\1\u0297\7\0\1\u0298"+
    "\67\0\1\3\1\0\1\3\1\u0299\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\3\0\1\u025a"+
    "\27\0\1\u024a\17\0\1\u025a\14\0\1\u025a\13\0\1\u029a"+
    "\64\0\1\u029b\47\0\1\u029b\14\0\1\u029b\4\0\1\3"+
    "\1\0\2\3\1\175\33\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\3\0\1\u025e\12\0\1\u029c"+
    "\34\0\1\u025e\14\0\1\u025e\4\0\1\3\1\0\7\3"+
    "\1\u0115\26\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\13\3\1\77\1\266"+
    "\21\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\3\1\u0205\34\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u029d\35\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\u029e\21\3"+
    "\1\u029f\14\3\2\0\5\3\2\0\1\u029e\4\0\1\3"+
    "\6\0\1\3\1\u029e\2\3\2\0\1\3\1\0\3\3"+
    "\1\77\2\3\1\u0237\27\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\14\3"+
    "\1\u02a0\21\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\10\3\1\266\25\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\u02a1\35\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\2\3\1\u02a2\33\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u02a3"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\31\3\1\u02a4\4\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u02a5\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\10\3\1\267\25\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\2\3\1\u02a6"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\u02a7\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\13\3\1\u02a8\22\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u02a9\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\21\3\1\345"+
    "\14\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\1\u02aa\35\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\1\u02ab\35\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\10\3\1\u02ac"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\3\0\1\u0275\1\u0202\46\0\1\u0275\14\0\1\u0275"+
    "\4\0\1\3\1\0\12\3\1\272\23\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\u02ad\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\1\73"+
    "\2\3\1\273\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\11\3\1\u02ae"+
    "\24\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\10\3\1\330\25\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u02af\31\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\11\3\1\u0121\2\3\1\u02b0\5\3\1\u010a\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\14\3\1\u02b1\21\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\1\3\1\u02b2\34\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u02b3\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\2\3\1\u023b\33\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\11\3\1\u02b4\24\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\15\3"+
    "\1\u0244\20\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\21\3\1\u0212\14\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u02b5\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\5\3\1\u02b6\14\3\1\u02b7\13\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\22\3\1\u02b8\13\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\u02b9\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\6\3\1\u0123\27\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u02ba\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\7\0\1\u02bb"+
    "\71\0\1\u02bc\76\0\1\u02bd\62\0\1\3\1\0\15\3"+
    "\1\u0132\20\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\26\0\1\u029c\46\0\1\3\1\0\3\3"+
    "\1\273\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\24\3\1\272\11\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\11\3\1\u02be\24\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\12\0\1\u02bf"+
    "\62\0\1\3\1\0\25\3\1\u01c7\10\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\31\3\1\u02c0\4\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\2\3"+
    "\1\u02c1\33\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\3\0\1\u0297\10\0\1\u02c2\36\0\1\u0297"+
    "\14\0\1\u0297\10\0\1\u02c3\67\0\1\u029b\3\0\1\u0186"+
    "\43\0\1\u029b\14\0\1\u029b\21\0\1\u0298\55\0\1\3"+
    "\1\0\1\3\1\u0209\34\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\3\0\1\u029e\7\0\1\u02c4"+
    "\37\0\1\u029e\14\0\1\u029e\4\0\1\3\1\0\5\3"+
    "\1\257\30\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\7\3\1\u02c5\26\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\6\3\1\u02c6\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\u025e\6\3\1\u0237\27\3\2\0\5\3\2\0\1\u025e"+
    "\4\0\1\3\6\0\1\3\1\u025e\2\3\2\0\1\3"+
    "\1\0\31\3\1\u02c7\4\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\10\3"+
    "\1\315\25\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u02c8\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\3\3\1\u02c9\32\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\7\3\1\u02ca\26\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\u02cb\36\3"+
    "\2\0\5\3\2\0\1\u02cb\4\0\1\3\6\0\1\3"+
    "\1\u02cb\2\3\2\0\1\3\1\0\20\3\1\370\15\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\u02cc\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\11\3\1\u02cd\24\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\u02ce\36\3"+
    "\2\0\5\3\2\0\1\u02ce\4\0\1\3\6\0\1\3"+
    "\1\u02ce\2\3\2\0\1\3\1\0\1\u02cf\35\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u02d0\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\34\3\1\77\1\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u02d1"+
    "\11\3\1\u02d2\17\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\16\3\1\u02d3"+
    "\17\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\3\3\1\u02d4\32\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u0170\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\2\3\1\u02d5\33\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\4\3\1\u0122"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\7\3\1\u02d6\26\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\1\u02d7\35\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\6\3"+
    "\1\u02d8\27\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\2\0\1\3\1\0\3\3\1\u02d9\32\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\u012d\15\3\1\u02da\16\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\11\0\1\u02db\70\0\1\u02dc\77\0\1\u0298\60\0\1\3"+
    "\1\0\3\3\1\266\2\3\1\u0128\27\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\6\0\1\u02dd"+
    "\66\0\1\3\1\0\21\3\1\u029f\14\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\u02de\36\3\2\0\5\3\2\0\1\u02de\4\0\1\3"+
    "\6\0\1\3\1\u02de\2\3\25\0\1\u0202\56\0\1\u0298"+
    "\71\0\1\u02df\64\0\1\3\1\0\10\3\1\265\25\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\10\3\1\u02e0\25\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\2\3\1\u024b\16\3\1\u029f\1\u012b\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\4\3\1\u02e1\31\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\4\3\1\324\31\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\10\3\1\u020a"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\3\0\1\u02cb\16\0\1\u02e2\30\0\1\u02cb\14\0"+
    "\1\u02cb\4\0\1\3\1\0\6\3\1\u02e3\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\16\3\1\u02e4\17\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\3\0\1\u02ce\16\0"+
    "\1\u02e2\3\0\1\u02e5\24\0\1\u02ce\14\0\1\u02ce\4\0"+
    "\1\3\1\0\10\3\1\u013d\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\u02e6"+
    "\36\3\2\0\5\3\2\0\1\u02e6\4\0\1\3\6\0"+
    "\1\3\1\u02e6\2\3\2\0\1\3\1\0\7\3\1\u02e7"+
    "\26\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\22\3\1\u02e8\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\15\3\1\u01a2\20\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\26\3\1\u02e9\7\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\12\3\1\u02ea"+
    "\23\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\21\3\1\u02eb\14\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\0\2\3\1\u01fd\33\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\17\3\1\u02ec\16\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\14\3\1\u013d"+
    "\21\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\0\6\3\1\222\27\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\11\0"+
    "\1\u02ed\71\0\1\u02ee\111\0\1\u0298\46\0\1\u02de\1\0"+
    "\1\u02ef\45\0\1\u02de\14\0\1\u02de\5\0\1\u02f0\47\0"+
    "\1\u02f0\14\0\1\u02f0\4\0\1\3\1\0\2\3\1\324"+
    "\33\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\2\0\1\3\1\u02f1\36\3\2\0\5\3\2\0"+
    "\1\u02f1\4\0\1\3\6\0\1\3\1\u02f1\2\3\7\0"+
    "\1\u029c\65\0\1\3\1\0\25\3\1\u02f2\10\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\2\0"+
    "\1\3\1\u02f3\36\3\2\0\5\3\2\0\1\u02f3\4\0"+
    "\1\3\6\0\1\3\1\u02f3\2\3\4\0\1\u02f4\71\0"+
    "\1\u02e6\7\0\1\u02bd\37\0\1\u02e6\14\0\1\u02e6\4\0"+
    "\1\3\1\0\11\3\1\266\24\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\2\0\1\3\1\0"+
    "\3\3\1\u02ec\32\3\2\0\5\3\7\0\1\3\6\0"+
    "\1\3\1\0\2\3\2\0\1\3\1\0\1\u02f5\35\3"+
    "\2\0\5\3\7\0\1\3\6\0\1\3\1\0\2\3"+
    "\2\0\1\3\1\0\1\3\1\160\34\3\2\0\5\3"+
    "\7\0\1\3\6\0\1\3\1\0\2\3\2\0\1\3"+
    "\1\0\4\3\1\u01f3\31\3\2\0\5\3\7\0\1\3"+
    "\6\0\1\3\1\0\2\3\2\0\1\3\1\0\17\3"+
    "\1\77\16\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\12\0\1\u02f6\63\0\1\u025a\47\0\1\u025a"+
    "\14\0\1\u025a\15\0\1\u02f7\62\0\1\u02f0\4\0\1\u02f8"+
    "\42\0\1\u02f0\14\0\1\u02f0\5\0\1\u02f1\24\0\1\u02f9"+
    "\22\0\1\u02f1\14\0\1\u02f1\4\0\1\3\1\0\3\3"+
    "\1\u02fa\32\3\2\0\5\3\7\0\1\3\6\0\1\3"+
    "\1\0\2\3\3\0\1\u02f3\1\u02fb\46\0\1\u02f3\14\0"+
    "\1\u02f3\10\0\1\u02fc\66\0\1\3\1\0\4\3\1\u02fd"+
    "\31\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\13\0\1\u02bd\103\0\1\u0298\55\0\1\u02fe\67\0"+
    "\1\u02ff\70\0\1\3\1\0\22\3\1\u0300\13\3\2\0"+
    "\5\3\7\0\1\3\6\0\1\3\1\0\2\3\10\0"+
    "\1\u0301\66\0\1\u0302\70\0\1\3\1\0\10\3\1\u0303"+
    "\25\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\20\0\1\u0304\62\0\1\u0305\64\0\1\3\1\u0306"+
    "\36\3\2\0\5\3\2\0\1\u0306\4\0\1\3\6\0"+
    "\1\3\1\u0306\2\3\15\0\1\u0307\60\0\1\u0308\47\0"+
    "\1\u0308\14\0\1\u0308\4\0\1\3\1\0\6\3\1\u0309"+
    "\27\3\2\0\5\3\7\0\1\3\6\0\1\3\1\0"+
    "\2\3\5\0\1\u030a\104\0\1\u030b\56\0\1\u0306\24\0"+
    "\1\u030c\22\0\1\u0306\14\0\1\u0306\31\0\1\u030d\46\0"+
    "\1\u0308\26\0\1\u030e\20\0\1\u0308\14\0\1\u0308\4\0"+
    "\1\3\1\0\10\3\1\u030f\25\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\4\0\1\u0310\100\0"+
    "\1\u0311\72\0\1\u0312\72\0\1\u0313\70\0\1\u0314\64\0"+
    "\1\3\1\0\20\3\1\266\15\3\2\0\5\3\7\0"+
    "\1\3\6\0\1\3\1\0\2\3\15\0\1\u0315\71\0"+
    "\1\u02f7\65\0\1\u0316\113\0\1\u0315\46\0\1\u0317\75\0"+
    "\1\u0298\115\0\1\u0318\60\0\1\u0319\55\0\1\u02de\47\0"+
    "\1\u02de\14\0\1\u02de\22\0\1\u031a\61\0\1\u031b\73\0"+
    "\1\u0298\64\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  0,  9,  0,  9, 
     1,  0,  1,  0,  1,  9,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     1,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  0, 
     0,  9,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1,  0,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  0,  0,  1,  0,  0,  0,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  0,  1,  1, 
     1,  0,  1,  1,  1,  1,  0,  9,  1,  0,  0,  0,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  0,  1, 
     1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1, 
     1,  0,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  1,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  1, 
     0,  0,  1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	private int lastToken;
	private int nextState=YYINITIAL;
	private StringBuilder commentBuffer = new StringBuilder();
	private int commentNestCount = 0;
	private int commentStartChar = 0;

	/**
	 * next Token method that allows you to control if whitespace and comments are
	 * returned as tokens.
	 */
	public SQLToken getNextToken(boolean returnComments, boolean returnWhiteSpace)
	{
		try
		{
			SQLToken t = getNextToken();
			while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment())))
			{
				t = getNextToken();
			}
			return (t);
		}
		catch (Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}


  /*
	public SQLToken getNextToken()
		throws IOException
  {
    SQLToken t = _getNextToken();
    if (t != null) t.setKeywordHelper(keywordHelper);
    return t;
  }
	*/

	/**
	 * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).

	 * The lexical state is set to the initial state.
	 * Subsequent tokens read from the lexer will start with the line, char, and column
	 * values given here.
	 *
	 * @param reader The new input.
	 * @param yyline The line number of the first token.
	 * @param yychar The position (relative to the start of the stream) of the first token.
	 * @param yycolumn The position (relative to the line) of the first token.
	 * @throws IOException if an IOExecption occurs while switching readers.
	 */
	public void reset(java.io.Reader reader, int yychar, int yycolumn)
		throws IOException
	{
		yyreset(reader);
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}

	public SQLLexer(String source)
	{
	  this(new StringReader(source));
	}

	public SQLLexer(CharSequence source)
	{
	  this(new CharSequenceReader(source));
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[45017];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public SQLToken getNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 422: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.LITERAL_BIT_STRING;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 796: break;
        case 47: 
        case 169: 
          { 
    commentNestCount--;
    commentBuffer.append(yytext());
    if (commentNestCount == 0)
    {
        nextState = YYINITIAL;
        lastToken = SQLToken.COMMENT_TRADITIONAL;
        SQLToken t = (new SQLToken(lastToken,commentBuffer.toString(),commentStartChar,commentStartChar+commentBuffer.length(),nextState));
        yybegin(nextState);
        return(t);
    }
 }
        case 797: break;
        case 30: 
        case 32: 
        case 36: 
        case 41: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.SEPARATOR;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 798: break;
        case 2: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 29: 
        case 38: 
        case 48: 
        case 49: 
        case 51: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 155: 
        case 157: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 231: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 266: 
        case 268: 
        case 269: 
        case 270: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 285: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 292: 
        case 293: 
        case 294: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 332: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 342: 
        case 343: 
        case 344: 
        case 345: 
        case 346: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 363: 
        case 364: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 380: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 391: 
        case 392: 
        case 393: 
        case 395: 
        case 396: 
        case 398: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 408: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 415: 
        case 416: 
        case 417: 
        case 418: 
        case 419: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 447: 
        case 448: 
        case 449: 
        case 450: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 484: 
        case 485: 
        case 486: 
        case 487: 
        case 490: 
        case 491: 
        case 492: 
        case 494: 
        case 495: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 509: 
        case 510: 
        case 511: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 520: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 528: 
        case 529: 
        case 530: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 538: 
        case 539: 
        case 540: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 555: 
        case 556: 
        case 557: 
        case 559: 
        case 560: 
        case 561: 
        case 562: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 574: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 581: 
        case 582: 
        case 586: 
        case 587: 
        case 589: 
        case 590: 
        case 591: 
        case 592: 
        case 594: 
        case 595: 
        case 596: 
        case 597: 
        case 600: 
        case 604: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 611: 
        case 612: 
        case 613: 
        case 614: 
        case 615: 
        case 616: 
        case 618: 
        case 619: 
        case 620: 
        case 621: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 629: 
        case 630: 
        case 631: 
        case 632: 
        case 633: 
        case 634: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
        case 641: 
        case 642: 
        case 643: 
        case 644: 
        case 645: 
        case 646: 
        case 647: 
        case 648: 
        case 652: 
        case 654: 
        case 655: 
        case 656: 
        case 658: 
        case 660: 
        case 661: 
        case 664: 
        case 668: 
        case 670: 
        case 671: 
        case 672: 
        case 675: 
        case 676: 
        case 677: 
        case 678: 
        case 679: 
        case 680: 
        case 681: 
        case 682: 
        case 683: 
        case 684: 
        case 685: 
        case 687: 
        case 688: 
        case 689: 
        case 690: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 695: 
        case 696: 
        case 697: 
        case 701: 
        case 703: 
        case 708: 
        case 709: 
        case 710: 
        case 711: 
        case 712: 
        case 713: 
        case 715: 
        case 716: 
        case 718: 
        case 720: 
        case 721: 
        case 722: 
        case 723: 
        case 724: 
        case 725: 
        case 726: 
        case 727: 
        case 728: 
        case 735: 
        case 738: 
        case 739: 
        case 742: 
        case 743: 
        case 744: 
        case 745: 
        case 746: 
        case 747: 
        case 753: 
        case 756: 
        case 761: 
        case 764: 
        case 767: 
        case 770: 
        case 776: 
        case 782: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.IDENTIFIER;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 799: break;
        case 50: 
        case 62: 
        case 85: 
        case 86: 
        case 91: 
        case 92: 
        case 139: 
        case 211: 
        case 232: 
        case 244: 
        case 267: 
        case 283: 
        case 284: 
        case 286: 
        case 291: 
        case 341: 
        case 347: 
        case 348: 
        case 394: 
        case 397: 
        case 414: 
        case 446: 
        case 458: 
        case 475: 
        case 483: 
        case 489: 
        case 531: 
        case 541: 
        case 558: 
        case 610: 
        case 617: 
        case 635: 
        case 659: 
        case 663: 
        case 673: 
        case 674: 
        case 686: 
        case 704: 
        case 719: 
        case 729: 
        case 736: 
        case 791: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.RESERVED_WORD;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 800: break;
        case 153: 
        case 476: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.LITERAL_FLOAT;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 801: break;
        case 159: 
        case 335: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.LITERAL_STRING;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 802: break;
        case 170: 
          { 
    nextState = COMMENT;
    commentBuffer.append(yytext());
    commentNestCount++;
    yybegin(nextState);
 }
        case 803: break;
        case 28: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.LITERAL_INTEGER;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 804: break;
        case 165: 
          { 
    nextState = COMMENT;
    commentBuffer.setLength(0);
    commentBuffer.append(yytext());
    commentNestCount = 1;
    commentStartChar = yychar;
    yybegin(nextState);
 }
        case 805: break;
        case 272: 
        case 424: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.ERROR_UNCLOSED_BIT_STRING;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 806: break;
        case 477: 
        case 478: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.WB_VAR;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 807: break;
        case 33: 
        case 34: 
        case 35: 
        case 42: 
        case 46: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.ERROR;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 808: break;
        case 164: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.COMMENT_END_OF_LINE;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 809: break;
        case 274: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.ERROR_BAD_BIT_STRING;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 810: break;
        case 0: 
        case 3: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.WHITE_SPACE;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 811: break;
        case 160: 
        case 481: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.ERROR_UNCLOSED_STRING;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 812: break;
        case 1: 
        case 45: 
          { 
    nextState = COMMENT;
    commentBuffer.append(yytext());
    yybegin(nextState);
 }
        case 813: break;
        case 31: 
        case 37: 
        case 39: 
        case 40: 
        case 43: 
        case 44: 
        case 162: 
          { 
    nextState = YYINITIAL;
    lastToken = SQLToken.OPERATOR;
    String text = yytext();
    SQLToken t = (new SQLToken(lastToken,text,yychar,yychar+text.length(),nextState));
    yybegin(nextState);
    return(t);
 }
        case 814: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            switch (yy_lexical_state) {
            case COMMENT:
              { 
    nextState = YYINITIAL;
    lastToken = SQLToken.ERROR_UNCLOSED_COMMENT;
    SQLToken t = (new SQLToken(lastToken,commentBuffer.toString(),commentStartChar,commentStartChar+commentBuffer.length(),nextState));
    yybegin(nextState);
    return(t);
 }
            case 796: break;
            default:
            return null;
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
