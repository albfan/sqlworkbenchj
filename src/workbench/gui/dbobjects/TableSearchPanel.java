/*
 * TableSearchPanel.java
 *
 * Created on October 4, 2002, 9:53 AM
 */

package workbench.gui.dbobjects;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;

import workbench.WbManager;
import workbench.db.DbMetadata;
import workbench.db.TableSearcher;
import workbench.db.WbConnection;
import workbench.gui.WbSwingUtilities;
import workbench.gui.actions.ReloadAction;
import workbench.gui.components.DataStoreTableModel;
import workbench.gui.components.DividerBorder;
import workbench.gui.components.EmptyTableModel;
import workbench.gui.components.WbScrollPane;
import workbench.gui.components.WbSplitPane;
import workbench.gui.components.WbTable;
import workbench.gui.components.WbToolbarButton;
import workbench.interfaces.ShareableDisplay;
import workbench.interfaces.TableSearchDisplay;
import workbench.resource.ResourceMgr;
import workbench.resource.Settings;
import workbench.storage.DataStore;
import workbench.util.Like;


/**
 *
 * @author  workbench@kellerer.org
 */
public class TableSearchPanel 
	extends JPanel
	implements TableSearchDisplay
{
	private DataStore tableList;
	private TableModel tableListModel;
	private String currentTable;
	private String currentSql;
	private TableSearcher searcher;
	private WbConnection connection;
	private boolean tableLogged;
	private String fixedStatusText;
	private ShareableDisplay tableListSource;
	private DataStore currentResult;
	private Dimension maxTableSize = new Dimension(32768, 150);
	private WbTable currentDisplayTable;
	private JScrollPane currentScrollPane;
	private Like searchPattern;
	private WbTable firstTable;
	
	public TableSearchPanel(ShareableDisplay aTableListSource)
	{
		this.tableListModel = new EmptyTableModel();
		this.tableListSource = aTableListSource;
		initComponents();
		WbTable tables = (WbTable)this.tableNames;
		tables.setAdjustToColumnLabel(false);

		WbToolbarButton reload = (WbToolbarButton)this.reloadButton;
		Border b = reload.getBorder();
		reload.setBorder(new CompoundBorder(b, new EmptyBorder(1,1,1,1)));
		reload.setAction(new ReloadAction(this.tableListSource));
		reload.setToolTipText(ResourceMgr.getString("TxtRefreshTableList"));
		
		this.searcher = new TableSearcher();
		this.searcher.setDisplay(this);
		//this.searchResult.setFont(WbManager.getSettings().getMsgLogFont());
		this.tableNames.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		this.fixedStatusText = ResourceMgr.getString("TxtSearchingTable") + " ";
		((WbSplitPane)this.jSplitPane1).setDividerBorder(WbSwingUtilities.EMPTY_BORDER);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;
		
		buttonGroup1 = new javax.swing.ButtonGroup();
		jSplitPane1 = new WbSplitPane();
		resultScrollPane = new WbScrollPane();
		resultPanel = new javax.swing.JPanel();
		tableListScrollPane = new WbScrollPane();
		tableNames = new WbTable();
		statusInfo = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		entryPanel = new javax.swing.JPanel();
		startButton = new javax.swing.JButton();
		searchText = new javax.swing.JTextField();
		jLabel1 = new javax.swing.JLabel();
		reloadButton = new WbToolbarButton();
		optionPanel = new javax.swing.JPanel();
		labelRowCount = new javax.swing.JLabel();
		rowCount = new javax.swing.JTextField();
		
		
		setLayout(new java.awt.BorderLayout());
		
		jSplitPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
		jSplitPane1.setDividerLocation(150);
		resultScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		resultPanel.setLayout(new java.awt.GridBagLayout());
		
		resultPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 0, 0)));
		resultScrollPane.setViewportView(resultPanel);
		
		jSplitPane1.setRightComponent(resultScrollPane);
		
		tableNames.setModel(this.tableListModel);
		tableListScrollPane.setViewportView(tableNames);
		
		jSplitPane1.setLeftComponent(tableListScrollPane);
		
		add(jSplitPane1, java.awt.BorderLayout.CENTER);
		
		statusInfo.setBorder(new javax.swing.border.EtchedBorder());
		statusInfo.setMinimumSize(new java.awt.Dimension(4, 22));
		statusInfo.setPreferredSize(new java.awt.Dimension(4, 22));
		add(statusInfo, java.awt.BorderLayout.SOUTH);
		
		jPanel1.setLayout(new java.awt.GridBagLayout());
		
		entryPanel.setLayout(new java.awt.GridBagLayout());
		
		startButton.setText(ResourceMgr.getString("LabelStartSearch"));
		startButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				startButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 13, 2, 0);
		entryPanel.add(startButton, gridBagConstraints);
		
		searchText.setColumns(20);
		searchText.setText("% ... %");
		searchText.setToolTipText(ResourceMgr.getDescription("LabelSearchTableCriteria"));
		searchText.setMinimumSize(new java.awt.Dimension(100, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
		gridBagConstraints.weightx = 1.0;
		entryPanel.add(searchText, gridBagConstraints);
		
		jLabel1.setText(ResourceMgr.getString("LabelSearchTableCriteria"));
		jLabel1.setToolTipText(ResourceMgr.getDescription("LabelSearchTableCriteria"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 5, 2, 5);
		entryPanel.add(jLabel1, gridBagConstraints);
		
		reloadButton.setText("jButton1");
		reloadButton.setBorder(new javax.swing.border.EtchedBorder());
		reloadButton.setMaximumSize(new java.awt.Dimension(24, 24));
		reloadButton.setMinimumSize(new java.awt.Dimension(24, 24));
		reloadButton.setPreferredSize(new java.awt.Dimension(24, 24));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 0);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		entryPanel.add(reloadButton, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel1.add(entryPanel, gridBagConstraints);
		
		optionPanel.setLayout(new java.awt.GridBagLayout());
		
		optionPanel.setBorder(new DividerBorder(DividerBorder.TOP));
		labelRowCount.setLabelFor(rowCount);
		labelRowCount.setText(ResourceMgr.getString("LabelLimitSearchTableRows"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		optionPanel.add(labelRowCount, gridBagConstraints);
		
		rowCount.setColumns(4);
		rowCount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
		rowCount.setText("0");
		rowCount.setMinimumSize(new java.awt.Dimension(30, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		optionPanel.add(rowCount, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		jPanel1.add(optionPanel, gridBagConstraints);
		
		add(jPanel1, java.awt.BorderLayout.NORTH);
		
	}//GEN-END:initComponents

	private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
	{//GEN-HEADEREND:event_startButtonActionPerformed
		if (this.searcher.isRunning())
		{
			this.searcher.cancelSearch();
		}
		else
		{
			this.searchData();
		}
	}//GEN-LAST:event_startButtonActionPerformed

	private void adjustDataTable()
	{
		if (this.currentDisplayTable != null)
		{
			int rows = this.currentDisplayTable.getRowCount();
			int cols = this.currentDisplayTable.getColumnCount();
			int height = this.currentDisplayTable.getRowHeight();
			int width = this.resultScrollPane.getWidth();
			// Recycle the Dimension object from the ScrollPane
			Dimension size = this.currentScrollPane.getPreferredSize();
			if (rows > 25) rows = 25;
			size.setSize(width - 20, (rows + 4) * height );
			this.currentScrollPane.setPreferredSize(size);
		}
	}
	
	public synchronized void addResultRow(String aTablename, ResultSet aResult)
	{
		try
		{
			if (!this.tableLogged)
			{
				// Adjust the last table (which is now completed), before creating the new one
				// Note: this will not adjust the table if only one database table was searched
				// (or only results from one database table where returned)
				// therefor it's important to call this in searchEnded() as well
				this.adjustDataTable();
				this.currentDisplayTable = new WbTable();
				if (this.firstTable == null)
				{
					this.firstTable = this.currentDisplayTable;
				}
				this.currentDisplayTable.setDefaultRenderer(String.class, new ResultHighlightingRenderer(this.searchPattern));
				this.currentResult = new DataStore(aResult);
				DataStoreTableModel model = new DataStoreTableModel(this.currentResult);
				this.currentDisplayTable.setModel(model, true);
				this.currentScrollPane  = new ParentWidthScrollPane(this.currentDisplayTable);
				TitledBorder b = new TitledBorder(aTablename);
				Font f = b.getTitleFont();
				f = f.deriveFont(Font.BOLD);
				b.setTitleFont(f);
				b.setBorder(new EtchedBorder());
				this.currentScrollPane.setBorder(b);
				GridBagConstraints constraints = new GridBagConstraints();
				constraints.gridx = 0;				
				constraints.fill = GridBagConstraints.HORIZONTAL;
				constraints.weightx = 1.0;
				constraints.anchor = GridBagConstraints.WEST;
				this.resultPanel.add(this.currentScrollPane, constraints);
				this.tableLogged = true;
			}
			this.currentResult.addRow(aResult);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}	
	
	public synchronized void setCurrentTable(String aTablename, String aSql)
	{
		this.currentTable = aTablename;
		this.currentSql = aSql;
		this.tableLogged = false;
		this.currentTable = null;
		this.currentResult = null;
		this.statusInfo.setText(this.fixedStatusText + aTablename);
	}	
	
	public void setStatusText(String aStatustext)
	{
		this.statusInfo.setText(aStatustext);
	}
	/** Getter for property connection.
	 * @return Value of property connection.
	 *
	 */
	public WbConnection getConnection()
	{
		return connection;
	}
	
	/** Setter for property connection.
	 * @param connection New value of property connection.
	 *
	 */
	public void setConnection(WbConnection connection)
	{
		this.connection = connection;
		this.searcher.setConnection(connection);
		this.tableListSource.addTableListDisplayClient(this.tableNames);
	}
	
	public void disconnect()
	{
		this.resetResult();
	}
	
	private void resetResult()
	{
    // resultPanel.removeAll() does not work
    // the old tables just stay in there
    // so I re-create the actual result panel
		this.resultPanel = new JPanel();
    this.resultPanel.setLayout(new GridBagLayout());
    this.resultScrollPane.setViewportView(resultPanel);
		this.firstTable = null;
	}
	
	public void searchData()
	{
		if (this.tableNames.getSelectedRowCount() == 0) return;
		this.resetResult();
    
		int[] selectedTables = this.tableNames.getSelectedRows();
		ArrayList searchTables = new ArrayList(this.tableNames.getSelectedRowCount());
		DataStore tables = ((WbTable)(this.tableNames)).getDataStore();
		for (int i=0; i < selectedTables.length; i++)
		{
			StringBuffer table = new StringBuffer(100);
			String schema = (String)tables.getValue(selectedTables[i], DbMetadata.COLUMN_IDX_TABLE_LIST_SCHEMA);
			String tablename = (String)tables.getValue(selectedTables[i], DbMetadata.COLUMN_IDX_TABLE_LIST_NAME);
			if (schema != null && schema.length() > 0)
			{
				table.append(schema);
				table.append('.');
			}
			table.append(tablename);
			searchTables.add(table.toString());
		}
		int maxRows = 0;
		try
		{
			maxRows = Integer.parseInt(this.rowCount.getText());
		}
		catch (Exception e)
		{
			maxRows = 0;
		}
		String text = this.searchText.getText();
		searcher.setMaxRows(maxRows);
		searcher.setCriteria(text);
    boolean sensitive = this.connection.getMetadata().isStringComparisonCaseSensitve();
 		this.searchPattern = new Like(searcher.getCriteria(), !sensitive);
		searcher.setTableNames(searchTables);
		searcher.search(); // starts the background thread
	}
	
	public void saveSettings()
	{
		Settings s = WbManager.getSettings();
		String cl = this.getClass().getName();
		s.setProperty(cl, "divider", this.jSplitPane1.getDividerLocation());
		s.setProperty(cl, "criteria", this.searchText.getText());
		s.setProperty(cl, "maxrows", this.rowCount.getText());
	}

	public void restoreSettings()
	{
		Settings s = WbManager.getSettings();
		String cl = this.getClass().getName();
		int loc = s.getIntProperty(cl, "divider");
		if (loc == 0) loc = 200;
		this.jSplitPane1.setDividerLocation(loc);
		this.searchText.setText(s.getProperty(cl, "criteria", ""));
		this.rowCount.setText(s.getProperty(cl, "maxrows", "0"));
	}
	
	public void searchEnded()
	{
		this.adjustDataTable();
		if (this.firstTable != null)
		{
			int height = this.firstTable.getRowHeight();
			JScrollBar sb = this.resultScrollPane.getVerticalScrollBar();
			sb.setUnitIncrement(height);
			sb.setBlockIncrement(height * 5);
		}
		// insert a dummy panel at the end which will move
		// all tables in the pane to the upper border
		// e.g. when there is only one table
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridx = 0;				
		constraints.weighty = 1.0;
		constraints.anchor = GridBagConstraints.WEST;
		this.resultPanel.add(new JPanel(), constraints);

		this.resultPanel.doLayout();
		this.searchText.setEnabled(true);
		startButton.setText(ResourceMgr.getString("LabelStartSearch"));
		this.statusInfo.setText("");
	}
	
	public void searchStarted()
	{
		this.searchText.setEnabled(false);
		startButton.setText(ResourceMgr.getString("LabelCancelSearch"));
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextField searchText;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JPanel entryPanel;
	private javax.swing.JScrollPane resultScrollPane;
	private javax.swing.JPanel optionPanel;
	private javax.swing.JButton reloadButton;
	private javax.swing.JPanel resultPanel;
	private javax.swing.JButton startButton;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JLabel statusInfo;
	private javax.swing.JScrollPane tableListScrollPane;
	private javax.swing.JTextField rowCount;
	private javax.swing.JTable tableNames;
	private javax.swing.JLabel labelRowCount;
	// End of variables declaration//GEN-END:variables
	
	class ParentWidthScrollPane
		extends JScrollPane
	{
		private Dimension preferredSize = new Dimension(0,0);

		public ParentWidthScrollPane(Component view)
		{
			super(view);
		}
		public Dimension getPreferredSize()
		{
			Dimension d = super.getPreferredSize();
			Container parent = this.getParent();
			this.preferredSize.setSize( (double)parent.getWidth() - 5, d.getHeight());
			return this.preferredSize;
		}
	}
	
	class ResultHighlightingRenderer
		extends DefaultTableCellRenderer
	{
		private Like pattern;
		public ResultHighlightingRenderer(Like aPattern)
		{
			this.pattern = aPattern;
		}
		
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) 
		{
			JLabel result = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
			try
			{
				if (!isSelected)
				{
					String content = (String)value;
					if (content != null && this.pattern.like(content))
					{
						result.setBackground(Color.YELLOW);
					}
					else
					{
						result.setBackground(Color.WHITE);
					}
				}
			}
			catch (Exception e)
			{
				result.setBackground(Color.WHITE);
			}
			return result;
		}
		
 
	}
	
}
