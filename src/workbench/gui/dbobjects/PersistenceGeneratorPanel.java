/*
 * TableSearchPanel.java
 *
 * Created on October 4, 2002, 9:53 AM
 */

package workbench.gui.dbobjects;

import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import workbench.WbManager;
import workbench.db.DbMetadata;
import workbench.db.TableIdentifier;
import workbench.db.TableSearcher;
import workbench.db.WbConnection;
import workbench.gui.WbSwingUtilities;
import workbench.gui.actions.ReloadAction;
import workbench.gui.components.*;
import workbench.gui.components.DividerBorder;
import workbench.gui.components.WbScrollPane;
import workbench.gui.components.WbSplitPane;
import workbench.gui.sql.EditorPanel;
import workbench.interfaces.ShareableDisplay;
import workbench.interfaces.TableSearchDisplay;
import workbench.log.LogMgr;
import workbench.resource.ResourceMgr;
import workbench.resource.Settings;
import workbench.storage.DataStore;
import workbench.util.Like;
import workbench.util.PersistenceClassGenerator;
import workbench.util.StringUtil;


/**
 *
 * @author  workbench@kellerer.org
 */
public class PersistenceGeneratorPanel 
	extends JPanel 
	implements PropertyChangeListener
{
	private WbConnection connection;
	private ShareableDisplay tableListSource;
	private List selectedTables;
	
	public PersistenceGeneratorPanel(ShareableDisplay aTableListSource)
	{
		this.tableListSource = aTableListSource;
		initComponents();
		
		WbTable tables = (WbTable)this.tableNames;
		tables.setAdjustToColumnLabel(false);
		tables.addPropertyChangeListener(this);
		
		WbToolbarButton reload = (WbToolbarButton)this.reloadButton;
		Border b = reload.getBorder();
		reload.setBorder(new CompoundBorder(b, new EmptyBorder(1,1,1,1)));
		reload.setAction(new ReloadAction(this.tableListSource));
		reload.setToolTipText(ResourceMgr.getString("TxtRefreshTableList"));
		
		//this.searchResult.setFont(WbManager.getSettings().getMsgLogFont());
		this.tableNames.getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		((WbSplitPane)this.jSplitPane1).setDividerBorder(WbSwingUtilities.EMPTY_BORDER);
		
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		java.awt.GridBagConstraints gridBagConstraints;
		
		buttonGroup1 = new javax.swing.ButtonGroup();
		jSplitPane1 = new WbSplitPane();
		tableListScrollPane = new WbScrollPane();
		tableNames = new WbTable();
		editorTab = new javax.swing.JTabbedPane();
		statusInfo = new javax.swing.JLabel();
		optionPanel = new javax.swing.JPanel();
		buttonPanel = new javax.swing.JPanel();
		reloadButton = new WbToolbarButton();
		startButton = new javax.swing.JButton();
		tableOptions = new javax.swing.JPanel();
		labelOutputDir = new javax.swing.JLabel();
		outputDir = new javax.swing.JTextField();
		selectDirButton = new javax.swing.JButton();
		labelPackage = new javax.swing.JLabel();
		packageName = new javax.swing.JTextField();
		tablePatternLabel = new javax.swing.JLabel();
		tablePattern = new javax.swing.JTextField();
		valueOptions = new javax.swing.JPanel();
		labelValueOutputDir = new javax.swing.JLabel();
		valueOutputDir = new javax.swing.JTextField();
		selectValueDir = new javax.swing.JButton();
		labelValuePackage = new javax.swing.JLabel();
		valuePackage = new javax.swing.JTextField();
		valuePatternLabel = new javax.swing.JLabel();
		valuePattern = new javax.swing.JTextField();
		cleanupUnderscores = new javax.swing.JCheckBox();
		
		
		setLayout(new java.awt.BorderLayout());
		
		jSplitPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
		jSplitPane1.setDividerLocation(150);
		tableNames.setModel(new EmptyTableModel());
		tableListScrollPane.setViewportView(tableNames);
		
		jSplitPane1.setLeftComponent(tableListScrollPane);
		
		editorTab.setBorder(WbSwingUtilities.BEVEL_BORDER);
		jSplitPane1.setRightComponent(editorTab);
		
		add(jSplitPane1, java.awt.BorderLayout.CENTER);
		
		statusInfo.setBorder(new javax.swing.border.EtchedBorder());
		statusInfo.setMinimumSize(new java.awt.Dimension(4, 22));
		statusInfo.setPreferredSize(new java.awt.Dimension(4, 22));
		add(statusInfo, java.awt.BorderLayout.SOUTH);
		
		optionPanel.setLayout(new java.awt.GridBagLayout());
		
		buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
		
		reloadButton.setText("jButton1");
		reloadButton.setBorder(new javax.swing.border.EtchedBorder());
		reloadButton.setMaximumSize(new java.awt.Dimension(24, 24));
		reloadButton.setMinimumSize(new java.awt.Dimension(24, 24));
		reloadButton.setPreferredSize(new java.awt.Dimension(24, 24));
		buttonPanel.add(reloadButton);
		
		startButton.setText(ResourceMgr.getString("LabelStartGenerate"));
		startButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				startButtonActionPerformed(evt);
			}
		});
		
		buttonPanel.add(startButton);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		optionPanel.add(buttonPanel, gridBagConstraints);
		
		tableOptions.setLayout(new java.awt.GridBagLayout());
		
		labelOutputDir.setLabelFor(outputDir);
		labelOutputDir.setText(ResourceMgr.getString("LabelTableOutputDirectory"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		tableOptions.add(labelOutputDir, gridBagConstraints);
		
		outputDir.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		outputDir.setMinimumSize(new java.awt.Dimension(30, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		tableOptions.add(outputDir, gridBagConstraints);
		
		selectDirButton.setText("...");
		selectDirButton.setMaximumSize(new java.awt.Dimension(21, 21));
		selectDirButton.setMinimumSize(new java.awt.Dimension(21, 21));
		selectDirButton.setPreferredSize(new java.awt.Dimension(21, 21));
		selectDirButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				selectDirButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		tableOptions.add(selectDirButton, gridBagConstraints);
		
		labelPackage.setText(ResourceMgr.getString("LabelTablePackageName"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		tableOptions.add(labelPackage, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		tableOptions.add(packageName, gridBagConstraints);
		
		tablePatternLabel.setText(ResourceMgr.getString("LabelTableClassPattern"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		tableOptions.add(tablePatternLabel, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		tableOptions.add(tablePattern, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		optionPanel.add(tableOptions, gridBagConstraints);
		
		valueOptions.setLayout(new java.awt.GridBagLayout());
		
		labelValueOutputDir.setLabelFor(outputDir);
		labelValueOutputDir.setText(ResourceMgr.getString("LabelValueOutputDirectory"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		valueOptions.add(labelValueOutputDir, gridBagConstraints);
		
		valueOutputDir.setHorizontalAlignment(javax.swing.JTextField.LEFT);
		valueOutputDir.setMinimumSize(new java.awt.Dimension(30, 20));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		valueOptions.add(valueOutputDir, gridBagConstraints);
		
		selectValueDir.setText("...");
		selectValueDir.setMaximumSize(new java.awt.Dimension(21, 21));
		selectValueDir.setMinimumSize(new java.awt.Dimension(21, 21));
		selectValueDir.setPreferredSize(new java.awt.Dimension(21, 21));
		selectValueDir.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				selectValueDirActionPerformed(evt);
			}
		});
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		valueOptions.add(selectValueDir, gridBagConstraints);
		
		labelValuePackage.setText(ResourceMgr.getString("LabelValuePackageName"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		valueOptions.add(labelValuePackage, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		valueOptions.add(valuePackage, gridBagConstraints);
		
		valuePatternLabel.setText(ResourceMgr.getString("LabelValueClassPattern"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 0);
		valueOptions.add(valuePatternLabel, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 4);
		valueOptions.add(valuePattern, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		optionPanel.add(valueOptions, gridBagConstraints);
		
		cleanupUnderscores.setText(ResourceMgr.getString("LabelCleanupUnderscores"));
		cleanupUnderscores.setToolTipText(ResourceMgr.getDescription("LabelCleanupUnderscores"));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		optionPanel.add(cleanupUnderscores, gridBagConstraints);
		
		add(optionPanel, java.awt.BorderLayout.NORTH);
		
	}//GEN-END:initComponents

	private void selectValueDirActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectValueDirActionPerformed
	{//GEN-HEADEREND:event_selectValueDirActionPerformed
		String lastDir = this.valueOutputDir.getText();
		String newDir = this.selectDirectory(lastDir);
		if (newDir != null) this.valueOutputDir.setText(newDir);
	}//GEN-LAST:event_selectValueDirActionPerformed

	private void selectDirButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_selectDirButtonActionPerformed
	{//GEN-HEADEREND:event_selectDirButtonActionPerformed
		String lastDir = this.outputDir.getText();
		String newDir = this.selectDirectory(lastDir);
		if (newDir != null) this.outputDir.setText(newDir);
	}//GEN-LAST:event_selectDirButtonActionPerformed

	private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
	{//GEN-HEADEREND:event_startButtonActionPerformed
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				generate();
			}
		});
	}//GEN-LAST:event_startButtonActionPerformed

	private String selectDirectory(String lastDir)
	{
		JFileChooser fj = new JFileChooser(lastDir);
		fj.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		Component parent = SwingUtilities.getWindowAncestor(this);
		int answer = fj.showOpenDialog(parent);
		if (answer == JFileChooser.APPROVE_OPTION)
		{
			String dir = fj.getSelectedFile().getAbsolutePath();
			return dir;
		}
		return null;
	}
	
	public WbConnection getConnection()
	{
		return connection;
	}
	
	public void setConnection(WbConnection connection)
	{
		this.connection = connection;
		this.tableListSource.addTableListDisplayClient(this.tableNames);
	}
	
	public JTable getTableList()
	{
		return this.tableNames;
	}

	private boolean checkOutputDir(String aDir)
	{
		String msg1 = ResourceMgr.getString("MsgDirectoryNotFound").replaceAll("%dir%", aDir);
		String msg2 = ResourceMgr.getString("MsgNoDirectory").replaceAll("%dir%", aDir);
		
		File f = new File(aDir);
		if (!f.exists())
		{
			WbManager.getInstance().showErrorMessage(this, msg1);
			return false;
		}
		
		if (!f.isDirectory())
		{
			WbManager.getInstance().showErrorMessage(this, msg2);
			return false;
		}
		return true;
	}
	
	private void generate()
	{
		String dir = null;
		dir = this.outputDir.getText();
		if (!this.checkOutputDir(this.outputDir.getText())) return;
		if (!this.checkOutputDir(this.valueOutputDir.getText())) return;
			
		if (this.tableNames.getSelectedRowCount() <= 0) return;
		WbSwingUtilities.showWaitCursor(this);
		
		if (this.editorTab.getTabCount() > 0)
		{
			this.editorTab.removeAll();
		}
		PersistenceClassGenerator generator = new PersistenceClassGenerator();
		generator.setConnection(this.connection);
		generator.setTableOutputDir(this.outputDir.getText());
		generator.setValueOutputDir(this.valueOutputDir.getText());
		generator.setTablePackageName(this.packageName.getText());
		generator.setValuePackageName(this.valuePackage.getText());
		generator.setValuePattern(this.valuePattern.getText());
		generator.setTablePattern(this.tablePattern.getText());
		generator.setCleanupUnderscores(this.cleanupUnderscores.isSelected());
		DataStore tables = ((WbTable)(this.tableNames)).getDataStore();
		
		int[] selectedRows = this.tableNames.getSelectedRows();
		ArrayList files = new ArrayList((selectedRows.length * 2) + 2);
		String[] f = null;

		this.selectedTables = new ArrayList();
		
		TableIdentifier id = null;
		try
		{
			for (int i=0; i < selectedRows.length; i++)
			{
				int row = selectedRows[i];
				String table = tables.getValueAsString(row, DbMetadata.COLUMN_IDX_TABLE_LIST_NAME);
				String catalog = tables.getValueAsString(row, DbMetadata.COLUMN_IDX_TABLE_LIST_CATALOG);
				String schema = tables.getValueAsString(row, DbMetadata.COLUMN_IDX_TABLE_LIST_SCHEMA);
				this.selectedTables.add(table);
				id = new TableIdentifier(catalog, schema, table);
				generator.setTable(id);
				f = generator.generateFiles(i==0);
				if (f != null)
				{
					for (int k = 0; k < f.length; k++) files.add(f[k]);
				}
			}
			
			for (int i=0; i < files.size(); i++)
			{
				String fname = (String)files.get(i);
				if (fname == null) continue;
				File fh = new File(fname);
				
				if (fh != null && fh.exists())
				{
					EditorPanel p = EditorPanel.createJavaEditor();
					p.readFile(fh);
					p.setCaretPosition(0);
					this.editorTab.add(p, fh.getAbsolutePath());
				}
			}
			
		}
		catch (IOException e)
		{
			String msg = ResourceMgr.getString("MsgErrorCreatingClassFile") + " " + id;
			statusInfo.setText(msg);
			LogMgr.logError("PersistenceGeneratorPanel.generate()", "Error creating files for " + id, e);
		}
		WbSwingUtilities.showDefaultCursor(this);
	}
	
	public void disconnect()
	{
		this.tableListSource.removeTableListDisplayClient(this.tableNames);
	}
	
	private void getSelectedTables()
	{
		if (this.tableNames.getSelectedRowCount() <= 0) return;
		
		int[] selectedRows = this.tableNames.getSelectedRows();
		this.selectedTables = new ArrayList();
		DataStore tables = ((WbTable)(this.tableNames)).getDataStore();
		
		for (int i=0; i < selectedRows.length; i++)
		{
			int row = selectedRows[i];
			String table = tables.getValueAsString(row, DbMetadata.COLUMN_IDX_TABLE_LIST_NAME);
			this.selectedTables.add(table);
		}
		
	}
	
	public void saveSettings()
	{
		Settings s = WbManager.getSettings();
		String cl = this.getClass().getName();
		s.setProperty(cl, "divider", this.jSplitPane1.getDividerLocation());
		s.setProperty(cl, "package.table", this.packageName.getText());
		s.setProperty(cl, "package.value", this.valuePackage.getText());
		s.setProperty(cl, "pattern.table", this.tablePattern.getText());
		s.setProperty(cl, "pattern.value", this.valuePattern.getText());
		s.setLastTableGenerateDir(this.outputDir.getText());
		s.setLastValueGenerateDir(this.valueOutputDir.getText());
		s.setCleanupUnderscores(this.cleanupUnderscores.isSelected());
		boolean first = true;
		this.getSelectedTables();
		if (this.selectedTables != null)
		{
			StringBuffer tables = new StringBuffer(this.selectedTables.size() * 20);
			for (int i=0; i < this.selectedTables.size(); i++)
			{
				if (i>0) tables.append(',');
				tables.append((String)this.selectedTables.get(i));
			}
			s.setProperty(cl, "tables", tables.toString());
		}
		
	}

	public void restoreSettings()
	{
		Settings s = WbManager.getSettings();
		String cl = this.getClass().getName();
		int loc = s.getIntProperty(cl, "divider");
		if (loc == 0) loc = 200;
		this.jSplitPane1.setDividerLocation(loc);
		this.packageName.setText(s.getProperty(cl, "package.table", ""));
		this.valuePackage.setText(s.getProperty(cl, "package.value", ""));
		this.outputDir.setText(WbManager.getSettings().getLastTableGenerateDir());
		this.valueOutputDir.setText(WbManager.getSettings().getLastTableGenerateDir());
		this.tablePattern.setText(s.getProperty(cl, "pattern.table", PersistenceClassGenerator.DEFAULT_TABLE_PATTERN));
		this.valuePattern.setText(s.getProperty(cl, "pattern.value", PersistenceClassGenerator.DEFAULT_VALUE_PATTERN));
		this.cleanupUnderscores.setSelected(s.getCleanupUnderscores());
		
		String tables = s.getProperty(cl, "tables", "");
		if (tables != null && tables.trim().length() > 0)
		{
			this.selectedTables = StringUtil.stringToList(tables, ",");
			this.selectLastTables();
		}
	}
	
	public void propertyChange(PropertyChangeEvent e) 
	{
		if ("model".equals(e.getPropertyName()))
		{
			this.selectLastTables();
		}
	}
	
	private void selectLastTables()
	{
		if (this.selectedTables == null || this.selectedTables.size() == 0) return;
		WbTable t = (WbTable)this.tableNames;
		if (t == null) return;
		//TableModel model = t.getModel();
		DataStore ds = t.getDataStore();
		/*
		if (model instanceof DataStoreTableModel)
		{
			ds = ((DataStoreTableModel)model).getDataStore();
		}
		 */
		if (ds == null) return;

		int count = ds.getRowCount();
		ListSelectionModel sel = this.tableNames.getSelectionModel();
		sel.setValueIsAdjusting(true);
		int firstrow = -1;
		for (int i=0; i < count; i++)
		{
			String table = ds.getValueAsString(i, DbMetadata.COLUMN_IDX_TABLE_LIST_NAME);
			if (this.selectedTables.contains(table))
			{
				sel.addSelectionInterval(i,i);
				if (firstrow < 0)
				{
					firstrow = i;
				}
			}
		}
		sel.setValueIsAdjusting(false);
		if (firstrow > -1) t.scrollToRow(firstrow);
	}
	

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JLabel valuePatternLabel;
	private javax.swing.JTextField valuePackage;
	private javax.swing.JLabel tablePatternLabel;
	private javax.swing.JButton selectDirButton;
	private javax.swing.JTextField outputDir;
	private javax.swing.JLabel labelValuePackage;
	private javax.swing.JTextField valueOutputDir;
	private javax.swing.JCheckBox cleanupUnderscores;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JLabel labelOutputDir;
	private javax.swing.JButton selectValueDir;
	private javax.swing.JButton reloadButton;
	private javax.swing.JPanel optionPanel;
	private javax.swing.JPanel valueOptions;
	private javax.swing.JButton startButton;
	private javax.swing.JLabel labelValueOutputDir;
	private javax.swing.JPanel tableOptions;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JTextField valuePattern;
	private javax.swing.JLabel statusInfo;
	private javax.swing.JScrollPane tableListScrollPane;
	private javax.swing.JTextField packageName;
	private javax.swing.JPanel buttonPanel;
	private javax.swing.JLabel labelPackage;
	private javax.swing.JTable tableNames;
	private javax.swing.JTabbedPane editorTab;
	private javax.swing.JTextField tablePattern;
	// End of variables declaration//GEN-END:variables

}


