/*
 * ReplacePanel.java
 *
 * Created on August 28, 2003, 8:17 PM
 */

package workbench.gui.components;

import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Window;
import java.awt.event.ActionListener;
import java.awt.event.WindowListener;

import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;

import workbench.WbManager;
import workbench.gui.actions.EscAction;
import workbench.interfaces.Replaceable;
import workbench.resource.ResourceMgr;

/**
 *
 * @author  thomas
 */
public class ReplacePanel 
	extends javax.swing.JPanel
	implements ActionListener, WindowListener
{
	private static final String PROP_CLASS = "workbench.sql.replace";
	private static final String PROP_KEY_CASE = "ignoreCase";
	private static final String PROP_KEY_WHOLE_WORD = "wholeWord";
	private static final String PROP_KEY_SELECTED = "selectedText";
	private static final String PROP_KEY_USE_REGEX = "useRegEx";
	
	private Replaceable client;
	private int lastPos = -1;
	private JDialog dialog;
	private EscAction escAction;
	
	/** Creates new form ReplacePanel */
	public ReplacePanel(Replaceable aClient)
	{
		initComponents();
		this.client = aClient;
		WbTraversalPolicy policy = new WbTraversalPolicy();
		policy.addComponent(criteriaTextField);
		policy.addComponent(this.replaceValueTextField);
		policy.addComponent(this.ignoreCaseCheckBox);
		policy.addComponent(this.wordsOnlyCheckBox);
		policy.addComponent(this.selectedTextCheckBox);
		policy.addComponent(this.findButton);
		policy.addComponent(this.replaceNextButton);
		policy.addComponent(this.replaceAllButton);
		policy.addComponent(this.closeButton);
		policy.setDefaultComponent(criteriaTextField);
		this.setFocusCycleRoot(true);
		this.setFocusTraversalPolicy(policy);
		
		this.findButton.addActionListener(this);
		this.replaceNextButton.addActionListener(this);
		this.replaceAllButton.addActionListener(this);
		this.closeButton.addActionListener(this);

		this.criteriaTextField.addMouseListener(new TextComponentMouseListener());
		this.replaceValueTextField.addMouseListener(new TextComponentMouseListener());
		
		this.restoreSettings();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    java.awt.GridBagConstraints gridBagConstraints;

    criteriaLabel = new javax.swing.JLabel();
    criteriaTextField = new javax.swing.JTextField();
    replaceValueTextField = new javax.swing.JTextField();
    ignoreCaseCheckBox = new javax.swing.JCheckBox();
    wordsOnlyCheckBox = new javax.swing.JCheckBox();
    replaceLabel = new javax.swing.JLabel();
    spacerPanel = new javax.swing.JPanel();
    findButton = new WbButton();
    replaceNextButton = new WbButton();
    replaceAllButton = new WbButton();
    closeButton = new WbButton();
    selectedTextCheckBox = new javax.swing.JCheckBox();
    useRegexCheckBox = new javax.swing.JCheckBox();

    setLayout(new java.awt.GridBagLayout());

    criteriaLabel.setLabelFor(criteriaTextField);
    criteriaLabel.setText(ResourceMgr.getString("LabelSearchCriteria"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
    add(criteriaLabel, gridBagConstraints);

    criteriaTextField.setColumns(30);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 4, 0, 5);
    add(criteriaTextField, gridBagConstraints);

    replaceValueTextField.setColumns(30);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 5);
    add(replaceValueTextField, gridBagConstraints);

    ignoreCaseCheckBox.setText(ResourceMgr.getString("LabelSearchIgnoreCase"));
    ignoreCaseCheckBox.setToolTipText(ResourceMgr.getDescription("LabelSearchIgnoreCase"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
    add(ignoreCaseCheckBox, gridBagConstraints);

    wordsOnlyCheckBox.setText(ResourceMgr.getString("LabelSearchWordsOnly"));
    wordsOnlyCheckBox.setToolTipText(ResourceMgr.getDescription("LabelSearchWordsOnly"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(wordsOnlyCheckBox, gridBagConstraints);

    replaceLabel.setLabelFor(replaceValueTextField);
    replaceLabel.setText(ResourceMgr.getString("LabelReplaceNewValue"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
    add(replaceLabel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.weighty = 1.0;
    add(spacerPanel, gridBagConstraints);

    findButton.setText(ResourceMgr.getString("LabelFindNow"));
    findButton.setToolTipText(ResourceMgr.getDescription("LabelFindNow"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
    add(findButton, gridBagConstraints);

    replaceNextButton.setText(ResourceMgr.getString("LabelReplaceNext"));
    replaceNextButton.setToolTipText(ResourceMgr.getDescription("LabelReplaceNext"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    add(replaceNextButton, gridBagConstraints);

    replaceAllButton.setText(ResourceMgr.getString("LabelReplaceAll"));
    replaceAllButton.setToolTipText(ResourceMgr.getDescription("LabelReplaceAll"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    add(replaceAllButton, gridBagConstraints);

    closeButton.setText(ResourceMgr.getString("LabelClose"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    add(closeButton, gridBagConstraints);

    selectedTextCheckBox.setText(ResourceMgr.getString("LabelSelectedTextOnly"));
    selectedTextCheckBox.setToolTipText(ResourceMgr.getDescription("LabelSelectedTextOnly"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(selectedTextCheckBox, gridBagConstraints);

    useRegexCheckBox.setText(ResourceMgr.getString("LabelSearchRegEx"));
    useRegexCheckBox.setToolTipText(ResourceMgr.getDescription("LabelSearchRegEx"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    add(useRegexCheckBox, gridBagConstraints);

  }//GEN-END:initComponents
	
	public void showReplaceDialog(Component caller, final String currentText)
	{
		if (this.dialog != null)
		{
			this.dialog.show();
			this.dialog.requestFocus();
			return;
		}
		try
		{
			Window w = SwingUtilities.getWindowAncestor(caller);
			Frame f = null;
			if (w instanceof Frame)
			{
				f = (Frame)w;
			}
			this.dialog = new JDialog(f);
			this.dialog.setTitle(ResourceMgr.getString("TxtWindowTitleReplaceText"));
			this.dialog.getContentPane().add(this);
			this.dialog.pack();
			this.dialog.setResizable(false);
			if (!WbManager.getSettings().restoreWindowPosition(this.dialog, PROP_CLASS + ".window"))
			{
				this.dialog.setLocationRelativeTo(caller);
			}
			this.dialog.addWindowListener(this);
			
			boolean hasCurrentText = false;
			
			if (currentText != null)
			{
				if (currentText.indexOf('\n') == -1 && currentText.indexOf('\r') == -1)
				{
					this.criteriaTextField.setText(currentText);
					this.criteriaTextField.selectAll();
					hasCurrentText = true;
				}
			}
			
			//this.selectedTextCheckBox.setEnabled(this.client.isTextSelected());
			
			InputMap im = this.dialog.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
			ActionMap am = this.dialog.getRootPane().getActionMap();

			escAction = new EscAction(this);
			im.put(escAction.getAccelerator(), escAction.getActionName());
			am.put(escAction.getActionName(), escAction);

			final boolean selectSearchValue = !hasCurrentText;
			
			EventQueue.invokeLater(new Runnable()
			{
				public void run()
				{
					if (selectSearchValue)
					{
						criteriaTextField.requestFocus();
					}
					else
					{
						replaceValueTextField.requestFocus();
					}
				}
			});
			this.dialog.show();
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	public void actionPerformed(java.awt.event.ActionEvent e)
	{
		Object source = e.getSource();
		if (source == this.findButton)
		{
			this.find();
		}
		else if (source == this.replaceNextButton)
		{
			this.replaceNext();
		}
		else if (source == this.replaceAllButton)
		{
			this.replaceAll();
		}
		else if (source == this.closeButton || e.getActionCommand().equals(escAction.getActionName()))
		{
			this.closeWindow();
		}
	}

	private void find()
	{
		String toFind = this.criteriaTextField.getText();
		this.lastPos = this.client.findFirst(toFind, this.ignoreCaseCheckBox.isSelected(), this.wordsOnlyCheckBox.isSelected(), this.useRegexCheckBox.isSelected());
	}
	
	private void replaceNext()
	{
		if (this.client.replaceCurrent(this.replaceValueTextField.getText()))
		{
			this.find();
		}
	}
	
	private void replaceAll()
	{
		boolean selected = this.selectedTextCheckBox.isEnabled() && this.selectedTextCheckBox.isSelected();
		this.client.replaceAll(this.criteriaTextField.getText(), 
		                       this.replaceValueTextField.getText(), 
													 selected, 
		                       this.ignoreCaseCheckBox.isSelected(), 
													 this.wordsOnlyCheckBox.isSelected(),
													 this.useRegexCheckBox.isSelected());
	}
	
	private void closeWindow()
	{
		if (this.dialog != null)
		{
			this.saveSettings();
			this.escAction = null;
			this.dialog.hide();
			this.dialog.dispose();
			this.dialog = null;
		}
	}
	
	private void saveSettings()
	{
		WbManager.getSettings().setProperty(PROP_CLASS, PROP_KEY_CASE, Boolean.toString(this.ignoreCaseCheckBox.isSelected()));
		WbManager.getSettings().setProperty(PROP_CLASS, PROP_KEY_WHOLE_WORD, Boolean.toString(this.wordsOnlyCheckBox.isSelected()));
		WbManager.getSettings().setProperty(PROP_CLASS, PROP_KEY_SELECTED, Boolean.toString(this.selectedTextCheckBox.isSelected()));
		WbManager.getSettings().setProperty(PROP_CLASS, PROP_KEY_USE_REGEX, Boolean.toString(this.useRegexCheckBox.isSelected()));
		
		WbManager.getSettings().storeWindowPosition(this.dialog, PROP_CLASS + ".window");
	}
	
	private void restoreSettings()
	{
		this.ignoreCaseCheckBox.setSelected("true".equals(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_CASE, "true")));
		this.wordsOnlyCheckBox.setSelected("true".equals(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_WHOLE_WORD, "false")));
		this.selectedTextCheckBox.setSelected("true".equals(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_SELECTED, "false")));
		this.useRegexCheckBox.setSelected("true".equals(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_USE_REGEX, "true")));
		//this.criteriaTextField.setText(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_SEARCH, ""));
		//this.replaceValueTextField.setText(WbManager.getSettings().getProperty(PROP_CLASS, PROP_KEY_REPLACE, ""));
	}
	
	public void windowActivated(java.awt.event.WindowEvent e)
	{
	}
	
	public void windowClosed(java.awt.event.WindowEvent e)
	{
	}
	
	public void windowClosing(java.awt.event.WindowEvent e)
	{
		this.closeWindow();
	}
	
	public void windowDeactivated(java.awt.event.WindowEvent e)
	{
	}
	
	public void windowDeiconified(java.awt.event.WindowEvent e)
	{
	}
	
	public void windowIconified(java.awt.event.WindowEvent e)
	{
	}
	
	public void windowOpened(java.awt.event.WindowEvent e)
	{
	}
	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton closeButton;
  private javax.swing.JLabel criteriaLabel;
  private javax.swing.JTextField criteriaTextField;
  private javax.swing.JButton findButton;
  private javax.swing.JCheckBox ignoreCaseCheckBox;
  private javax.swing.JButton replaceAllButton;
  private javax.swing.JLabel replaceLabel;
  private javax.swing.JButton replaceNextButton;
  private javax.swing.JTextField replaceValueTextField;
  private javax.swing.JCheckBox selectedTextCheckBox;
  private javax.swing.JPanel spacerPanel;
  private javax.swing.JCheckBox useRegexCheckBox;
  private javax.swing.JCheckBox wordsOnlyCheckBox;
  // End of variables declaration//GEN-END:variables

	
}
