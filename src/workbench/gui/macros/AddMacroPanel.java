/*
 * AddMacroPanel.java
 *
 * This file is part of SQL Workbench/J, http://www.sql-workbench.net
 *
 * Copyright 2002-2016, Thomas Kellerer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * To contact the author please send an email to: support@sql-workbench.net
 *
 */
package workbench.gui.macros;

import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

import workbench.interfaces.ValidatingComponent;
import workbench.resource.ResourceMgr;

import workbench.gui.WbSwingUtilities;

import workbench.sql.macros.MacroGroup;
import workbench.sql.macros.MacroManager;

import workbench.util.StringUtil;

/**
 *
 * @author Thomas Kellerer
 */
public class AddMacroPanel
	extends JPanel
	implements WindowListener, ValidatingComponent
{
	private int macroClientId;

	public AddMacroPanel(int clientId)
	{
		initComponents();
		this.macroClientId = clientId;
		List<MacroGroup> groups = MacroManager.getInstance().getMacros(macroClientId).getGroups();
		DefaultComboBoxModel model = new DefaultComboBoxModel();
		for (MacroGroup group : groups)
		{
			model.addElement(group);
		}
		groupDropDown.setModel(model);
	}

	public MacroGroup getSelectedGroup()
	{
		return (MacroGroup)groupDropDown.getSelectedItem();
	}

	public String getMacroName()
	{
		return macroName.getText();
	}

	public boolean getExpandWhileTyping()
	{
		return cbExpand.isSelected();
	}

	@Override
	public boolean validateInput()
	{
		String name = macroName.getText();
		if (StringUtil.isBlank(name))
		{
			WbSwingUtilities.showErrorMessageKey(this, "ErrMcrNameReq");
			return false;
		}
		if (getExpandWhileTyping())
		{
			boolean ok = name.matches("\\w+");
			if (!ok)
			{
				WbSwingUtilities.showErrorMessageKey(this, "ErrMcrNmNoSpace");
				return false;
			}
		}
		return true;
	}

	@Override
	public void componentDisplayed()
	{
	}

  @Override
  public void componentWillBeClosed()
  {
		// nothing to do
  }

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
		GridBagConstraints gridBagConstraints;

    jLabel1 = new JLabel();
    jLabel2 = new JLabel();
    groupDropDown = new JComboBox();
    macroName = new JTextField();
    cbExpand = new JCheckBox();

    setLayout(new GridBagLayout());

    jLabel1.setText(ResourceMgr.getString("LblMacroGrpName"));     gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(7, 5, 0, 0);
    add(jLabel1, gridBagConstraints);

    jLabel2.setText(ResourceMgr.getString("LblMacroName"));     gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(7, 5, 0, 0);
    add(jLabel2, gridBagConstraints);

    groupDropDown.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(7, 9, 0, 5);
    add(groupDropDown, gridBagConstraints);

    macroName.setColumns(30);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(7, 9, 0, 5);
    add(macroName, gridBagConstraints);

    cbExpand.setText(ResourceMgr.getString("LblExpandMacro"));     cbExpand.setToolTipText(ResourceMgr.getString("d_LblExpandMacro"));     gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new Insets(4, 1, 0, 0);
    add(cbExpand, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JCheckBox cbExpand;
  private JComboBox groupDropDown;
  private JLabel jLabel1;
  private JLabel jLabel2;
  private JTextField macroName;
  // End of variables declaration//GEN-END:variables

	@Override
	public void windowOpened(WindowEvent e)
	{
		EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				macroName.requestFocusInWindow();
			}
		});
	}

	@Override
	public void windowClosing(WindowEvent e)
	{
	}

	@Override
	public void windowClosed(WindowEvent e)
	{
	}

	@Override
	public void windowIconified(WindowEvent e)
	{
	}

	@Override
	public void windowDeiconified(WindowEvent e)
	{
	}

	@Override
	public void windowActivated(WindowEvent e)
	{
	}

	@Override
	public void windowDeactivated(WindowEvent e)
	{
	}
}
