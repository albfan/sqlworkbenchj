/*
 * SqlGenerationOptionsPanel.java
 *
 * This file is part of SQL Workbench/J, http://www.sql-workbench.net
 *
 * Copyright 2002-2009, Thomas Kellerer
 * No part of this code maybe reused without the permission of the author
 *
 * To contact the author please send an email to: support@sql-workbench.net
 *
 */
package workbench.gui.settings;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import workbench.interfaces.Restoreable;
import workbench.resource.ResourceMgr;
import workbench.resource.Settings;
import workbench.util.StringUtil;

/**
 *
 * @author  support@sql-workbench.net
 */
public class SqlGenerationOptionsPanel
	extends JPanel
	implements Restoreable, ActionListener
{

	public SqlGenerationOptionsPanel()
	{
		super();
		initComponents();

		List<String> types = Settings.getInstance().getLiteralTypeList();
		ComboBoxModel model1 = new DefaultComboBoxModel(types.toArray());
		literalTypes.setModel(model1);
		ComboBoxModel model2 = new DefaultComboBoxModel(types.toArray());
		exportLiteralTypes.setModel(model2);
		ComboBoxModel model3 = new DefaultComboBoxModel(types.toArray());
		diffLiteralsType.setModel(model3);
	}

	public void restoreSettings()
	{
		String genCase = Settings.getInstance().getGeneratedSqlTableCase();
		if ("lower".equals(genCase)) this.tableNameCase.setSelectedIndex(1);
		else if ("upper".equals(genCase)) this.tableNameCase.setSelectedIndex(2);
		else this.tableNameCase.setSelectedIndex(0);
		this.literalTypes.setSelectedItem(Settings.getInstance().getDefaultCopyDateLiteralType());
		this.exportLiteralTypes.setSelectedItem(Settings.getInstance().getDefaultExportDateLiteralType());
		this.diffLiteralsType.setSelectedItem(Settings.getInstance().getDefaultDiffDateLiteralType());
		this.includeEmptyComments.setSelected(Settings.getInstance().getIncludeEmptyComments());
		checkThresholds();
	}

	public void saveSettings()
	{
		Settings set = Settings.getInstance();
		set.setDoFormatUpdates(formatUpdates.isSelected());
		set.setDoFormatInserts(formatInserts.isSelected());
		set.setFormatInsertColsPerLine(StringUtil.getIntValue(insertColsPerLine.getText(),1));
		set.setFormatInsertColumnThreshold(StringUtil.getIntValue(insertThreshold.getText(),5));
		set.setFormatUpdateColumnThreshold(StringUtil.getIntValue(updateThreshold.getText(),5));
		set.setIncludeOwnerInSqlExport(includeOwner.isSelected());
		set.setGeneratedSqlTableCase((String)tableNameCase.getSelectedItem());
		set.setDefaultCopyDateLiteralType((String)literalTypes.getSelectedItem());
		set.setDefaultExportDateLiteralType((String)exportLiteralTypes.getSelectedItem());
		set.setDefaultDiffDateLiteralType((String)diffLiteralsType.getSelectedItem());
		set.setIncludeEmptyComments(includeEmptyComments.isSelected());
		set.setFormatInsertIgnoreIdentity(ignoreIdentity.isSelected());
	}

	private void checkThresholds()
	{
		updateThreshold.setEnabled(formatUpdates.isSelected());
		insertThreshold.setEnabled(formatInserts.isSelected());
		insertColsPerLine.setEnabled(formatInserts.isSelected());
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
		GridBagConstraints gridBagConstraints;

    formatUpdates = new JCheckBox();
    formatInserts = new JCheckBox();
    ignoreIdentity = new JCheckBox();
    tableNameCaseLabel = new JLabel();
    tableNameCase = new JComboBox();
    jPanel1 = new JPanel();
    includeEmptyComments = new JCheckBox();
    includeOwner = new JCheckBox();
    jPanel2 = new JPanel();
    copyLiteralLabel = new JLabel();
    exportLiteralLabel = new JLabel();
    literalTypes = new JComboBox();
    exportLiteralTypes = new JComboBox();
    diffLiteralsLabel = new JLabel();
    diffLiteralsType = new JComboBox();
    jPanel3 = new JPanel();
    jPanel4 = new JPanel();
    updateColThresholdLbl = new JLabel();
    updateThreshold = new JTextField();
    jPanel5 = new JPanel();
    jPanel7 = new JPanel();
    insertColThresholdLbl = new JLabel();
    insertThreshold = new JTextField();
    jPanel8 = new JPanel();
    colsPerLineLabel = new JLabel();
    insertColsPerLine = new JTextField();

    setLayout(new GridBagLayout());

    formatUpdates.setFont(null);
    formatUpdates.setSelected(Settings.getInstance().getDoFormatUpdates());
    formatUpdates.setText(ResourceMgr.getString("LblFmtUpd")); // NOI18N
    formatUpdates.setToolTipText(ResourceMgr.getString("d_LblFmtUpd")); // NOI18N
    formatUpdates.setBorder(null);
    formatUpdates.setHorizontalAlignment(SwingConstants.LEFT);
    formatUpdates.setHorizontalTextPosition(SwingConstants.RIGHT);
    formatUpdates.setIconTextGap(5);
    formatUpdates.addActionListener(this);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(10, 10, 0, 11);
    add(formatUpdates, gridBagConstraints);

    formatInserts.setFont(null);
    formatInserts.setSelected(Settings.getInstance().getDoFormatInserts());
    formatInserts.setText(ResourceMgr.getString("LblFmtIns")); // NOI18N
    formatInserts.setToolTipText(ResourceMgr.getString("d_LblFmtIns")); // NOI18N
    formatInserts.setBorder(null);
    formatInserts.setHorizontalAlignment(SwingConstants.LEFT);
    formatInserts.setHorizontalTextPosition(SwingConstants.RIGHT);
    formatInserts.setIconTextGap(5);
    formatInserts.addActionListener(this);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new Insets(10, 10, 0, 11);
    add(formatInserts, gridBagConstraints);

    ignoreIdentity.setFont(null);
    ignoreIdentity.setSelected(Settings.getInstance().getFormatInsertIgnoreIdentity());
    ignoreIdentity.setText(ResourceMgr.getString("LblInsIgnoreId")); // NOI18N
    ignoreIdentity.setToolTipText(ResourceMgr.getString("d_LblInsIgnoreId")); // NOI18N
    ignoreIdentity.setBorder(null);
    ignoreIdentity.setHorizontalAlignment(SwingConstants.LEFT);
    ignoreIdentity.setHorizontalTextPosition(SwingConstants.RIGHT);
    ignoreIdentity.setIconTextGap(5);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 11;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new Insets(10, 8, 0, 11);
    add(ignoreIdentity, gridBagConstraints);

    tableNameCaseLabel.setLabelFor(tableNameCase);
    tableNameCaseLabel.setText(ResourceMgr.getString("LblGenTableNameCase")); // NOI18N
    tableNameCaseLabel.setToolTipText(ResourceMgr.getString("d_LblGenTableNameCase")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(11, 8, 0, 0);
    add(tableNameCaseLabel, gridBagConstraints);

    tableNameCase.setModel(new DefaultComboBoxModel(new String[] { "As is", "Lowercase", "Uppercase" }));
    tableNameCase.setToolTipText(ResourceMgr.getDescription("LblGenTableNameCase"));
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 12;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(6, 10, 0, 15);
    add(tableNameCase, gridBagConstraints);

    jPanel1.setLayout(new GridBagLayout());

    includeEmptyComments.setFont(null);
    includeEmptyComments.setSelected(Settings.getInstance().getIncludeOwnerInSqlExport());
    includeEmptyComments.setText(ResourceMgr.getString("LblGenInclEmptyComments")); // NOI18N
    includeEmptyComments.setToolTipText(ResourceMgr.getString("d_LblGenInclEmptyComments")); // NOI18N
    includeEmptyComments.setBorder(null);
    includeEmptyComments.setHorizontalAlignment(SwingConstants.LEFT);
    includeEmptyComments.setHorizontalTextPosition(SwingConstants.RIGHT);
    includeEmptyComments.setIconTextGap(5);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new Insets(0, 5, 0, 0);
    jPanel1.add(includeEmptyComments, gridBagConstraints);

    includeOwner.setFont(null);
    includeOwner.setSelected(Settings.getInstance().getIncludeOwnerInSqlExport());
    includeOwner.setText(ResourceMgr.getString("LblGenInclOwn")); // NOI18N
    includeOwner.setToolTipText(ResourceMgr.getString("d_LblGenInclOwn")); // NOI18N
    includeOwner.setBorder(null);
    includeOwner.setHorizontalAlignment(SwingConstants.LEFT);
    includeOwner.setHorizontalTextPosition(SwingConstants.RIGHT);
    includeOwner.setIconTextGap(5);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new Insets(0, 0, 0, 11);
    jPanel1.add(includeOwner, gridBagConstraints);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new Insets(10, 8, 0, 0);
    add(jPanel1, gridBagConstraints);

    jPanel2.setBorder(BorderFactory.createTitledBorder(ResourceMgr.getString("LblDefDateLiterals"))); // NOI18N
    jPanel2.setLayout(new GridBagLayout());

    copyLiteralLabel.setText(ResourceMgr.getString("LblDefCopyLiteralType")); // NOI18N
    copyLiteralLabel.setToolTipText(ResourceMgr.getString("d_LblDefCopyLiteralType")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(0, 8, 0, 0);
    jPanel2.add(copyLiteralLabel, gridBagConstraints);

    exportLiteralLabel.setLabelFor(exportLiteralTypes);
    exportLiteralLabel.setText(ResourceMgr.getString("LblDefExportLiteralType")); // NOI18N
    exportLiteralLabel.setToolTipText(ResourceMgr.getString("d_LblDefExportLiteralType")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(9, 8, 3, 0);
    jPanel2.add(exportLiteralLabel, gridBagConstraints);

    literalTypes.setToolTipText(ResourceMgr.getDescription("LblDefCopyLiteralType"));
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(0, 8, 0, 0);
    jPanel2.add(literalTypes, gridBagConstraints);

    exportLiteralTypes.setToolTipText(ResourceMgr.getDescription("LblDefExportLiteralType"));
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(6, 8, 3, 0);
    jPanel2.add(exportLiteralTypes, gridBagConstraints);

    diffLiteralsLabel.setLabelFor(diffLiteralsType);
    diffLiteralsLabel.setText(ResourceMgr.getString("LblDefDiffLiteralType")); // NOI18N
    diffLiteralsLabel.setToolTipText(ResourceMgr.getString("d_LblDefDiffLiteralType")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(0, 12, 0, 0);
    jPanel2.add(diffLiteralsLabel, gridBagConstraints);

    diffLiteralsType.setToolTipText(ResourceMgr.getDescription("LblDefExportLiteralType"));
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(0, 8, 0, 0);
    jPanel2.add(diffLiteralsType, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel2.add(jPanel3, gridBagConstraints);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(3, 3, 3, 8);
    add(jPanel2, gridBagConstraints);

    jPanel4.setLayout(new FlowLayout(FlowLayout.LEFT));

    updateColThresholdLbl.setHorizontalAlignment(SwingConstants.LEFT);
    updateColThresholdLbl.setText(ResourceMgr.getString("LblUpdThres")); // NOI18N
    updateColThresholdLbl.setToolTipText(ResourceMgr.getString("d_LblUpdThres")); // NOI18N
    jPanel4.add(updateColThresholdLbl);

    updateThreshold.setColumns(5);
    updateThreshold.setText(Integer.toString(Settings.getInstance().getFormatUpdateColumnThreshold()));
    jPanel4.add(updateThreshold);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(2, 15, 0, 0);
    add(jPanel4, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 13;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(jPanel5, gridBagConstraints);

    jPanel7.setLayout(new FlowLayout(FlowLayout.LEFT));

    insertColThresholdLbl.setHorizontalAlignment(SwingConstants.LEFT);
    insertColThresholdLbl.setText(ResourceMgr.getString("LblInsThres")); // NOI18N
    insertColThresholdLbl.setToolTipText(ResourceMgr.getString("d_LblInsThres")); // NOI18N
    jPanel7.add(insertColThresholdLbl);

    insertThreshold.setColumns(5);
    insertThreshold.setText(Integer.toString(Settings.getInstance().getFormatInsertColumnThreshold()));
    jPanel7.add(insertThreshold);

    jPanel8.setMaximumSize(new Dimension(10, 10));
    jPanel7.add(jPanel8);

    colsPerLineLabel.setHorizontalAlignment(SwingConstants.LEFT);
    colsPerLineLabel.setText(ResourceMgr.getString("LblInsColsPerLine")); // NOI18N
    colsPerLineLabel.setToolTipText(ResourceMgr.getString("d_LblInsColsPerLine")); // NOI18N
    jPanel7.add(colsPerLineLabel);

    insertColsPerLine.setColumns(5);
    insertColsPerLine.setText(Integer.toString(Settings.getInstance().getFormatInsertColsPerLine()));
    jPanel7.add(insertColsPerLine);

    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.WEST;
    gridBagConstraints.insets = new Insets(2, 15, 0, 0);
    add(jPanel7, gridBagConstraints);
  }

  // Code for dispatching events from components to event handlers.

  public void actionPerformed(java.awt.event.ActionEvent evt) {
    if (evt.getSource() == formatUpdates) {
      SqlGenerationOptionsPanel.this.formatUpdatesActionPerformed(evt);
    }
    else if (evt.getSource() == formatInserts) {
      SqlGenerationOptionsPanel.this.formatInsertsActionPerformed(evt);
    }
  }// </editor-fold>//GEN-END:initComponents

	private void formatUpdatesActionPerformed(ActionEvent evt)//GEN-FIRST:event_formatUpdatesActionPerformed
	{//GEN-HEADEREND:event_formatUpdatesActionPerformed
		checkThresholds();
	}//GEN-LAST:event_formatUpdatesActionPerformed

	private void formatInsertsActionPerformed(ActionEvent evt)//GEN-FIRST:event_formatInsertsActionPerformed
	{//GEN-HEADEREND:event_formatInsertsActionPerformed
		checkThresholds();
	}//GEN-LAST:event_formatInsertsActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JLabel colsPerLineLabel;
  private JLabel copyLiteralLabel;
  private JLabel diffLiteralsLabel;
  private JComboBox diffLiteralsType;
  private JLabel exportLiteralLabel;
  private JComboBox exportLiteralTypes;
  private JCheckBox formatInserts;
  private JCheckBox formatUpdates;
  private JCheckBox ignoreIdentity;
  private JCheckBox includeEmptyComments;
  private JCheckBox includeOwner;
  private JLabel insertColThresholdLbl;
  private JTextField insertColsPerLine;
  private JTextField insertThreshold;
  private JPanel jPanel1;
  private JPanel jPanel2;
  private JPanel jPanel3;
  private JPanel jPanel4;
  private JPanel jPanel5;
  private JPanel jPanel7;
  private JPanel jPanel8;
  private JComboBox literalTypes;
  private JComboBox tableNameCase;
  private JLabel tableNameCaseLabel;
  private JLabel updateColThresholdLbl;
  private JTextField updateThreshold;
  // End of variables declaration//GEN-END:variables

}
