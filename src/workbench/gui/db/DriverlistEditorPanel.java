/*
 * ProfileEditor.java
 *
 * Created on 1. Juli 2002, 18:34
 */

package workbench.gui.db;

import java.awt.BorderLayout;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JToolBar;
import javax.swing.ListModel;
import javax.swing.border.Border;
import workbench.WbManager;
import workbench.db.ConnectionMgr;
import workbench.db.ConnectionProfile;
import workbench.db.DbDriver;
import workbench.exception.WbException;
import workbench.interfaces.FileActions;
import workbench.resource.ResourceMgr;

/**
 *
 * @author  thomas.kellerer@inline-skate.com
 */
public class DriverlistEditorPanel extends javax.swing.JPanel implements FileActions
{
	//private ConnectionEditorPanel connectionEditor;
	private DriverListModel model;
	private JToolBar toolbar;
	private int lastIndex = -1;

	/** Creates new form ProfileEditor */
	public DriverlistEditorPanel()
	{
		initComponents();
		this.fillDriverList();
		jList1.setNextFocusableComponent(driverEditor);
		this.driverEditor.setNextFocusableComponent(jList1);
		this.toolbar = new JToolBar();
		this.toolbar.setFloatable(false);
		this.toolbar.add(new NewProfileAction(this));
		//this.toolbar.add(new SaveProfileAction(this));
		//this.toolbar.addSeparator();
		this.toolbar.add(new DeleteProfileAction(this));
		this.listPanel.add(this.toolbar, BorderLayout.NORTH);
	}

	private void fillDriverList()
	{
		this.model = new DriverListModel(WbManager.getInstance().getConnectionMgr().getDrivers());
		this.jList1.setModel(this.model);
		if (this.model.getSize() > 0)
		{
			this.jList1.setSelectedIndex(0);
		}
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		jSplitPane1 = new javax.swing.JSplitPane();
		
		
		listPanel = new javax.swing.JPanel();
		jList1 = new javax.swing.JList();
		driverEditor = new workbench.gui.db.DriverEditorPanel();
		
		setLayout(new java.awt.BorderLayout());
		
		jSplitPane1.setBorder(new javax.swing.border.EtchedBorder());
		jSplitPane1.setDividerLocation(100);
		jSplitPane1.setDividerSize(4);
		listPanel.setLayout(new java.awt.BorderLayout());
		
		jList1.setFont(null);
		jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener()
		{
			public void valueChanged(javax.swing.event.ListSelectionEvent evt)
			{
				jList1ValueChanged(evt);
			}
		});
		
		listPanel.add(jList1, java.awt.BorderLayout.CENTER);
		
		jSplitPane1.setLeftComponent(listPanel);
		
		
		jSplitPane1.setRightComponent(driverEditor);
		
		add(jSplitPane1, java.awt.BorderLayout.CENTER);
		
	}//GEN-END:initComponents

	private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jList1ValueChanged
	{//GEN-HEADEREND:event_jList1ValueChanged
		if (evt.getSource() == this.jList1)
		{
			if (lastIndex > -1)
			{
				DbDriver current = this.driverEditor.getDriver();
				this.model.putDriver(lastIndex, current);
			}
			int index = this.jList1.getSelectedIndex();
			DbDriver newDriver = this.model.getDriver(index);
			this.driverEditor.setDriver(newDriver);
			lastIndex = index;
		}
	}//GEN-LAST:event_jList1ValueChanged

	public DbDriver getSelectedDriver()
	{
		this.updateUI();
		this.driverEditor.updateDriver();
		int index = jList1.getSelectedIndex();
		DbDriver drv = this.model.getDriver(index);
		return drv;
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private workbench.gui.db.DriverEditorPanel driverEditor;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JList jList1;
	private javax.swing.JPanel listPanel;
	// End of variables declaration//GEN-END:variables


	private void selectDriver(String aDriverName)
	{
		if (aDriverName == null) return;

		try
		{
			ListModel m = jList1.getModel();
			int count = m.getSize();

			for (int i=0; i < count; i++)
			{
				DbDriver drv = (DbDriver)m.getElementAt(i);
				if (drv.getName().equals(aDriverName))
				{
					this.jList1.setSelectedIndex(i);
					break;
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			jList1.setSelectedIndex(0);
		}
	}

	/**
	 *	Remove an item from the listmodel
	 */
	public void deleteItem() throws WbException
	{
		int index = this.jList1.getSelectedIndex();
		if (index > 0) this.jList1.setSelectedIndex(index - 1);
		this.model.deleteDriver(index);
		this.jList1.updateUI();
	}

	/**
	 *	Create a new profile. This will only be
	 *	created in the ListModel.
	 */
	public void newItem() throws WbException
	{
		DbDriver drv = new DbDriver();
		drv.setName(ResourceMgr.getString("EmptyDriverName"));
		this.model.addDriver(drv);
		this.selectDriver(drv.getName());
		this.jList1.updateUI();
	}

	public void saveItem() throws WbException
	{
		ConnectionMgr conn = WbManager.getInstance().getConnectionMgr();
		conn.setDrivers(this.model.getValues());
		conn.saveDrivers();
	}

}
