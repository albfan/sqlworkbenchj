/*
 * ProfileEditor.java
 *
 * Created on 1. Juli 2002, 18:34
 */

package workbench.gui.profiles;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JToolBar;
import javax.swing.ListModel;
import javax.swing.border.Border;
import workbench.WbManager;
import workbench.db.ConnectionMgr;
import workbench.db.ConnectionProfile;
import workbench.exception.WbException;
import workbench.gui.components.WbSplitPane;
import workbench.gui.components.WbToolbar;
import workbench.gui.components.WbToolbarButton;
import workbench.gui.components.WbToolbarSeparator;
import workbench.interfaces.FileActions;
import workbench.resource.ResourceMgr;

/**
 *
 * @author  workbench@kellerer.org
 */
public class ProfileEditorPanel
	extends javax.swing.JPanel
	implements FileActions, KeyListener
{
	//private ConnectionEditorPanel connectionEditor;
	private ProfileListModel model;
	private JToolBar toolbar;
	private int lastIndex = -1;
	private ConnectionEditorPanel connectionEditor;
	private MouseListener listMouseListener;
	private boolean ctrlPressed = false;

	/** Creates new form ProfileEditor */
	public ProfileEditorPanel()
	{
		initComponents();
		this.connectionEditor = new ConnectionEditorPanel();
		this.jSplitPane1.setRightComponent(this.connectionEditor);
		this.fillDrivers();
		String last = WbManager.getSettings().getLastConnection();
		this.selectProfile(last);
		jList1.setNextFocusableComponent(connectionEditor);
		this.connectionEditor.setNextFocusableComponent(jList1);
		this.toolbar = new WbToolbar();
		this.toolbar.add(new NewListEntryAction(this));
		this.toolbar.add(new SaveProfilesAction(this));
		this.toolbar.addSeparator();
		this.toolbar.add(new DeleteListEntryAction(this));
		this.listPanel.add(this.toolbar, BorderLayout.NORTH);
		int pos = WbManager.getSettings().getProfileDividerLocation();
		if (pos > -1)
		{
			this.jSplitPane1.setDividerLocation(pos);
		}
		this.addKeyListener(this);
	}

	private void fillDrivers()
	{
		List drivers = WbManager.getInstance().getConnectionMgr().getDrivers();
		this.connectionEditor.setDrivers(drivers);
	}

	public void saveSettings()
	{
		WbManager.getSettings().setProfileDividerLocation(this.jSplitPane1.getDividerLocation());
	}
	private void fillProfiles()
	{
		this.model = new ProfileListModel(WbManager.getInstance().getConnectionMgr().getProfiles());
		this.jList1.setModel(this.model);
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents()//GEN-BEGIN:initComponents
	{
		jSplitPane1 = new WbSplitPane();
		
		
		listPanel = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList();
		
		setLayout(new java.awt.BorderLayout());
		
		jSplitPane1.setBorder(new javax.swing.border.EtchedBorder());
		jSplitPane1.setDividerLocation(110);
		listPanel.setLayout(new java.awt.BorderLayout());
		
		jScrollPane1.setPreferredSize(null);
		jList1.setFont(WbManager.getSettings().getStandardFont());
		jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jList1.setVisibleRowCount(10);
		this.fillProfiles();
		jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener()
		{
			public void valueChanged(javax.swing.event.ListSelectionEvent evt)
			{
				jList1ValueChanged(evt);
			}
		});
		
		jList1.addMouseListener(new java.awt.event.MouseAdapter()
		{
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				jList1MouseClicked(evt);
			}
		});
		
		jScrollPane1.setViewportView(jList1);
		
		listPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);
		
		jSplitPane1.setLeftComponent(listPanel);
		
		add(jSplitPane1, java.awt.BorderLayout.CENTER);
		
	}//GEN-END:initComponents

	private void jList1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jList1MouseClicked
	{//GEN-HEADEREND:event_jList1MouseClicked
		if (this.listMouseListener != null)
		{
			this.listMouseListener.mouseClicked(evt);
		}
	}//GEN-LAST:event_jList1MouseClicked

	public void addListMouseListener(MouseListener aListener)
	{
		this.listMouseListener = aListener;
	}

	private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jList1ValueChanged
	{//GEN-HEADEREND:event_jList1ValueChanged
		if (this.connectionEditor == null) return;
		if (evt.getSource() == this.jList1)
		{
			if (lastIndex > -1)
			{
				ConnectionProfile current = this.connectionEditor.getProfile();
				this.model.putProfile(lastIndex, current);
			}
			ConnectionProfile newProfile = (ConnectionProfile)this.jList1.getSelectedValue();
			if (newProfile != null)
			{
				this.connectionEditor.setProfile(newProfile);
			}
			lastIndex = this.jList1.getSelectedIndex();
		}
	}//GEN-LAST:event_jList1ValueChanged

	public ConnectionProfile getSelectedProfile()
	{
		this.repaint();
		//this.connectionEditor.updateProfile();
		return this.connectionEditor.getProfile();
		//ConnectionProfile prof = (ConnectionProfile)jList1.getSelectedValue();
		//return prof;
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JSplitPane jSplitPane1;
	private javax.swing.JList jList1;
	private javax.swing.JPanel listPanel;
	// End of variables declaration//GEN-END:variables


	private void selectProfile(String aProfileName)
	{
		if (aProfileName == null) return;

		try
		{
			ListModel m = jList1.getModel();
			int count = m.getSize();

			for (int i=0; i < count; i++)
			{
				ConnectionProfile prof = (ConnectionProfile)m.getElementAt(i);
				if (prof.getName().equals(aProfileName))
				{
					this.jList1.setSelectedIndex(i);
					this.jList1.ensureIndexIsVisible(i);
					break;
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			jList1.setSelectedIndex(0);
		}
	}

	/**
	 *	Remove an item from the listmodel
	 */
	public void deleteItem() throws WbException
	{
		int index = this.jList1.getSelectedIndex();
		if (index > 0) this.jList1.setSelectedIndex(index - 1);
		this.model.deleteProfile(index);
		this.jList1.updateUI();
	}

	/**
	 *	Create a new profile. This will only be
	 *	created in the ListModel.
	 */
	public void newItem(boolean createCopy) throws WbException
	{
		ConnectionProfile current = (ConnectionProfile)this.jList1.getSelectedValue();
		ConnectionProfile cp;
		if (current != null && createCopy)
		{
			cp = current.createCopy();
		}
		else
		{
			cp = new ConnectionProfile();
		}
		cp.setName(ResourceMgr.getString("TxtEmptyProfileName"));
		this.model.addProfile(cp);
		this.selectProfile(cp.getName());
		// if I call repaint() the list disappears :-(
		this.jList1.updateUI();
	}

	public void saveItem() throws WbException
	{
		ConnectionMgr conn = WbManager.getInstance().getConnectionMgr();
		conn.setProfiles(this.model.getValues());
		conn.saveXmlProfiles();
	}

	public int getProfileCount()
	{
		return this.jList1.getModel().getSize();
	}

	/** Invoked when a key has been pressed.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key pressed event.
	 *
	 */
	public void keyPressed(KeyEvent e)
	{
		this.ctrlPressed = ((e.getModifiers() & KeyEvent.CTRL_DOWN_MASK) == KeyEvent.CTRL_DOWN_MASK);
		System.out.println(ctrlPressed);
	}

	/** Invoked when a key has been released.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key released event.
	 *
	 */
	public void keyReleased(KeyEvent e)
	{
		this.ctrlPressed = ((e.getModifiers() & KeyEvent.CTRL_MASK) == 0);
		System.out.println(ctrlPressed);
	}

	/** Invoked when a key has been typed.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key typed event.
	 *
	 */
	public void keyTyped(KeyEvent e)
	{
	}

}
