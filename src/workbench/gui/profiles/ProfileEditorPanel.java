/*
 * ProfileEditorPanel.java
 *
 * This file is part of SQL Workbench/J, http://www.sql-workbench.net
 *
 * Copyright 2002-2006, Thomas Kellerer
 * No part of this code maybe reused without the permission of the author
 *
 * To contact the author please send an email to: support@sql-workbench.net
 *
 */
package workbench.gui.profiles;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.util.List;
import javax.swing.JPanel;

import javax.swing.JToolBar;
import javax.swing.ListModel;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListSelectionListener;

import workbench.db.ConnectionMgr;
import workbench.db.ConnectionProfile;
import workbench.gui.actions.CopyProfileAction;
import workbench.gui.actions.DeleteListEntryAction;
import workbench.gui.actions.NewListEntryAction;
import workbench.gui.actions.SaveListFileAction;
import workbench.gui.components.DividerBorder;
import workbench.gui.components.WbSplitPane;
import workbench.gui.components.WbToolbar;
import workbench.gui.components.WbTraversalPolicy;
import workbench.interfaces.FileActions;
import workbench.resource.ResourceMgr;
import workbench.resource.Settings;
import workbench.util.StringUtil;

/**
 *
 * @author  support@sql-workbench.net
 */
public class ProfileEditorPanel
	extends JPanel
	implements FileActions, KeyListener
{
	private ProfileListModel model;
	private JToolBar toolbar;
	private ConnectionEditorPanel connectionEditor;
	private MouseListener listMouseListener;
	private ProfileFilter filter;
	
	/** Creates new form ProfileEditor */
	public ProfileEditorPanel(String lastProfileKey)
	{
		initComponents(); // will initialize the model!
		
		this.connectionEditor = new ConnectionEditorPanel();
		this.jSplitPane1.setRightComponent(this.connectionEditor);
		this.fillDrivers();
		String last = Settings.getInstance().getLastConnection(lastProfileKey);
		this.selectProfile(last);
		JPanel p = new JPanel();
		p.setLayout(new BorderLayout());
		this.toolbar = new WbToolbar();
		this.toolbar.add(new NewListEntryAction(this, "LblNewProfile"));
		this.toolbar.add(new CopyProfileAction(this));
		this.toolbar.add(new SaveListFileAction(this));
		this.toolbar.addSeparator();
		this.toolbar.add(new DeleteListEntryAction(this, "LblDeleteProfile"));
		this.toolbar.setBorder(DividerBorder.BOTTOM_DIVIDER);
		p.add(toolbar, BorderLayout.NORTH);
		this.filter = new ProfileFilter(this.model);
		this.filter.setBorder(new EmptyBorder(1,2,1,0));
		p.add(filter, BorderLayout.SOUTH);
		
		this.listPanel.add(p, BorderLayout.NORTH);
		
		
		this.addKeyListener(this);
		this.connectionEditor.setSourceList(this.model);
		WbTraversalPolicy policy = new WbTraversalPolicy();
		this.setFocusCycleRoot(false);
		policy.addComponent(this.jList1);
		policy.addComponent(this.connectionEditor);
		policy.setDefaultComponent(this.jList1);
		this.setFocusTraversalPolicy(policy);
		
		restoreSettings();
	}

	public void done()
	{
		this.filter.done();
	}

	public void removeSelectionListener(ListSelectionListener listener)
	{
		this.jList1.removeListSelectionListener(listener);
	}
	
	public void addSelectionListener(ListSelectionListener listener)
	{
		this.jList1.addListSelectionListener(listener);
	}
	
	public void setInitialFocus()
	{
		EventQueue.invokeLater(new Runnable()
		{
			public void run()
			{
				jList1.requestFocus();
			}
		});
	}

	private void fillDrivers()
	{
		List drivers = ConnectionMgr.getInstance().getDrivers();
		this.connectionEditor.setDrivers(drivers);
	}

	public void restoreSettings()
	{
		int pos = Settings.getInstance().getProfileDividerLocation();
		if (pos == -1) pos = 140;
		this.jSplitPane1.setDividerLocation(pos);
		String group = Settings.getInstance().getProperty("workbench.gui.profiles.lastgroup", null);
		if (group != null) filter.setGroupFilter(group);
	}
	
	public void saveSettings()
	{
		Settings.getInstance().setProfileDividerLocation(this.jSplitPane1.getDividerLocation());
		Settings.getInstance().setProperty("workbench.gui.profiles.lastgroup", this.filter.getCurrentGroup());
	}
	
	private void fillProfiles()
	{
		this.model = new ProfileListModel(ConnectionMgr.getInstance().getProfiles());
		this.jList1.setModel(this.model);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    jSplitPane1 = new WbSplitPane();

    listPanel = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();

    setLayout(new java.awt.BorderLayout());

    jSplitPane1.setBorder(new javax.swing.border.EtchedBorder());
    jSplitPane1.setDividerLocation(110);
    listPanel.setLayout(new java.awt.BorderLayout());

    jScrollPane1.setPreferredSize(null);
    jList1.setFont(Settings.getInstance().getStandardLabelFont());
    jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jList1.setVisibleRowCount(10);
    this.fillProfiles();
    jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener()
    {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt)
      {
        jList1ValueChanged(evt);
      }
    });
    jList1.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        jList1MouseClicked(evt);
      }
    });

    jScrollPane1.setViewportView(jList1);

    listPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

    jSplitPane1.setLeftComponent(listPanel);

    add(jSplitPane1, java.awt.BorderLayout.CENTER);

  }
  // </editor-fold>//GEN-END:initComponents

	private void jList1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jList1MouseClicked
	{//GEN-HEADEREND:event_jList1MouseClicked
		if (this.listMouseListener != null)
		{
			this.listMouseListener.mouseClicked(evt);
		}
	}//GEN-LAST:event_jList1MouseClicked

	public void addListMouseListener(MouseListener aListener)
	{
		this.listMouseListener = aListener;
	}

	private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jList1ValueChanged
	{//GEN-HEADEREND:event_jList1ValueChanged
		if (this.connectionEditor == null) return;
		if (this.jList1.getModel() == null) return;
		if (this.jList1.getModel().getSize() <= 0) return;
		if (evt.getSource() == this.jList1)
		{
			if (filter != null) this.filter.readGroups();
			try
			{
				ConnectionProfile newProfile = (ConnectionProfile)this.jList1.getSelectedValue();
				if (newProfile != null)
				{
					this.connectionEditor.setProfile(newProfile);
				}
				//lastIndex = this.jList1.getSelectedIndex();
			}
			catch (Exception e)
			{
				//lastIndex = 0;
			}
		}
	}//GEN-LAST:event_jList1ValueChanged

	public ConnectionProfile getSelectedProfile()
	{
		return this.connectionEditor.getProfile();
	}


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JList jList1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JPanel listPanel;
  // End of variables declaration//GEN-END:variables


	private void selectProfile(String aProfileName)
	{
		ListModel m = jList1.getModel();
		int count = m.getSize();
		
		if (StringUtil.isEmptyString(aProfileName) && count > 0)
		{
			jList1.setSelectedIndex(0);
			return;
		}

		try
		{

			for (int i=0; i < count; i++)
			{
				ConnectionProfile prof = (ConnectionProfile)m.getElementAt(i);
				if (prof.getName().equals(aProfileName))
				{
					this.jList1.setSelectedIndex(i);
					this.jList1.ensureIndexIsVisible(i);
					break;
				}
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
			jList1.setSelectedIndex(0);
		}
	}

	/**
	 *	Remove an item from the listmodel.
	 *	This will also remove the profile from the ConnectionMgr's
	 *	profile list.
	 */
	public void deleteItem() throws Exception
	{
		int index = this.jList1.getSelectedIndex();
    if (index >= 0)
    {
      this.model.deleteProfile(index);
    }
    if (index > 0) index --;
    this.jList1.setSelectedIndex(index);
	}

	/**
	 *	Create a new profile. This will be added to the ListModel and the
	 *	ConnectionMgr's profile list.
	 */
	public void newItem(boolean createCopy) throws Exception
	{
		ConnectionProfile cp = null;

		if (createCopy)
		{
  		ConnectionProfile current = (ConnectionProfile)this.jList1.getSelectedValue();
  		if (current != null)
  		{
  			cp = current.createCopy();
  			cp.setName(ResourceMgr.getString("TxtCopyOfProfile") + " " + current.getName());
  		}
		}

		if (cp == null)
		{
			cp = new ConnectionProfile();
			cp.setUseSeparateConnectionPerTab(true);
			cp.setName(ResourceMgr.getString("TxtEmptyProfileName"));
		}
    cp.setNew();
		this.model.addProfile(cp);
		this.selectProfile(cp.getName());
	}

	public void saveItem() throws Exception
	{
		ConnectionMgr conn = ConnectionMgr.getInstance();
		this.connectionEditor.updateProfile();
		conn.saveProfiles();
	}

	public int getProfileCount()
	{
		return this.jList1.getModel().getSize();
	}

	/** Invoked when a key has been pressed.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key pressed event.
	 *
	 */
	public void keyPressed(KeyEvent e)
	{
		//this.ctrlPressed = ((e.getModifiers() & KeyEvent.CTRL_DOWN_MASK) == KeyEvent.CTRL_DOWN_MASK);
	}

	/** Invoked when a key has been released.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key released event.
	 *
	 */
	public void keyReleased(KeyEvent e)
	{
		//this.ctrlPressed = ((e.getModifiers() & KeyEvent.CTRL_MASK) == 0);
	}

	/** Invoked when a key has been typed.
	 * See the class description for {@link KeyEvent} for a definition of
	 * a key typed event.
	 *
	 */
	public void keyTyped(KeyEvent e)
	{
	}

}
