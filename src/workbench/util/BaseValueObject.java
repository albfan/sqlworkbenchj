package workbench.util;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 *	Base class for holding data for a single row from a database table.
 *	The columns and their associated column values are held in a <ling>
 */
public class BaseValueObject
{
	private HashMap data;

	/**
	 *	Creates a new instance of BaseValueObject.
	 */
	public BaseValueObject()
	{
		this.data = new HashMap();
	}

	/**
	 *	Creates a new instance of BaseValueObject.
	 *	And initializes the internal Map to the given size.
	 *
	 *	@param	colCount	then number of columns for this ValueObject
	 */
	public BaseValueObject(int colCount)
	{
		this.data = new HashMap(colCount);
	}

	/**
	 *	Returns the current value associated with the given colummn.
	 *	
	 *	If the column is not define <code>null</code> will be returned
	 *
	 *	@return	the current value of the column 
	 *
	 *	@see #setColumnValue(String, Object)
	 */
	public Object getColumnValue(String aCol)
	{
		return this.data.get(aCol);
	}

	/**
	 *	Set the value of the given column to <code>aValue</code>.
	 *	
	 *	If the column is not defined the call will be ignored.
	 *
	 *	@param	aCol	the name of the column as provided with {@link #addColumn(String)}
	 *	@param	aValue	then new column value
	 *
	 *	@see	#getColumnValue(String)
	 */
	public void setColumnValue(String aCol, Object aValue)
	{
		if (this.data.containsKey(aCol))
		{
			this.data.put(aCol, aValue);
		}
	}

	/**
	 *	
	 */
	public int getColumnCount()
	{
		return this.data.size();
	}

	public Iterator getColumns()
	{
		return this.data.keySet().iterator();
	}

	/**
	 *	Remove a column from this ValueObject.
	 *	
	 *	If a column is removed it is no longed put into the SQL statements
	 *	generated by BaseTablePersistence.
	 *
	 *	If the given column does not exist this call is ignored
	 *	
	 *	@param	aCol	the name of the column to be removed
	 */
	public void removeColumn(String aCol)
	{
		this.data.remove(aCol);
	}

	/**
	 *	Add a column from this ValueObject.
	 *	
	 *	If a column is add it will be part of any SQL statement
	 *	generated by BaseTablePersistence.
	 *
	 *	@param	aCol	the name of the column to be added
	 */
	public void addColumn(String aCol)
	{
		this.data.put(aCol, null);
	}

	/**
	 *	Returns a String representation of this value object.
	 *
	 *	@return String
	 */
	public String toString()
	{
		if (data == null) return "(n/a)";
		Iterator itr = this.data.entrySet().iterator();
		StringBuffer result = new StringBuffer(250);
		boolean first = true;
		while (itr.hasNext())
		{
			Map.Entry entry = (Map.Entry)itr.next();
			String col = (String)entry.getKey();
			Object value = entry.getValue();
			if (value == null) value = "(null)";
			if (!first) result.append(",");
			else first = false;
			result.append('[');
			result.append(col);
			result.append('=');
			result.append(value.toString());
			result.append(']');
		}
		return result.toString();
	}

	/**
	 *	Creates a copy of this value object. 
	 *	The current values for all columns are also copied.
	 *
	 *	@return	a deep copy of <code>this</code>
	 */
	public BaseValueObject createCopy()
	{
		return this.createCopy(true);
	}

	/**
	 *	Creates a copy of this value object. 
	 *	If <code>includeData</code> is true the current
	 *	values are copied as well. If <code>includeData</code>
	 *	is <code>false</code> only the column definitions are copied.
	 *
	 *	@param	includeData	create a deep copy <code>true/false</code>
	 *
	 *	@return	a copy of <code>this</code>
	 */
	public BaseValueObject createCopy(boolean includeData)
	{
		BaseValueObject result = new BaseValueObject();
		result.data = new HashMap();
		if (includeData)
		{
			result.data.putAll(this.data);
		}
		else
		{
			Iterator itr = this.data.keySet().iterator();
			while (itr.hasNext())
			{
				result.data.put(itr.next(), null);
			}
		}
		return result;
	}
}
