<?xml version="1.0" encoding="UTF-8"?>
<java version="1.5" class="java.beans.XMLDecoder">
 <object class="java.util.HashMap">

<void method="put">
   <string>H2</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select *
from (
  select index_name,
         null as index_schema,
         table_catalog,
         table_schema,
         table_name,
         case
           when non_unique then 'NO'
           else 'YES'
         end as is_unique,
         case
            when primary_key then 'YES'
            else 'NO'
         end as is_pk,
         group_concat(column_name order by ordinal_position) as index_def,
         case
           when index_type = 3 then 'NORMAL'
         end as index_type,
         null as index_tablespace
  from information_schema.indexes
  group by index_name, table_catalog, table_schema, table_name, is_unique, is_pk
) idx
    </string>
    </void>
    <void property="schemaField">
     <string>idx.table_schema</string>
    </void>
    <void property="baseObjectNameField">
      <string>idx.table_name</string>
    </void>
    <void property="objectNameField">
      <string>idx.index_name</string>
    </void>
   </object>
  </void>


 <void method="put">
   <string>HSQL Database Engine-2</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select index_name,
       index_schema,
       table_catalog,
       table_schema,
       table_name,
       case
          when non_unique then 'NO'
          else 'YES'
       end as is_unique,
       case
          when pk_col_count > 0 then 'YES'
          else 'NO'
       end as is_pk,
       null as index_type,
       index_def,
       null as index_tablespace
from (
  select idx.index_name,
         idx.table_schem as index_schema,
         idx.table_cat as table_catalog,
         idx.table_schem as table_schema,
         idx.table_name,
         idx.non_unique,
         group_concat(idx.column_name order by ordinal_position) as index_def,
         count(pk.column_name) as pk_col_count
  from information_schema.system_indexinfo idx
    left join information_schema.system_primarykeys pk
          on pk.table_name = idx.table_name
          and pk.table_schem = idx.table_schem
          and pk.table_cat = idx.table_cat
          and pk.column_name = idx.column_name
  group by table_cat, table_schem, table_name, index_name, non_unique
) idx
    </string>
    </void>
    <void property="schemaField">
     <string>idx.index_schema</string>
    </void>
    <void property="baseObjectNameField">
      <string>idx.table_name</string>
    </void>
    <void property="objectNameField">
      <string>idx.index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Firebird-2.1</string>
   <object id="list_fb_full" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select idx.rdb$index_name as index_name,
       null as index_schema,
       null as table_catalog,
       null as table_schema,
       idx.rdb$relation_name as table_name,
       case
          when idx.rdb$unique_flag = 1 then 'YES'
          else 'NO'
       end as is_unique,
       case
         when pk.rdb$constraint_name is not null then 'YES'
         else 'NO'
       end as is_pk,
       null as index_type,
       case
          when rdb$expression_source is null
             then ( select list(c.col_name, ',') from (select trim(rdb$field_name) as col_name
                                                       from rdb$index_segments c
                                                       where c.rdb$index_name = idx.rdb$index_name
                                                       order by rdb$field_position) c)
          else rdb$expression_source
       end as index_def,
       null as index_tablespace
from rdb$indices as idx
  left join rdb$relation_constraints as pk
         on idx.rdb$index_name = pk.rdb$index_name
        and pk.rdb$constraint_type = 'PRIMARY KEY'
where idx.rdb$relation_name not like 'RDB$%'
      </string>
    </void>
    <void property="baseObjectNameField">
      <string>idx.rdb$relation_name</string>
    </void>
    <void property="objectNameField">
      <string>idx.rdb$index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Firebird-2.5</string>
   <object idref="list_fb_full"/>
  </void>

  <void method="put">
   <string>Firebird-3.0</string>
   <object idref="list_fb_full"/>
  </void>

  <!-- fallback for Firebird befor 2.1 that doesn't have the LIST() function -->
  <void method="put">
   <string>Firebird</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select idx.rdb$index_name as index_name,
       null as index_schema,
       null as table_catalog,
       null as table_schema,
       idx.rdb$relation_name as table_name,
       case
          when idx.rdb$unique_flag = 1 then 'YES'
          else 'NO'
       end as is_unique,
       case
         when pk.rdb$constraint_name is not null then 'YES'
         else 'NO'
       end as is_pk,
       null as index_type,
       null as index_def,
       null as index_tablespace
from rdb$indices as idx
  left join rdb$relation_constraints as pk
         on idx.rdb$index_name = pk.rdb$index_name
        and pk.rdb$constraint_type = 'PRIMARY KEY'
where idx.rdb$relation_name not like 'RDB$%'
</string>
    </void>
    <void property="baseObjectNameField">
      <string>idx.rdb$relation_name</string>
    </void>
    <void property="objectNameField">
      <string>idx.rdb$index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>MySQL</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select index_name,
       null as index_schema,
       table_name,
       table_schema as table_catalog,
       null as table_schema,
       index_type,
       is_unique,
       is_pk,
       index_def,
       null as index_tablespace
from (
  select index_name,
         index_schema,
         table_schema,
         table_name,
         index_type,
         case non_unique
           when 1 then 'NO'
           else 'YES'
         end as is_unique,
         case
           when index_name = 'PRIMARY' then 'YES'
           else 'NO'
         end as is_pk,
         group_concat(column_name) as index_def
  from information_schema.statistics
  group by index_name, index_schema, table_name, index_type, non_unique
) t
     </string>
    </void>
    <void property="catalogField">
     <string>index_schema</string>
    </void>
    <void property="baseObjectNameField">
      <string>table_name</string>
    </void>
    <void property="objectNameField">
      <string>index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Microsoft SQL Server</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
SELECT idx.name as index_name,
       null as index_schema,
       sh.name  as table_schema,
       db_name()  as table_catalog,
       tbl.name as table_name,
       idx.type_desc as index_type,
       case idx.is_primary_key
         when 1 then 'YES'
         else 'NO'
       end as is_pk,
       case is_unique_constraint
         when 1 then 'YES'
         else 'NO'
       end as is_unique,
       index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,1) + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,2),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,3),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,4),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,5),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,6),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,7),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,8),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,9),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,10),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,11),'') + ',' +
       coalesce(index_col(schema_name(sh.schema_id)+'.'+object_name(idx.object_id),index_id,12),'') + ',' as index_def,
       null as index_tablespace
FROM sys.indexes idx with (nolock)
  JOIN sys.objects tbl with (nolock) ON idx.object_id = tbl.object_id AND tbl.type = 'U'
  JOIN sys.schemas sh with (nolock) ON sh.schema_id = tbl.schema_id
WHERE idx.type in (1,2)
     </string>
    </void>
    <void property="schemaField">
     <string>sh.name</string>
    </void>
    <void property="baseObjectNameField">
     <string>tbl.name</string>
    </void>
    <void property="objectNameField">
     <string>idx.name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Oracle-11.2</string>
   <object id="list_oracle_idx_def" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
select /* SQLWorkbench */ ic.index_name,
       idx.owner as index_schema,
       idx.table_owner as table_schema,
       null as table_catalog,
       ic.table_name,
       idx.index_type as index_type,
       case idx.uniqueness
         when 'UNIQUE' then 'YES'
         else 'NO'
       end as is_unique,
       case
         when ac.constraint_name is null then 'NO'
         else 'YES'
       end as is_pk,
       index_def,
       idx.tablespace_name as index_tablespace,
       idx.status as index_status
from (
  select index_name,
         index_owner as index_schema,
         table_owner as table_schema,
         table_name,
         listagg(column_name, ',') within group (order by column_position) as index_def
  FROM all_ind_columns
  GROUP BY index_name, index_owner, table_owner, table_name
) ic
 JOIN all_indexes idx
   ON idx.index_name = ic.index_name AND ic.index_schema = idx.owner
 LEFT JOIN all_constraints ac
    ON ac.index_name = idx.index_name
   AND ac.table_name = idx.table_name
   AND ac.owner = idx.table_owner
WHERE idx.index_name not like 'BIN$%'
     </string>
    </void>
    <void property="schemaField">
     <string>idx.owner</string>
    </void>
    <void property="baseObjectNameField">
     <string>idx.table_name</string>
    </void>
    <void property="objectNameField">
     <string>idx.index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Oracle-12.1</string>
   <object idref="list_oracle_idx_def"/>
  </void>

  <void method="put">
   <string>Oracle</string>
   <object id="list_oracle_idx" class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
     <string>
SELECT /* SQLWorkbench */ idx.index_name,
       idx.owner as index_schema,
       idx.table_owner as table_schema,
       null as table_catalog,
       idx.table_name,
       idx.index_type,
       case idx.uniqueness
         when 'UNIQUE' then 'YES'
         else 'NO'
       end as is_unique,
       case
         when ac.constraint_name is null then 'NO'
         else 'YES'
       end as is_pk,
       null as index_def,
       idx.tablespace_name as index_tablespace
FROM all_indexes idx
 LEFT JOIN all_constraints ac
    ON ac.index_name = idx.index_name
   AND ac.table_name = idx.table_name
   AND ac.owner = idx.table_owner
WHERE idx.index_name not like 'BIN$%'
     </string>
    </void>
    <void property="schemaField">
     <string>idx.owner</string>
    </void>
    <void property="baseObjectNameField">
     <string>idx.table_name</string>
    </void>
    <void property="objectNameField">
     <string>idx.index_name</string>
    </void>
   </object>
  </void>

  <void method="put">
   <string>Oracle8</string>
   <object idref="list_oracle_idx"/>
  </void>

  <void method="put">
   <string>PostgreSQL</string>
   <object class="workbench.db.GetMetaDataSql">
    <void property="baseSql">
<string>
select idx.relname as index_name,
       null::text as index_schema,
       ns.nspname as table_schema,
       null as table_catalog,
       tbl.relname as table_name,
       case ind.indisunique
          when true then 'YES'
          else 'NO'
       end as is_unique,
       case ind.indisprimary
          when true then 'YES'
          else 'NO'
       end as is_pk,
       null::text as index_type,
       concat_ws(',',
           pg_get_indexdef(idx.oid, 1, true),
           pg_get_indexdef(idx.oid, 2, true),
           pg_get_indexdef(idx.oid, 3, true),
           pg_get_indexdef(idx.oid, 4, true),
           pg_get_indexdef(idx.oid, 5, true),
           pg_get_indexdef(idx.oid, 6, true),
           pg_get_indexdef(idx.oid, 7, true),
           pg_get_indexdef(idx.oid, 8, true),
           pg_get_indexdef(idx.oid, 9, true),
           pg_get_indexdef(idx.oid, 10, true),
           pg_get_indexdef(idx.oid, 11, true),
           pg_get_indexdef(idx.oid, 12, true)
       ) as index_def,
       ts.spcname as index_tablespace
from pg_index ind
  join pg_class idx on idx.oid = ind.indexrelid
  join pg_class tbl on tbl.oid = ind.indrelid
  left join pg_namespace ns on ns.oid = tbl.relnamespace
  left join pg_tablespace ts ON ts.oid = idx.reltablespace
where tbl.relkind = 'r'
  and idx.relkind = 'i'
</string>
    </void>
    <void property="schemaField">
      <string>ns.nspname</string>
    </void>
    <void property="baseObjectNameField">
      <string>tbl.relname</string>
    </void>
    <void property="objectNameField">
     <string>idx.relname</string>
    </void>
   </object>
  </void>

 </object>
</java>
