/*
 * DummyUpdate.java
 *
 * This file is part of SQL Workbench/J, http://www.sql-workbench.net
 *
 * Copyright 2002-2016, Thomas Kellerer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at.
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * To contact the author please send an email to: support@sql-workbench.net
 *
 */
package workbench.db;

import java.sql.SQLException;
import java.util.List;

import workbench.resource.Settings;

import workbench.sql.formatter.FormatterUtil;

/**
 * @author Thomas Kellerer
 */
public class DummyUpdate
	extends DummyDML
	implements DbObject
{
	public DummyUpdate(TableIdentifier tbl)
	{
		super(tbl);
    doFormat = Settings.getInstance().getDoFormatUpdates();
	}

	public DummyUpdate(TableIdentifier tbl, List<ColumnIdentifier> cols)
	{
		super(tbl, cols);
    doFormat = Settings.getInstance().getDoFormatUpdates();
	}

	@Override
	public String getObjectType()
	{
		return "UPDATE";
	}

  @Override
  public CharSequence getSource(WbConnection con)
    throws SQLException
  {
    List<ColumnIdentifier> columns = getColumns(con);

    String lineEnd = Settings.getInstance().getInternalEditorLineEnding();
    StringBuilder sql = new StringBuilder(columns.size() * 20 + 100);
    sql.append(FormatterUtil.getKeyword("UPDATE "));
    sql.append(FormatterUtil.getIdentifier(table.getTableExpression(con)));
    sql.append(lineEnd);
    sql.append(FormatterUtil.getKeyword("   SET "));
    int colNr = 0;
    for (int i = 0; i < columns.size(); i++)
    {
      ColumnIdentifier col = columns.get(i);

      if (!col.isPkColumn() && !col.isAutoGenerated())
      {
        if (colNr > 0)
        {
          sql.append(',');
          sql.append(lineEnd);
          sql.append("       ");
        }
        appendColumnExpression(sql, col, con);
        colNr++;
      }
    }

    sql.append(lineEnd);
    sql.append(FormatterUtil.getKeyword("WHERE "));
    colNr = 0;
    for (int i=0; i < columns.size(); i++)
    {
      ColumnIdentifier col = columns.get(i);
      if (col.isPkColumn())
      {
        if (colNr > 0)
        {
          sql.append(lineEnd);
          sql.append("  AND ");
        }
        appendColumnExpression(sql, col, con);
        colNr++;
      }
    }
    sql.append(";");
    return formatSql(sql.toString(), con);
  }

  private void appendColumnExpression(StringBuilder sql, ColumnIdentifier col, WbConnection con)
  {
    sql.append(getColumnName(col, con));
    sql.append(" = ");
    sql.append(getValueString(col));
  }

}
