/*
 * This file is part of SQL Workbench/J, http://www.sql-workbench.net
 *
 * Copyright 2002-2016 Thomas Kellerer.
 *
 * Licensed under a modified Apache License, Version 2.0 (the "License")
 * that restricts the use for certain governments.
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.sql-workbench.net/manual/license.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * To contact the author please send an email to: support@sql-workbench.net
 */
package workbench.gui.profiles;


import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JSeparator;
import javax.swing.JTextField;

import workbench.resource.ResourceMgr;
import workbench.ssh.SshConfig;
import workbench.ssh.SshManager;
import workbench.ssh.UrlParser;

import workbench.gui.components.WbFilePicker;

import workbench.util.StringUtil;

/**
 *
 * @author Thomas Kellerer
 */
public class SshConfigPanel
  extends javax.swing.JPanel
{

  public SshConfigPanel()
  {
    initComponents();
    keyPassFile.setAllowMultiple(false);
    keyPassFile.setLastDirProperty("workbench.ssh.keypass.lastdir");
    keyPassFile.setToolTipText(labelKeyPass.getToolTipText());
    if (!SshManager.canUseAgent())
    {
      useAgent.setEnabled(false);
      useAgent.setToolTipText(ResourceMgr.getString("d_LblSshAgentNotAvailable"));
    }
  }

  public void setConfig(SshConfig config, String url)
  {
    clear();

    if (config != null)
    {
      hostname.setText(StringUtil.coalesce(config.getHostname(), ""));
      dbHostname.setText(StringUtil.coalesce(config.getDbHostname(), ""));
      username.setText(StringUtil.coalesce(config.getUsername(), ""));
      password.setText(StringUtil.coalesce(config.getPassword(), ""));
      keyPassFile.setFilename(config.getPrivateKeyFile());
      if (useAgent.isEnabled())
      {
        useAgent.setSelected(config.getTryAgent());
      }
      int localPortNr = config.getLocalPort();
      if (localPortNr > 0)
      {
        localPort.setText(Integer.toString(localPortNr));
      }

      int port = config.getSshPort();
      if (port > 0 && port != 22)
      {
        sshPort.setText(Integer.toString(port));
      }

      int dbPortNr = config.getDbPort();
      if (dbPortNr > 0)
      {
        dbPort.setText(Integer.toString(dbPortNr));
      }
    }

    UrlParser parser = new UrlParser(url);
    if (parser.isLocalURL() == false)
    {
      rewriteUrl.setSelected(true);
    }
  }

  private void clear()
  {
    keyPassFile.setFilename("");
    hostname.setText("");
    dbPort.setText("");
    dbHostname.setText("");
    username.setText("");
    password.setText("");
    localPort.setText("");
    sshPort.setText("");
    useAgent.setSelected(false);
    rewriteUrl.setSelected(false);
  }

  public boolean rewriteURL()
  {
    return rewriteUrl.isSelected();
  }

  public SshConfig getConfig()
  {
    String host = StringUtil.trimToNull(hostname.getText());
    String user = StringUtil.trimToNull(username.getText());
    String localPortNr = StringUtil.trimToNull(localPort.getText());
    String portText = StringUtil.trimToNull(sshPort.getText());
    String pwd = password.getText();

    if (host == null && user == null)
    {
      return null;
    }

    SshConfig config = new SshConfig();
    config.setHostname(host);
    config.setUsername(user);
    config.setPassword(pwd);
    config.setLocalPort(StringUtil.getIntValue(localPortNr, 0));
    config.setSshPort(StringUtil.getIntValue(portText, 0));
    config.setPrivateKeyFile(StringUtil.trimToNull(keyPassFile.getFilename()));
    config.setDbHostname(StringUtil.trimToNull(dbHostname.getText()));
    config.setDbPort(StringUtil.getIntValue(dbPort.getText(), 0));
    config.setTryAgent(useAgent.isSelected());
    return config;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    GridBagConstraints gridBagConstraints;

    labelHost = new JLabel();
    hostname = new JTextField();
    labelUsername = new JLabel();
    username = new JTextField();
    labelPassword = new JLabel();
    password = new JPasswordField();
    labelLocalPort = new JLabel();
    localPort = new JTextField();
    labelSshPort = new JLabel();
    sshPort = new JTextField();
    keyPassFile = new WbFilePicker();
    labelKeyPass = new JLabel();
    labelDbPort = new JLabel();
    labelDbHostname = new JLabel();
    dbHostname = new JTextField();
    dbPort = new JTextField();
    jSeparator1 = new JSeparator();
    rewriteUrl = new JCheckBox();
    useAgent = new JCheckBox();

    setLayout(new GridBagLayout());

    labelHost.setLabelFor(hostname);
    labelHost.setText(ResourceMgr.getString("LblSshHost")); // NOI18N
    labelHost.setToolTipText(ResourceMgr.getString("d_LblSshHost")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelHost, gridBagConstraints);

    hostname.setToolTipText(ResourceMgr.getString("d_LblSshHost")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(hostname, gridBagConstraints);

    labelUsername.setLabelFor(username);
    labelUsername.setText(ResourceMgr.getString("LblSshUser")); // NOI18N
    labelUsername.setToolTipText(ResourceMgr.getString("d_LblSshUser")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelUsername, gridBagConstraints);

    username.setToolTipText(ResourceMgr.getString("d_LblSshUser")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(username, gridBagConstraints);

    labelPassword.setLabelFor(password);
    labelPassword.setText(ResourceMgr.getString("LblSshPwd")); // NOI18N
    labelPassword.setToolTipText(ResourceMgr.getString("d_LblSshPwd")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelPassword, gridBagConstraints);

    password.setToolTipText(ResourceMgr.getString("d_LblSshPwd")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(password, gridBagConstraints);

    labelLocalPort.setLabelFor(localPort);
    labelLocalPort.setText(ResourceMgr.getString("LblSshLocalPort")); // NOI18N
    labelLocalPort.setToolTipText(ResourceMgr.getString("d_LblSshLocalPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelLocalPort, gridBagConstraints);

    localPort.setToolTipText(ResourceMgr.getString("d_LblSshLocalPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(localPort, gridBagConstraints);

    labelSshPort.setLabelFor(sshPort);
    labelSshPort.setText(ResourceMgr.getString("LblSshPort")); // NOI18N
    labelSshPort.setToolTipText(ResourceMgr.getString("d_LblSshPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelSshPort, gridBagConstraints);

    sshPort.setToolTipText(ResourceMgr.getString("d_LblSshPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(sshPort, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(keyPassFile, gridBagConstraints);

    labelKeyPass.setText(ResourceMgr.getString("LblSshKeyFile")); // NOI18N
    labelKeyPass.setToolTipText(ResourceMgr.getString("d_LblSshKeyFile")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelKeyPass, gridBagConstraints);

    labelDbPort.setLabelFor(dbHostname);
    labelDbPort.setText(ResourceMgr.getString("LblSshDbHostname")); // NOI18N
    labelDbPort.setToolTipText(ResourceMgr.getString("d_LblSshDbHostname")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelDbPort, gridBagConstraints);

    labelDbHostname.setLabelFor(dbPort);
    labelDbHostname.setText(ResourceMgr.getString("LblSshDbPort")); // NOI18N
    labelDbHostname.setToolTipText(ResourceMgr.getString("d_LblSshDbPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 0);
    add(labelDbHostname, gridBagConstraints);

    dbHostname.setToolTipText(ResourceMgr.getString("d_LblSshDbHostname")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(dbHostname, gridBagConstraints);

    dbPort.setToolTipText(ResourceMgr.getString("d_LblSshDbPort")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = GridBagConstraints.LINE_START;
    gridBagConstraints.insets = new Insets(5, 5, 0, 11);
    add(dbPort, gridBagConstraints);
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new Insets(8, 5, 5, 11);
    add(jSeparator1, gridBagConstraints);

    rewriteUrl.setSelected(true);
    rewriteUrl.setText(ResourceMgr.getString("LblSshRewriteUrl")); // NOI18N
    rewriteUrl.setToolTipText(ResourceMgr.getString("d_LblSshRewriteUrl")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new Insets(7, 1, 0, 0);
    add(rewriteUrl, gridBagConstraints);

    useAgent.setText(ResourceMgr.getString("LblSshUseAgent")); // NOI18N
    useAgent.setToolTipText(ResourceMgr.getString("d_LblSshUseAgent")); // NOI18N
    gridBagConstraints = new GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = GridBagConstraints.FIRST_LINE_START;
    gridBagConstraints.insets = new Insets(4, 1, 0, 0);
    add(useAgent, gridBagConstraints);
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private JTextField dbHostname;
  private JTextField dbPort;
  private JTextField hostname;
  private JSeparator jSeparator1;
  private WbFilePicker keyPassFile;
  private JLabel labelDbHostname;
  private JLabel labelDbPort;
  private JLabel labelHost;
  private JLabel labelKeyPass;
  private JLabel labelLocalPort;
  private JLabel labelPassword;
  private JLabel labelSshPort;
  private JLabel labelUsername;
  private JTextField localPort;
  private JPasswordField password;
  private JCheckBox rewriteUrl;
  private JTextField sshPort;
  private JCheckBox useAgent;
  private JTextField username;
  // End of variables declaration//GEN-END:variables
}
